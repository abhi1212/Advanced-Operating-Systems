
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <_start+0xeffffff4>:
.globl		_start
_start = RELOC(entry)

.globl entry
entry:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fe 4f 52             	decb   0x52(%edi)
f010000b:	e4 66                	in     $0x66,%al

f010000c <entry>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 
	# sufficient until we set up our real page table in mem_init
	# in lab 2.

	# Load the physical address of entry_pgdir into cr3.  entry_pgdir
	# is defined in entrypgdir.c.
	movl	$(RELOC(entry_pgdir)), %eax
f0100015:	b8 00 80 11 00       	mov    $0x118000,%eax
	movl	%eax, %cr3
f010001a:	0f 22 d8             	mov    %eax,%cr3
	# Turn on paging.
	movl	%cr0, %eax
f010001d:	0f 20 c0             	mov    %cr0,%eax
	orl	$(CR0_PE|CR0_PG|CR0_WP), %eax
f0100020:	0d 01 00 01 80       	or     $0x80010001,%eax
	movl	%eax, %cr0
f0100025:	0f 22 c0             	mov    %eax,%cr0

	# Now paging is enabled, but we're still running at a low EIP
	# (why is this okay?).  Jump up above KERNBASE before entering
	# C code.
	mov	$relocated, %eax
f0100028:	b8 2f 00 10 f0       	mov    $0xf010002f,%eax
	jmp	*%eax
f010002d:	ff e0                	jmp    *%eax

f010002f <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002f:	bd 00 00 00 00       	mov    $0x0,%ebp

	# Set the stack pointer
	movl	$(bootstacktop),%esp
f0100034:	bc 00 80 11 f0       	mov    $0xf0118000,%esp

	# now to C code
	call	i386_init
f0100039:	e8 02 00 00 00       	call   f0100040 <i386_init>

f010003e <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003e:	eb fe                	jmp    f010003e <spin>

f0100040 <i386_init>:
#include <kern/trap.h>


void
i386_init(void)
{
f0100040:	55                   	push   %ebp
f0100041:	89 e5                	mov    %esp,%ebp
f0100043:	83 ec 18             	sub    $0x18,%esp
	extern char edata[], end[];

	// Before doing anything else, complete the ELF loading process.
	// Clear the uninitialized global data (BSS) section of our program.
	// This ensures that all static/global variables start out zero.
	memset(edata, 0, end - edata);
f0100046:	b8 b0 ce 17 f0       	mov    $0xf017ceb0,%eax
f010004b:	2d 9d bf 17 f0       	sub    $0xf017bf9d,%eax
f0100050:	89 44 24 08          	mov    %eax,0x8(%esp)
f0100054:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
f010005b:	00 
f010005c:	c7 04 24 9d bf 17 f0 	movl   $0xf017bf9d,(%esp)
f0100063:	e8 4f 44 00 00       	call   f01044b7 <memset>

	// Initialize the console.
	// Can't call cprintf until after we do this!
	cons_init();
f0100068:	e8 c2 04 00 00       	call   f010052f <cons_init>

	cprintf("6828 decimal is %o octal!\n", 6828); 
f010006d:	c7 44 24 04 ac 1a 00 	movl   $0x1aac,0x4(%esp)
f0100074:	00 
f0100075:	c7 04 24 60 49 10 f0 	movl   $0xf0104960,(%esp)
f010007c:	e8 aa 34 00 00       	call   f010352b <cprintf>

	// Lab 2 memory management initialization functions
	mem_init();
f0100081:	e8 88 11 00 00       	call   f010120e <mem_init>

	// Lab 3 user environment initialization functions
	env_init();
f0100086:	e8 74 2e 00 00       	call   f0102eff <env_init>
	trap_init();
f010008b:	90                   	nop
f010008c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
f0100090:	e8 0d 35 00 00       	call   f01035a2 <trap_init>
#if defined(TEST)
	// Don't touch -- used by grading script!
	ENV_CREATE(TEST, ENV_TYPE_USER);
#else
	// Touch all you want.
	ENV_CREATE(user_hello, ENV_TYPE_USER);
f0100095:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
f010009c:	00 
f010009d:	c7 04 24 56 a3 11 f0 	movl   $0xf011a356,(%esp)
f01000a4:	e8 21 30 00 00       	call   f01030ca <env_create>
#endif // TEST*

	// We only have one user environment for now, so just run it.
	env_run(&envs[0]);
f01000a9:	a1 e8 c1 17 f0       	mov    0xf017c1e8,%eax
f01000ae:	89 04 24             	mov    %eax,(%esp)
f01000b1:	e8 b7 33 00 00       	call   f010346d <env_run>

f01000b6 <_panic>:
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", and then enters the kernel monitor.
 */
void
_panic(const char *file, int line, const char *fmt,...)
{
f01000b6:	55                   	push   %ebp
f01000b7:	89 e5                	mov    %esp,%ebp
f01000b9:	56                   	push   %esi
f01000ba:	53                   	push   %ebx
f01000bb:	83 ec 10             	sub    $0x10,%esp
f01000be:	8b 75 10             	mov    0x10(%ebp),%esi
	va_list ap;

	if (panicstr)
f01000c1:	83 3d a0 ce 17 f0 00 	cmpl   $0x0,0xf017cea0
f01000c8:	75 3d                	jne    f0100107 <_panic+0x51>
		goto dead;
	panicstr = fmt;
f01000ca:	89 35 a0 ce 17 f0    	mov    %esi,0xf017cea0

	// Be extra sure that the machine is in as reasonable state
	asm volatile("cli; cld");
f01000d0:	fa                   	cli    
f01000d1:	fc                   	cld    

	va_start(ap, fmt);
f01000d2:	8d 5d 14             	lea    0x14(%ebp),%ebx
	cprintf("kernel panic at %s:%d: ", file, line);
f01000d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01000d8:	89 44 24 08          	mov    %eax,0x8(%esp)
f01000dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01000df:	89 44 24 04          	mov    %eax,0x4(%esp)
f01000e3:	c7 04 24 7b 49 10 f0 	movl   $0xf010497b,(%esp)
f01000ea:	e8 3c 34 00 00       	call   f010352b <cprintf>
	vcprintf(fmt, ap);
f01000ef:	89 5c 24 04          	mov    %ebx,0x4(%esp)
f01000f3:	89 34 24             	mov    %esi,(%esp)
f01000f6:	e8 fd 33 00 00       	call   f01034f8 <vcprintf>
	cprintf("\n");
f01000fb:	c7 04 24 5c 4f 10 f0 	movl   $0xf0104f5c,(%esp)
f0100102:	e8 24 34 00 00       	call   f010352b <cprintf>
	va_end(ap);

dead:
	/* break into the kernel monitor */
	while (1)
		monitor(NULL);
f0100107:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f010010e:	e8 08 07 00 00       	call   f010081b <monitor>
f0100113:	eb f2                	jmp    f0100107 <_panic+0x51>

f0100115 <_warn>:
}

/* like panic, but don't */
void
_warn(const char *file, int line, const char *fmt,...)
{
f0100115:	55                   	push   %ebp
f0100116:	89 e5                	mov    %esp,%ebp
f0100118:	53                   	push   %ebx
f0100119:	83 ec 14             	sub    $0x14,%esp
	va_list ap;

	va_start(ap, fmt);
f010011c:	8d 5d 14             	lea    0x14(%ebp),%ebx
	cprintf("kernel warning at %s:%d: ", file, line);
f010011f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100122:	89 44 24 08          	mov    %eax,0x8(%esp)
f0100126:	8b 45 08             	mov    0x8(%ebp),%eax
f0100129:	89 44 24 04          	mov    %eax,0x4(%esp)
f010012d:	c7 04 24 93 49 10 f0 	movl   $0xf0104993,(%esp)
f0100134:	e8 f2 33 00 00       	call   f010352b <cprintf>
	vcprintf(fmt, ap);
f0100139:	89 5c 24 04          	mov    %ebx,0x4(%esp)
f010013d:	8b 45 10             	mov    0x10(%ebp),%eax
f0100140:	89 04 24             	mov    %eax,(%esp)
f0100143:	e8 b0 33 00 00       	call   f01034f8 <vcprintf>
	cprintf("\n");
f0100148:	c7 04 24 5c 4f 10 f0 	movl   $0xf0104f5c,(%esp)
f010014f:	e8 d7 33 00 00       	call   f010352b <cprintf>
	va_end(ap);
}
f0100154:	83 c4 14             	add    $0x14,%esp
f0100157:	5b                   	pop    %ebx
f0100158:	5d                   	pop    %ebp
f0100159:	c3                   	ret    
f010015a:	66 90                	xchg   %ax,%ax
f010015c:	66 90                	xchg   %ax,%ax
f010015e:	66 90                	xchg   %ax,%ax

f0100160 <serial_proc_data>:

static bool serial_exists;

static int
serial_proc_data(void)
{
f0100160:	55                   	push   %ebp
f0100161:	89 e5                	mov    %esp,%ebp

static inline uint8_t
inb(int port)
{
	uint8_t data;
	asm volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100163:	ba fd 03 00 00       	mov    $0x3fd,%edx
f0100168:	ec                   	in     (%dx),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100169:	a8 01                	test   $0x1,%al
f010016b:	74 08                	je     f0100175 <serial_proc_data+0x15>
f010016d:	b2 f8                	mov    $0xf8,%dl
f010016f:	ec                   	in     (%dx),%al
		return -1;
	return inb(COM1+COM_RX);
f0100170:	0f b6 c0             	movzbl %al,%eax
f0100173:	eb 05                	jmp    f010017a <serial_proc_data+0x1a>

static int
serial_proc_data(void)
{
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
		return -1;
f0100175:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	return inb(COM1+COM_RX);
}
f010017a:	5d                   	pop    %ebp
f010017b:	c3                   	ret    

f010017c <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
static void
cons_intr(int (*proc)(void))
{
f010017c:	55                   	push   %ebp
f010017d:	89 e5                	mov    %esp,%ebp
f010017f:	53                   	push   %ebx
f0100180:	83 ec 04             	sub    $0x4,%esp
f0100183:	89 c3                	mov    %eax,%ebx
	int c;

	while ((c = (*proc)()) != -1) {
f0100185:	eb 2a                	jmp    f01001b1 <cons_intr+0x35>
		if (c == 0)
f0100187:	85 d2                	test   %edx,%edx
f0100189:	74 26                	je     f01001b1 <cons_intr+0x35>
			continue;
		cons.buf[cons.wpos++] = c;
f010018b:	a1 c4 c1 17 f0       	mov    0xf017c1c4,%eax
f0100190:	8d 48 01             	lea    0x1(%eax),%ecx
f0100193:	89 0d c4 c1 17 f0    	mov    %ecx,0xf017c1c4
f0100199:	88 90 c0 bf 17 f0    	mov    %dl,-0xfe84040(%eax)
		if (cons.wpos == CONSBUFSIZE)
f010019f:	81 f9 00 02 00 00    	cmp    $0x200,%ecx
f01001a5:	75 0a                	jne    f01001b1 <cons_intr+0x35>
			cons.wpos = 0;
f01001a7:	c7 05 c4 c1 17 f0 00 	movl   $0x0,0xf017c1c4
f01001ae:	00 00 00 
static void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f01001b1:	ff d3                	call   *%ebx
f01001b3:	89 c2                	mov    %eax,%edx
f01001b5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01001b8:	75 cd                	jne    f0100187 <cons_intr+0xb>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f01001ba:	83 c4 04             	add    $0x4,%esp
f01001bd:	5b                   	pop    %ebx
f01001be:	5d                   	pop    %ebp
f01001bf:	c3                   	ret    

f01001c0 <kbd_proc_data>:
f01001c0:	ba 64 00 00 00       	mov    $0x64,%edx
f01001c5:	ec                   	in     (%dx),%al
	int c;
	uint8_t stat, data;
	static uint32_t shift;

	stat = inb(KBSTATP);
	if ((stat & KBS_DIB) == 0)
f01001c6:	a8 01                	test   $0x1,%al
f01001c8:	0f 84 f7 00 00 00    	je     f01002c5 <kbd_proc_data+0x105>
		return -1;
	// Ignore data from mouse.
	if (stat & KBS_TERR)
f01001ce:	a8 20                	test   $0x20,%al
f01001d0:	0f 85 f5 00 00 00    	jne    f01002cb <kbd_proc_data+0x10b>
f01001d6:	b2 60                	mov    $0x60,%dl
f01001d8:	ec                   	in     (%dx),%al
f01001d9:	89 c2                	mov    %eax,%edx
		return -1;

	data = inb(KBDATAP);

	if (data == 0xE0) {
f01001db:	3c e0                	cmp    $0xe0,%al
f01001dd:	75 0d                	jne    f01001ec <kbd_proc_data+0x2c>
		// E0 escape character
		shift |= E0ESC;
f01001df:	83 0d a0 bf 17 f0 40 	orl    $0x40,0xf017bfa0
		return 0;
f01001e6:	b8 00 00 00 00       	mov    $0x0,%eax
		cprintf("Rebooting!\n");
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
}
f01001eb:	c3                   	ret    
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01001ec:	55                   	push   %ebp
f01001ed:	89 e5                	mov    %esp,%ebp
f01001ef:	53                   	push   %ebx
f01001f0:	83 ec 14             	sub    $0x14,%esp

	if (data == 0xE0) {
		// E0 escape character
		shift |= E0ESC;
		return 0;
	} else if (data & 0x80) {
f01001f3:	84 c0                	test   %al,%al
f01001f5:	79 37                	jns    f010022e <kbd_proc_data+0x6e>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01001f7:	8b 0d a0 bf 17 f0    	mov    0xf017bfa0,%ecx
f01001fd:	89 cb                	mov    %ecx,%ebx
f01001ff:	83 e3 40             	and    $0x40,%ebx
f0100202:	83 e0 7f             	and    $0x7f,%eax
f0100205:	85 db                	test   %ebx,%ebx
f0100207:	0f 44 d0             	cmove  %eax,%edx
		shift &= ~(shiftcode[data] | E0ESC);
f010020a:	0f b6 d2             	movzbl %dl,%edx
f010020d:	0f b6 82 00 4b 10 f0 	movzbl -0xfefb500(%edx),%eax
f0100214:	83 c8 40             	or     $0x40,%eax
f0100217:	0f b6 c0             	movzbl %al,%eax
f010021a:	f7 d0                	not    %eax
f010021c:	21 c1                	and    %eax,%ecx
f010021e:	89 0d a0 bf 17 f0    	mov    %ecx,0xf017bfa0
		return 0;
f0100224:	b8 00 00 00 00       	mov    $0x0,%eax
f0100229:	e9 a3 00 00 00       	jmp    f01002d1 <kbd_proc_data+0x111>
	} else if (shift & E0ESC) {
f010022e:	8b 0d a0 bf 17 f0    	mov    0xf017bfa0,%ecx
f0100234:	f6 c1 40             	test   $0x40,%cl
f0100237:	74 0e                	je     f0100247 <kbd_proc_data+0x87>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f0100239:	83 c8 80             	or     $0xffffff80,%eax
f010023c:	89 c2                	mov    %eax,%edx
		shift &= ~E0ESC;
f010023e:	83 e1 bf             	and    $0xffffffbf,%ecx
f0100241:	89 0d a0 bf 17 f0    	mov    %ecx,0xf017bfa0
	}

	shift |= shiftcode[data];
f0100247:	0f b6 d2             	movzbl %dl,%edx
f010024a:	0f b6 82 00 4b 10 f0 	movzbl -0xfefb500(%edx),%eax
f0100251:	0b 05 a0 bf 17 f0    	or     0xf017bfa0,%eax
	shift ^= togglecode[data];
f0100257:	0f b6 8a 00 4a 10 f0 	movzbl -0xfefb600(%edx),%ecx
f010025e:	31 c8                	xor    %ecx,%eax
f0100260:	a3 a0 bf 17 f0       	mov    %eax,0xf017bfa0

	c = charcode[shift & (CTL | SHIFT)][data];
f0100265:	89 c1                	mov    %eax,%ecx
f0100267:	83 e1 03             	and    $0x3,%ecx
f010026a:	8b 0c 8d e0 49 10 f0 	mov    -0xfefb620(,%ecx,4),%ecx
f0100271:	0f b6 14 11          	movzbl (%ecx,%edx,1),%edx
f0100275:	0f b6 da             	movzbl %dl,%ebx
	if (shift & CAPSLOCK) {
f0100278:	a8 08                	test   $0x8,%al
f010027a:	74 1b                	je     f0100297 <kbd_proc_data+0xd7>
		if ('a' <= c && c <= 'z')
f010027c:	89 da                	mov    %ebx,%edx
f010027e:	8d 4b 9f             	lea    -0x61(%ebx),%ecx
f0100281:	83 f9 19             	cmp    $0x19,%ecx
f0100284:	77 05                	ja     f010028b <kbd_proc_data+0xcb>
			c += 'A' - 'a';
f0100286:	83 eb 20             	sub    $0x20,%ebx
f0100289:	eb 0c                	jmp    f0100297 <kbd_proc_data+0xd7>
		else if ('A' <= c && c <= 'Z')
f010028b:	83 ea 41             	sub    $0x41,%edx
			c += 'a' - 'A';
f010028e:	8d 4b 20             	lea    0x20(%ebx),%ecx
f0100291:	83 fa 19             	cmp    $0x19,%edx
f0100294:	0f 46 d9             	cmovbe %ecx,%ebx
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100297:	f7 d0                	not    %eax
f0100299:	89 c2                	mov    %eax,%edx
		cprintf("Rebooting!\n");
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f010029b:	89 d8                	mov    %ebx,%eax
			c += 'a' - 'A';
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f010029d:	f6 c2 06             	test   $0x6,%dl
f01002a0:	75 2f                	jne    f01002d1 <kbd_proc_data+0x111>
f01002a2:	81 fb e9 00 00 00    	cmp    $0xe9,%ebx
f01002a8:	75 27                	jne    f01002d1 <kbd_proc_data+0x111>
		cprintf("Rebooting!\n");
f01002aa:	c7 04 24 ad 49 10 f0 	movl   $0xf01049ad,(%esp)
f01002b1:	e8 75 32 00 00       	call   f010352b <cprintf>
}

static inline void
outb(int port, uint8_t data)
{
	asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01002b6:	ba 92 00 00 00       	mov    $0x92,%edx
f01002bb:	b8 03 00 00 00       	mov    $0x3,%eax
f01002c0:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f01002c1:	89 d8                	mov    %ebx,%eax
f01002c3:	eb 0c                	jmp    f01002d1 <kbd_proc_data+0x111>
	uint8_t stat, data;
	static uint32_t shift;

	stat = inb(KBSTATP);
	if ((stat & KBS_DIB) == 0)
		return -1;
f01002c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01002ca:	c3                   	ret    
	// Ignore data from mouse.
	if (stat & KBS_TERR)
		return -1;
f01002cb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01002d0:	c3                   	ret    
		cprintf("Rebooting!\n");
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
}
f01002d1:	83 c4 14             	add    $0x14,%esp
f01002d4:	5b                   	pop    %ebx
f01002d5:	5d                   	pop    %ebp
f01002d6:	c3                   	ret    

f01002d7 <cons_putc>:
}

// output a character to the console
static void
cons_putc(int c)
{
f01002d7:	55                   	push   %ebp
f01002d8:	89 e5                	mov    %esp,%ebp
f01002da:	57                   	push   %edi
f01002db:	56                   	push   %esi
f01002dc:	53                   	push   %ebx
f01002dd:	83 ec 1c             	sub    $0x1c,%esp
f01002e0:	89 c7                	mov    %eax,%edi
f01002e2:	bb 01 32 00 00       	mov    $0x3201,%ebx

static inline uint8_t
inb(int port)
{
	uint8_t data;
	asm volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01002e7:	be fd 03 00 00       	mov    $0x3fd,%esi
f01002ec:	b9 84 00 00 00       	mov    $0x84,%ecx
f01002f1:	eb 06                	jmp    f01002f9 <cons_putc+0x22>
f01002f3:	89 ca                	mov    %ecx,%edx
f01002f5:	ec                   	in     (%dx),%al
f01002f6:	ec                   	in     (%dx),%al
f01002f7:	ec                   	in     (%dx),%al
f01002f8:	ec                   	in     (%dx),%al
f01002f9:	89 f2                	mov    %esi,%edx
f01002fb:	ec                   	in     (%dx),%al
static void
serial_putc(int c)
{
	int i;

	for (i = 0;
f01002fc:	a8 20                	test   $0x20,%al
f01002fe:	75 05                	jne    f0100305 <cons_putc+0x2e>
	     !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800;
f0100300:	83 eb 01             	sub    $0x1,%ebx
f0100303:	75 ee                	jne    f01002f3 <cons_putc+0x1c>
	     i++)
		delay();

	outb(COM1 + COM_TX, c);
f0100305:	89 f8                	mov    %edi,%eax
f0100307:	0f b6 c0             	movzbl %al,%eax
f010030a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
}

static inline void
outb(int port, uint8_t data)
{
	asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010030d:	ba f8 03 00 00       	mov    $0x3f8,%edx
f0100312:	ee                   	out    %al,(%dx)
f0100313:	bb 01 32 00 00       	mov    $0x3201,%ebx

static inline uint8_t
inb(int port)
{
	uint8_t data;
	asm volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100318:	be 79 03 00 00       	mov    $0x379,%esi
f010031d:	b9 84 00 00 00       	mov    $0x84,%ecx
f0100322:	eb 06                	jmp    f010032a <cons_putc+0x53>
f0100324:	89 ca                	mov    %ecx,%edx
f0100326:	ec                   	in     (%dx),%al
f0100327:	ec                   	in     (%dx),%al
f0100328:	ec                   	in     (%dx),%al
f0100329:	ec                   	in     (%dx),%al
f010032a:	89 f2                	mov    %esi,%edx
f010032c:	ec                   	in     (%dx),%al
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 12800; i++)
f010032d:	84 c0                	test   %al,%al
f010032f:	78 05                	js     f0100336 <cons_putc+0x5f>
f0100331:	83 eb 01             	sub    $0x1,%ebx
f0100334:	75 ee                	jne    f0100324 <cons_putc+0x4d>
}

static inline void
outb(int port, uint8_t data)
{
	asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100336:	ba 78 03 00 00       	mov    $0x378,%edx
f010033b:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f010033f:	ee                   	out    %al,(%dx)
f0100340:	b2 7a                	mov    $0x7a,%dl
f0100342:	b8 0d 00 00 00       	mov    $0xd,%eax
f0100347:	ee                   	out    %al,(%dx)
f0100348:	b8 08 00 00 00       	mov    $0x8,%eax
f010034d:	ee                   	out    %al,(%dx)

static void
cga_putc(int c)
{
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f010034e:	89 fa                	mov    %edi,%edx
f0100350:	81 e2 00 ff ff ff    	and    $0xffffff00,%edx
		c |= 0x0700;
f0100356:	89 f8                	mov    %edi,%eax
f0100358:	80 cc 07             	or     $0x7,%ah
f010035b:	85 d2                	test   %edx,%edx
f010035d:	0f 44 f8             	cmove  %eax,%edi

	switch (c & 0xff) {
f0100360:	89 f8                	mov    %edi,%eax
f0100362:	0f b6 c0             	movzbl %al,%eax
f0100365:	83 f8 09             	cmp    $0x9,%eax
f0100368:	74 78                	je     f01003e2 <cons_putc+0x10b>
f010036a:	83 f8 09             	cmp    $0x9,%eax
f010036d:	7f 0a                	jg     f0100379 <cons_putc+0xa2>
f010036f:	83 f8 08             	cmp    $0x8,%eax
f0100372:	74 18                	je     f010038c <cons_putc+0xb5>
f0100374:	e9 9d 00 00 00       	jmp    f0100416 <cons_putc+0x13f>
f0100379:	83 f8 0a             	cmp    $0xa,%eax
f010037c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
f0100380:	74 3a                	je     f01003bc <cons_putc+0xe5>
f0100382:	83 f8 0d             	cmp    $0xd,%eax
f0100385:	74 3d                	je     f01003c4 <cons_putc+0xed>
f0100387:	e9 8a 00 00 00       	jmp    f0100416 <cons_putc+0x13f>
	case '\b':
		if (crt_pos > 0) {
f010038c:	0f b7 05 c8 c1 17 f0 	movzwl 0xf017c1c8,%eax
f0100393:	66 85 c0             	test   %ax,%ax
f0100396:	0f 84 e5 00 00 00    	je     f0100481 <cons_putc+0x1aa>
			crt_pos--;
f010039c:	83 e8 01             	sub    $0x1,%eax
f010039f:	66 a3 c8 c1 17 f0    	mov    %ax,0xf017c1c8
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f01003a5:	0f b7 c0             	movzwl %ax,%eax
f01003a8:	66 81 e7 00 ff       	and    $0xff00,%di
f01003ad:	83 cf 20             	or     $0x20,%edi
f01003b0:	8b 15 cc c1 17 f0    	mov    0xf017c1cc,%edx
f01003b6:	66 89 3c 42          	mov    %di,(%edx,%eax,2)
f01003ba:	eb 78                	jmp    f0100434 <cons_putc+0x15d>
		}
		break;
	case '\n':
		crt_pos += CRT_COLS;
f01003bc:	66 83 05 c8 c1 17 f0 	addw   $0x50,0xf017c1c8
f01003c3:	50 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01003c4:	0f b7 05 c8 c1 17 f0 	movzwl 0xf017c1c8,%eax
f01003cb:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
f01003d1:	c1 e8 16             	shr    $0x16,%eax
f01003d4:	8d 04 80             	lea    (%eax,%eax,4),%eax
f01003d7:	c1 e0 04             	shl    $0x4,%eax
f01003da:	66 a3 c8 c1 17 f0    	mov    %ax,0xf017c1c8
f01003e0:	eb 52                	jmp    f0100434 <cons_putc+0x15d>
		break;
	case '\t':
		cons_putc(' ');
f01003e2:	b8 20 00 00 00       	mov    $0x20,%eax
f01003e7:	e8 eb fe ff ff       	call   f01002d7 <cons_putc>
		cons_putc(' ');
f01003ec:	b8 20 00 00 00       	mov    $0x20,%eax
f01003f1:	e8 e1 fe ff ff       	call   f01002d7 <cons_putc>
		cons_putc(' ');
f01003f6:	b8 20 00 00 00       	mov    $0x20,%eax
f01003fb:	e8 d7 fe ff ff       	call   f01002d7 <cons_putc>
		cons_putc(' ');
f0100400:	b8 20 00 00 00       	mov    $0x20,%eax
f0100405:	e8 cd fe ff ff       	call   f01002d7 <cons_putc>
		cons_putc(' ');
f010040a:	b8 20 00 00 00       	mov    $0x20,%eax
f010040f:	e8 c3 fe ff ff       	call   f01002d7 <cons_putc>
f0100414:	eb 1e                	jmp    f0100434 <cons_putc+0x15d>
		break;
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100416:	0f b7 05 c8 c1 17 f0 	movzwl 0xf017c1c8,%eax
f010041d:	8d 50 01             	lea    0x1(%eax),%edx
f0100420:	66 89 15 c8 c1 17 f0 	mov    %dx,0xf017c1c8
f0100427:	0f b7 c0             	movzwl %ax,%eax
f010042a:	8b 15 cc c1 17 f0    	mov    0xf017c1cc,%edx
f0100430:	66 89 3c 42          	mov    %di,(%edx,%eax,2)
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f0100434:	66 81 3d c8 c1 17 f0 	cmpw   $0x7cf,0xf017c1c8
f010043b:	cf 07 
f010043d:	76 42                	jbe    f0100481 <cons_putc+0x1aa>
		int i;

		memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
f010043f:	a1 cc c1 17 f0       	mov    0xf017c1cc,%eax
f0100444:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
f010044b:	00 
f010044c:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100452:	89 54 24 04          	mov    %edx,0x4(%esp)
f0100456:	89 04 24             	mov    %eax,(%esp)
f0100459:	e8 a6 40 00 00       	call   f0104504 <memmove>
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
			crt_buf[i] = 0x0700 | ' ';
f010045e:	8b 15 cc c1 17 f0    	mov    0xf017c1cc,%edx
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100464:	b8 80 07 00 00       	mov    $0x780,%eax
			crt_buf[i] = 0x0700 | ' ';
f0100469:	66 c7 04 42 20 07    	movw   $0x720,(%edx,%eax,2)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010046f:	83 c0 01             	add    $0x1,%eax
f0100472:	3d d0 07 00 00       	cmp    $0x7d0,%eax
f0100477:	75 f0                	jne    f0100469 <cons_putc+0x192>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100479:	66 83 2d c8 c1 17 f0 	subw   $0x50,0xf017c1c8
f0100480:	50 
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100481:	8b 0d d0 c1 17 f0    	mov    0xf017c1d0,%ecx
f0100487:	b8 0e 00 00 00       	mov    $0xe,%eax
f010048c:	89 ca                	mov    %ecx,%edx
f010048e:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f010048f:	0f b7 1d c8 c1 17 f0 	movzwl 0xf017c1c8,%ebx
f0100496:	8d 71 01             	lea    0x1(%ecx),%esi
f0100499:	89 d8                	mov    %ebx,%eax
f010049b:	66 c1 e8 08          	shr    $0x8,%ax
f010049f:	89 f2                	mov    %esi,%edx
f01004a1:	ee                   	out    %al,(%dx)
f01004a2:	b8 0f 00 00 00       	mov    $0xf,%eax
f01004a7:	89 ca                	mov    %ecx,%edx
f01004a9:	ee                   	out    %al,(%dx)
f01004aa:	89 d8                	mov    %ebx,%eax
f01004ac:	89 f2                	mov    %esi,%edx
f01004ae:	ee                   	out    %al,(%dx)
cons_putc(int c)
{
	serial_putc(c);
	lpt_putc(c);
	cga_putc(c);
}
f01004af:	83 c4 1c             	add    $0x1c,%esp
f01004b2:	5b                   	pop    %ebx
f01004b3:	5e                   	pop    %esi
f01004b4:	5f                   	pop    %edi
f01004b5:	5d                   	pop    %ebp
f01004b6:	c3                   	ret    

f01004b7 <serial_intr>:
}

void
serial_intr(void)
{
	if (serial_exists)
f01004b7:	80 3d d4 c1 17 f0 00 	cmpb   $0x0,0xf017c1d4
f01004be:	74 11                	je     f01004d1 <serial_intr+0x1a>
	return inb(COM1+COM_RX);
}

void
serial_intr(void)
{
f01004c0:	55                   	push   %ebp
f01004c1:	89 e5                	mov    %esp,%ebp
f01004c3:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
		cons_intr(serial_proc_data);
f01004c6:	b8 60 01 10 f0       	mov    $0xf0100160,%eax
f01004cb:	e8 ac fc ff ff       	call   f010017c <cons_intr>
}
f01004d0:	c9                   	leave  
f01004d1:	f3 c3                	repz ret 

f01004d3 <kbd_intr>:
	return c;
}

void
kbd_intr(void)
{
f01004d3:	55                   	push   %ebp
f01004d4:	89 e5                	mov    %esp,%ebp
f01004d6:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f01004d9:	b8 c0 01 10 f0       	mov    $0xf01001c0,%eax
f01004de:	e8 99 fc ff ff       	call   f010017c <cons_intr>
}
f01004e3:	c9                   	leave  
f01004e4:	c3                   	ret    

f01004e5 <cons_getc>:
}

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f01004e5:	55                   	push   %ebp
f01004e6:	89 e5                	mov    %esp,%ebp
f01004e8:	83 ec 08             	sub    $0x8,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f01004eb:	e8 c7 ff ff ff       	call   f01004b7 <serial_intr>
	kbd_intr();
f01004f0:	e8 de ff ff ff       	call   f01004d3 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f01004f5:	a1 c0 c1 17 f0       	mov    0xf017c1c0,%eax
f01004fa:	3b 05 c4 c1 17 f0    	cmp    0xf017c1c4,%eax
f0100500:	74 26                	je     f0100528 <cons_getc+0x43>
		c = cons.buf[cons.rpos++];
f0100502:	8d 50 01             	lea    0x1(%eax),%edx
f0100505:	89 15 c0 c1 17 f0    	mov    %edx,0xf017c1c0
f010050b:	0f b6 88 c0 bf 17 f0 	movzbl -0xfe84040(%eax),%ecx
		if (cons.rpos == CONSBUFSIZE)
			cons.rpos = 0;
		return c;
f0100512:	89 c8                	mov    %ecx,%eax
	kbd_intr();

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
		c = cons.buf[cons.rpos++];
		if (cons.rpos == CONSBUFSIZE)
f0100514:	81 fa 00 02 00 00    	cmp    $0x200,%edx
f010051a:	75 11                	jne    f010052d <cons_getc+0x48>
			cons.rpos = 0;
f010051c:	c7 05 c0 c1 17 f0 00 	movl   $0x0,0xf017c1c0
f0100523:	00 00 00 
f0100526:	eb 05                	jmp    f010052d <cons_getc+0x48>
		return c;
	}
	return 0;
f0100528:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010052d:	c9                   	leave  
f010052e:	c3                   	ret    

f010052f <cons_init>:
}

// initialize the console devices
void
cons_init(void)
{
f010052f:	55                   	push   %ebp
f0100530:	89 e5                	mov    %esp,%ebp
f0100532:	57                   	push   %edi
f0100533:	56                   	push   %esi
f0100534:	53                   	push   %ebx
f0100535:	83 ec 1c             	sub    $0x1c,%esp
	volatile uint16_t *cp;
	uint16_t was;
	unsigned pos;

	cp = (uint16_t*) (KERNBASE + CGA_BUF);
	was = *cp;
f0100538:	0f b7 15 00 80 0b f0 	movzwl 0xf00b8000,%edx
	*cp = (uint16_t) 0xA55A;
f010053f:	66 c7 05 00 80 0b f0 	movw   $0xa55a,0xf00b8000
f0100546:	5a a5 
	if (*cp != 0xA55A) {
f0100548:	0f b7 05 00 80 0b f0 	movzwl 0xf00b8000,%eax
f010054f:	66 3d 5a a5          	cmp    $0xa55a,%ax
f0100553:	74 11                	je     f0100566 <cons_init+0x37>
		cp = (uint16_t*) (KERNBASE + MONO_BUF);
		addr_6845 = MONO_BASE;
f0100555:	c7 05 d0 c1 17 f0 b4 	movl   $0x3b4,0xf017c1d0
f010055c:	03 00 00 

	cp = (uint16_t*) (KERNBASE + CGA_BUF);
	was = *cp;
	*cp = (uint16_t) 0xA55A;
	if (*cp != 0xA55A) {
		cp = (uint16_t*) (KERNBASE + MONO_BUF);
f010055f:	bf 00 00 0b f0       	mov    $0xf00b0000,%edi
f0100564:	eb 16                	jmp    f010057c <cons_init+0x4d>
		addr_6845 = MONO_BASE;
	} else {
		*cp = was;
f0100566:	66 89 15 00 80 0b f0 	mov    %dx,0xf00b8000
		addr_6845 = CGA_BASE;
f010056d:	c7 05 d0 c1 17 f0 d4 	movl   $0x3d4,0xf017c1d0
f0100574:	03 00 00 
{
	volatile uint16_t *cp;
	uint16_t was;
	unsigned pos;

	cp = (uint16_t*) (KERNBASE + CGA_BUF);
f0100577:	bf 00 80 0b f0       	mov    $0xf00b8000,%edi
		*cp = was;
		addr_6845 = CGA_BASE;
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f010057c:	8b 0d d0 c1 17 f0    	mov    0xf017c1d0,%ecx
f0100582:	b8 0e 00 00 00       	mov    $0xe,%eax
f0100587:	89 ca                	mov    %ecx,%edx
f0100589:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f010058a:	8d 59 01             	lea    0x1(%ecx),%ebx

static inline uint8_t
inb(int port)
{
	uint8_t data;
	asm volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010058d:	89 da                	mov    %ebx,%edx
f010058f:	ec                   	in     (%dx),%al
f0100590:	0f b6 f0             	movzbl %al,%esi
f0100593:	c1 e6 08             	shl    $0x8,%esi
}

static inline void
outb(int port, uint8_t data)
{
	asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100596:	b8 0f 00 00 00       	mov    $0xf,%eax
f010059b:	89 ca                	mov    %ecx,%edx
f010059d:	ee                   	out    %al,(%dx)

static inline uint8_t
inb(int port)
{
	uint8_t data;
	asm volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010059e:	89 da                	mov    %ebx,%edx
f01005a0:	ec                   	in     (%dx),%al
	outb(addr_6845, 15);
	pos |= inb(addr_6845 + 1);

	crt_buf = (uint16_t*) cp;
f01005a1:	89 3d cc c1 17 f0    	mov    %edi,0xf017c1cc

	/* Extract cursor location */
	outb(addr_6845, 14);
	pos = inb(addr_6845 + 1) << 8;
	outb(addr_6845, 15);
	pos |= inb(addr_6845 + 1);
f01005a7:	0f b6 d8             	movzbl %al,%ebx
f01005aa:	09 de                	or     %ebx,%esi

	crt_buf = (uint16_t*) cp;
	crt_pos = pos;
f01005ac:	66 89 35 c8 c1 17 f0 	mov    %si,0xf017c1c8
}

static inline void
outb(int port, uint8_t data)
{
	asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005b3:	be fa 03 00 00       	mov    $0x3fa,%esi
f01005b8:	b8 00 00 00 00       	mov    $0x0,%eax
f01005bd:	89 f2                	mov    %esi,%edx
f01005bf:	ee                   	out    %al,(%dx)
f01005c0:	b2 fb                	mov    $0xfb,%dl
f01005c2:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
f01005c7:	ee                   	out    %al,(%dx)
f01005c8:	bb f8 03 00 00       	mov    $0x3f8,%ebx
f01005cd:	b8 0c 00 00 00       	mov    $0xc,%eax
f01005d2:	89 da                	mov    %ebx,%edx
f01005d4:	ee                   	out    %al,(%dx)
f01005d5:	b2 f9                	mov    $0xf9,%dl
f01005d7:	b8 00 00 00 00       	mov    $0x0,%eax
f01005dc:	ee                   	out    %al,(%dx)
f01005dd:	b2 fb                	mov    $0xfb,%dl
f01005df:	b8 03 00 00 00       	mov    $0x3,%eax
f01005e4:	ee                   	out    %al,(%dx)
f01005e5:	b2 fc                	mov    $0xfc,%dl
f01005e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01005ec:	ee                   	out    %al,(%dx)
f01005ed:	b2 f9                	mov    $0xf9,%dl
f01005ef:	b8 01 00 00 00       	mov    $0x1,%eax
f01005f4:	ee                   	out    %al,(%dx)

static inline uint8_t
inb(int port)
{
	uint8_t data;
	asm volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005f5:	b2 fd                	mov    $0xfd,%dl
f01005f7:	ec                   	in     (%dx),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f01005f8:	3c ff                	cmp    $0xff,%al
f01005fa:	0f 95 c1             	setne  %cl
f01005fd:	88 0d d4 c1 17 f0    	mov    %cl,0xf017c1d4
f0100603:	89 f2                	mov    %esi,%edx
f0100605:	ec                   	in     (%dx),%al
f0100606:	89 da                	mov    %ebx,%edx
f0100608:	ec                   	in     (%dx),%al
{
	cga_init();
	kbd_init();
	serial_init();

	if (!serial_exists)
f0100609:	84 c9                	test   %cl,%cl
f010060b:	75 0c                	jne    f0100619 <cons_init+0xea>
		cprintf("Serial port does not exist!\n");
f010060d:	c7 04 24 b9 49 10 f0 	movl   $0xf01049b9,(%esp)
f0100614:	e8 12 2f 00 00       	call   f010352b <cprintf>
}
f0100619:	83 c4 1c             	add    $0x1c,%esp
f010061c:	5b                   	pop    %ebx
f010061d:	5e                   	pop    %esi
f010061e:	5f                   	pop    %edi
f010061f:	5d                   	pop    %ebp
f0100620:	c3                   	ret    

f0100621 <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100621:	55                   	push   %ebp
f0100622:	89 e5                	mov    %esp,%ebp
f0100624:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100627:	8b 45 08             	mov    0x8(%ebp),%eax
f010062a:	e8 a8 fc ff ff       	call   f01002d7 <cons_putc>
}
f010062f:	c9                   	leave  
f0100630:	c3                   	ret    

f0100631 <getchar>:

int
getchar(void)
{
f0100631:	55                   	push   %ebp
f0100632:	89 e5                	mov    %esp,%ebp
f0100634:	83 ec 08             	sub    $0x8,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100637:	e8 a9 fe ff ff       	call   f01004e5 <cons_getc>
f010063c:	85 c0                	test   %eax,%eax
f010063e:	74 f7                	je     f0100637 <getchar+0x6>
		/* do nothing */;
	return c;
}
f0100640:	c9                   	leave  
f0100641:	c3                   	ret    

f0100642 <iscons>:

int
iscons(int fdnum)
{
f0100642:	55                   	push   %ebp
f0100643:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
}
f0100645:	b8 01 00 00 00       	mov    $0x1,%eax
f010064a:	5d                   	pop    %ebp
f010064b:	c3                   	ret    
f010064c:	66 90                	xchg   %ax,%ax
f010064e:	66 90                	xchg   %ax,%ax

f0100650 <mon_help>:

/***** Implementations of basic kernel monitor commands *****/

int
mon_help(int argc, char **argv, struct Trapframe *tf)
{
f0100650:	55                   	push   %ebp
f0100651:	89 e5                	mov    %esp,%ebp
f0100653:	83 ec 18             	sub    $0x18,%esp
	int i;

	for (i = 0; i < ARRAY_SIZE(commands); i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].desc);
f0100656:	c7 44 24 08 00 4c 10 	movl   $0xf0104c00,0x8(%esp)
f010065d:	f0 
f010065e:	c7 44 24 04 1e 4c 10 	movl   $0xf0104c1e,0x4(%esp)
f0100665:	f0 
f0100666:	c7 04 24 23 4c 10 f0 	movl   $0xf0104c23,(%esp)
f010066d:	e8 b9 2e 00 00       	call   f010352b <cprintf>
f0100672:	c7 44 24 08 c4 4c 10 	movl   $0xf0104cc4,0x8(%esp)
f0100679:	f0 
f010067a:	c7 44 24 04 2c 4c 10 	movl   $0xf0104c2c,0x4(%esp)
f0100681:	f0 
f0100682:	c7 04 24 23 4c 10 f0 	movl   $0xf0104c23,(%esp)
f0100689:	e8 9d 2e 00 00       	call   f010352b <cprintf>
f010068e:	c7 44 24 08 35 4c 10 	movl   $0xf0104c35,0x8(%esp)
f0100695:	f0 
f0100696:	c7 44 24 04 53 4c 10 	movl   $0xf0104c53,0x4(%esp)
f010069d:	f0 
f010069e:	c7 04 24 23 4c 10 f0 	movl   $0xf0104c23,(%esp)
f01006a5:	e8 81 2e 00 00       	call   f010352b <cprintf>
	return 0;
}
f01006aa:	b8 00 00 00 00       	mov    $0x0,%eax
f01006af:	c9                   	leave  
f01006b0:	c3                   	ret    

f01006b1 <mon_kerninfo>:

int
mon_kerninfo(int argc, char **argv, struct Trapframe *tf)
{
f01006b1:	55                   	push   %ebp
f01006b2:	89 e5                	mov    %esp,%ebp
f01006b4:	83 ec 18             	sub    $0x18,%esp
	extern char _start[], entry[], etext[], edata[], end[];

	cprintf("Special kernel symbols:\n");
f01006b7:	c7 04 24 5d 4c 10 f0 	movl   $0xf0104c5d,(%esp)
f01006be:	e8 68 2e 00 00       	call   f010352b <cprintf>
	cprintf("  _start                  %08x (phys)\n", _start);
f01006c3:	c7 44 24 04 0c 00 10 	movl   $0x10000c,0x4(%esp)
f01006ca:	00 
f01006cb:	c7 04 24 ec 4c 10 f0 	movl   $0xf0104cec,(%esp)
f01006d2:	e8 54 2e 00 00       	call   f010352b <cprintf>
	cprintf("  entry  %08x (virt)  %08x (phys)\n", entry, entry - KERNBASE);
f01006d7:	c7 44 24 08 0c 00 10 	movl   $0x10000c,0x8(%esp)
f01006de:	00 
f01006df:	c7 44 24 04 0c 00 10 	movl   $0xf010000c,0x4(%esp)
f01006e6:	f0 
f01006e7:	c7 04 24 14 4d 10 f0 	movl   $0xf0104d14,(%esp)
f01006ee:	e8 38 2e 00 00       	call   f010352b <cprintf>
	cprintf("  etext  %08x (virt)  %08x (phys)\n", etext, etext - KERNBASE);
f01006f3:	c7 44 24 08 47 49 10 	movl   $0x104947,0x8(%esp)
f01006fa:	00 
f01006fb:	c7 44 24 04 47 49 10 	movl   $0xf0104947,0x4(%esp)
f0100702:	f0 
f0100703:	c7 04 24 38 4d 10 f0 	movl   $0xf0104d38,(%esp)
f010070a:	e8 1c 2e 00 00       	call   f010352b <cprintf>
	cprintf("  edata  %08x (virt)  %08x (phys)\n", edata, edata - KERNBASE);
f010070f:	c7 44 24 08 9d bf 17 	movl   $0x17bf9d,0x8(%esp)
f0100716:	00 
f0100717:	c7 44 24 04 9d bf 17 	movl   $0xf017bf9d,0x4(%esp)
f010071e:	f0 
f010071f:	c7 04 24 5c 4d 10 f0 	movl   $0xf0104d5c,(%esp)
f0100726:	e8 00 2e 00 00       	call   f010352b <cprintf>
	cprintf("  end    %08x (virt)  %08x (phys)\n", end, end - KERNBASE);
f010072b:	c7 44 24 08 b0 ce 17 	movl   $0x17ceb0,0x8(%esp)
f0100732:	00 
f0100733:	c7 44 24 04 b0 ce 17 	movl   $0xf017ceb0,0x4(%esp)
f010073a:	f0 
f010073b:	c7 04 24 80 4d 10 f0 	movl   $0xf0104d80,(%esp)
f0100742:	e8 e4 2d 00 00       	call   f010352b <cprintf>
	cprintf("Kernel executable memory footprint: %dKB\n",
		ROUNDUP(end - entry, 1024) / 1024);
f0100747:	b8 af d2 17 f0       	mov    $0xf017d2af,%eax
f010074c:	2d 0c 00 10 f0       	sub    $0xf010000c,%eax
f0100751:	25 00 fc ff ff       	and    $0xfffffc00,%eax
	cprintf("  _start                  %08x (phys)\n", _start);
	cprintf("  entry  %08x (virt)  %08x (phys)\n", entry, entry - KERNBASE);
	cprintf("  etext  %08x (virt)  %08x (phys)\n", etext, etext - KERNBASE);
	cprintf("  edata  %08x (virt)  %08x (phys)\n", edata, edata - KERNBASE);
	cprintf("  end    %08x (virt)  %08x (phys)\n", end, end - KERNBASE);
	cprintf("Kernel executable memory footprint: %dKB\n",
f0100756:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f010075c:	85 c0                	test   %eax,%eax
f010075e:	0f 48 c2             	cmovs  %edx,%eax
f0100761:	c1 f8 0a             	sar    $0xa,%eax
f0100764:	89 44 24 04          	mov    %eax,0x4(%esp)
f0100768:	c7 04 24 a4 4d 10 f0 	movl   $0xf0104da4,(%esp)
f010076f:	e8 b7 2d 00 00       	call   f010352b <cprintf>
		ROUNDUP(end - entry, 1024) / 1024);
	return 0;
}
f0100774:	b8 00 00 00 00       	mov    $0x0,%eax
f0100779:	c9                   	leave  
f010077a:	c3                   	ret    

f010077b <mon_backtrace>:

int
mon_backtrace(int argc, char **argv, struct Trapframe *tf)
{
f010077b:	55                   	push   %ebp
f010077c:	89 e5                	mov    %esp,%ebp
f010077e:	56                   	push   %esi
f010077f:	53                   	push   %ebx
f0100780:	83 ec 40             	sub    $0x40,%esp
      uint32_t  *x;
      x= (uint32_t *) read_ebp();   
f0100783:	89 eb                	mov    %ebp,%ebx
      struct Eipdebuginfo info;
      while(x)
     {

	 cprintf("ebp %08x eip %08x args %08x %08x %08x %08x %08x\n", x, x[1], x[2],x[3],x[4],x[5],x[6]);
         debuginfo_eip(x[1], &info);
f0100785:	8d 75 e0             	lea    -0x20(%ebp),%esi
mon_backtrace(int argc, char **argv, struct Trapframe *tf)
{
      uint32_t  *x;
      x= (uint32_t *) read_ebp();   
      struct Eipdebuginfo info;
      while(x)
f0100788:	eb 7d                	jmp    f0100807 <mon_backtrace+0x8c>
     {

	 cprintf("ebp %08x eip %08x args %08x %08x %08x %08x %08x\n", x, x[1], x[2],x[3],x[4],x[5],x[6]);
f010078a:	8b 43 18             	mov    0x18(%ebx),%eax
f010078d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
f0100791:	8b 43 14             	mov    0x14(%ebx),%eax
f0100794:	89 44 24 18          	mov    %eax,0x18(%esp)
f0100798:	8b 43 10             	mov    0x10(%ebx),%eax
f010079b:	89 44 24 14          	mov    %eax,0x14(%esp)
f010079f:	8b 43 0c             	mov    0xc(%ebx),%eax
f01007a2:	89 44 24 10          	mov    %eax,0x10(%esp)
f01007a6:	8b 43 08             	mov    0x8(%ebx),%eax
f01007a9:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01007ad:	8b 43 04             	mov    0x4(%ebx),%eax
f01007b0:	89 44 24 08          	mov    %eax,0x8(%esp)
f01007b4:	89 5c 24 04          	mov    %ebx,0x4(%esp)
f01007b8:	c7 04 24 d0 4d 10 f0 	movl   $0xf0104dd0,(%esp)
f01007bf:	e8 67 2d 00 00       	call   f010352b <cprintf>
         debuginfo_eip(x[1], &info);
f01007c4:	89 74 24 04          	mov    %esi,0x4(%esp)
f01007c8:	8b 43 04             	mov    0x4(%ebx),%eax
f01007cb:	89 04 24             	mov    %eax,(%esp)
f01007ce:	e8 7d 32 00 00       	call   f0103a50 <debuginfo_eip>
         cprintf("%s:%d:%.*s+%d\n",info.eip_file,info.eip_line,info.eip_fn_namelen,info.eip_fn_name,(x[1]- info.eip_fn_addr));
f01007d3:	8b 43 04             	mov    0x4(%ebx),%eax
f01007d6:	2b 45 f0             	sub    -0x10(%ebp),%eax
f01007d9:	89 44 24 14          	mov    %eax,0x14(%esp)
f01007dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01007e0:	89 44 24 10          	mov    %eax,0x10(%esp)
f01007e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01007e7:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01007eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01007ee:	89 44 24 08          	mov    %eax,0x8(%esp)
f01007f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01007f5:	89 44 24 04          	mov    %eax,0x4(%esp)
f01007f9:	c7 04 24 76 4c 10 f0 	movl   $0xf0104c76,(%esp)
f0100800:	e8 26 2d 00 00       	call   f010352b <cprintf>
         
	 x=(uint32_t *)x[0];
f0100805:	8b 1b                	mov    (%ebx),%ebx
mon_backtrace(int argc, char **argv, struct Trapframe *tf)
{
      uint32_t  *x;
      x= (uint32_t *) read_ebp();   
      struct Eipdebuginfo info;
      while(x)
f0100807:	85 db                	test   %ebx,%ebx
f0100809:	0f 85 7b ff ff ff    	jne    f010078a <mon_backtrace+0xf>
	 x=(uint32_t *)x[0];

	}	      
     // Your code here.
	return 0;
}
f010080f:	b8 00 00 00 00       	mov    $0x0,%eax
f0100814:	83 c4 40             	add    $0x40,%esp
f0100817:	5b                   	pop    %ebx
f0100818:	5e                   	pop    %esi
f0100819:	5d                   	pop    %ebp
f010081a:	c3                   	ret    

f010081b <monitor>:
	return 0;
}

void
monitor(struct Trapframe *tf)
{
f010081b:	55                   	push   %ebp
f010081c:	89 e5                	mov    %esp,%ebp
f010081e:	57                   	push   %edi
f010081f:	56                   	push   %esi
f0100820:	53                   	push   %ebx
f0100821:	83 ec 5c             	sub    $0x5c,%esp
	char *buf;

	cprintf("Welcome to the JOS kernel monitor!\n");
f0100824:	c7 04 24 04 4e 10 f0 	movl   $0xf0104e04,(%esp)
f010082b:	e8 fb 2c 00 00       	call   f010352b <cprintf>
	cprintf("Type 'help' for a list of commands.\n");
f0100830:	c7 04 24 28 4e 10 f0 	movl   $0xf0104e28,(%esp)
f0100837:	e8 ef 2c 00 00       	call   f010352b <cprintf>

	if (tf != NULL)
f010083c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0100840:	74 0b                	je     f010084d <monitor+0x32>
		print_trapframe(tf);
f0100842:	8b 45 08             	mov    0x8(%ebp),%eax
f0100845:	89 04 24             	mov    %eax,(%esp)
f0100848:	e8 06 2e 00 00       	call   f0103653 <print_trapframe>

	while (1) {
		buf = readline("K> ");
f010084d:	c7 04 24 85 4c 10 f0 	movl   $0xf0104c85,(%esp)
f0100854:	e8 07 3a 00 00       	call   f0104260 <readline>
f0100859:	89 c3                	mov    %eax,%ebx
		if (buf != NULL)
f010085b:	85 c0                	test   %eax,%eax
f010085d:	74 ee                	je     f010084d <monitor+0x32>
	char *argv[MAXARGS];
	int i;

	// Parse the command buffer into whitespace-separated arguments
	argc = 0;
	argv[argc] = 0;
f010085f:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	int argc;
	char *argv[MAXARGS];
	int i;

	// Parse the command buffer into whitespace-separated arguments
	argc = 0;
f0100866:	be 00 00 00 00       	mov    $0x0,%esi
f010086b:	eb 0a                	jmp    f0100877 <monitor+0x5c>
	argv[argc] = 0;
	while (1) {
		// gobble whitespace
		while (*buf && strchr(WHITESPACE, *buf))
			*buf++ = 0;
f010086d:	c6 03 00             	movb   $0x0,(%ebx)
f0100870:	89 f7                	mov    %esi,%edi
f0100872:	8d 5b 01             	lea    0x1(%ebx),%ebx
f0100875:	89 fe                	mov    %edi,%esi
	// Parse the command buffer into whitespace-separated arguments
	argc = 0;
	argv[argc] = 0;
	while (1) {
		// gobble whitespace
		while (*buf && strchr(WHITESPACE, *buf))
f0100877:	0f b6 03             	movzbl (%ebx),%eax
f010087a:	84 c0                	test   %al,%al
f010087c:	74 66                	je     f01008e4 <monitor+0xc9>
f010087e:	0f be c0             	movsbl %al,%eax
f0100881:	89 44 24 04          	mov    %eax,0x4(%esp)
f0100885:	c7 04 24 89 4c 10 f0 	movl   $0xf0104c89,(%esp)
f010088c:	e8 e9 3b 00 00       	call   f010447a <strchr>
f0100891:	85 c0                	test   %eax,%eax
f0100893:	75 d8                	jne    f010086d <monitor+0x52>
			*buf++ = 0;
		if (*buf == 0)
f0100895:	80 3b 00             	cmpb   $0x0,(%ebx)
f0100898:	74 4a                	je     f01008e4 <monitor+0xc9>
			break;

		// save and scan past next arg
		if (argc == MAXARGS-1) {
f010089a:	83 fe 0f             	cmp    $0xf,%esi
f010089d:	8d 76 00             	lea    0x0(%esi),%esi
f01008a0:	75 16                	jne    f01008b8 <monitor+0x9d>
			cprintf("Too many arguments (max %d)\n", MAXARGS);
f01008a2:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
f01008a9:	00 
f01008aa:	c7 04 24 8e 4c 10 f0 	movl   $0xf0104c8e,(%esp)
f01008b1:	e8 75 2c 00 00       	call   f010352b <cprintf>
f01008b6:	eb 95                	jmp    f010084d <monitor+0x32>
			return 0;
		}
		argv[argc++] = buf;
f01008b8:	8d 7e 01             	lea    0x1(%esi),%edi
f01008bb:	89 5c b5 a8          	mov    %ebx,-0x58(%ebp,%esi,4)
f01008bf:	eb 03                	jmp    f01008c4 <monitor+0xa9>
		while (*buf && !strchr(WHITESPACE, *buf))
			buf++;
f01008c1:	83 c3 01             	add    $0x1,%ebx
		if (argc == MAXARGS-1) {
			cprintf("Too many arguments (max %d)\n", MAXARGS);
			return 0;
		}
		argv[argc++] = buf;
		while (*buf && !strchr(WHITESPACE, *buf))
f01008c4:	0f b6 03             	movzbl (%ebx),%eax
f01008c7:	84 c0                	test   %al,%al
f01008c9:	74 aa                	je     f0100875 <monitor+0x5a>
f01008cb:	0f be c0             	movsbl %al,%eax
f01008ce:	89 44 24 04          	mov    %eax,0x4(%esp)
f01008d2:	c7 04 24 89 4c 10 f0 	movl   $0xf0104c89,(%esp)
f01008d9:	e8 9c 3b 00 00       	call   f010447a <strchr>
f01008de:	85 c0                	test   %eax,%eax
f01008e0:	74 df                	je     f01008c1 <monitor+0xa6>
f01008e2:	eb 91                	jmp    f0100875 <monitor+0x5a>
			buf++;
	}
	argv[argc] = 0;
f01008e4:	c7 44 b5 a8 00 00 00 	movl   $0x0,-0x58(%ebp,%esi,4)
f01008eb:	00 

	// Lookup and invoke the command
	if (argc == 0)
f01008ec:	85 f6                	test   %esi,%esi
f01008ee:	0f 84 59 ff ff ff    	je     f010084d <monitor+0x32>
f01008f4:	bb 00 00 00 00       	mov    $0x0,%ebx
f01008f9:	8d 04 5b             	lea    (%ebx,%ebx,2),%eax
		return 0;
	for (i = 0; i < ARRAY_SIZE(commands); i++) {
		if (strcmp(argv[0], commands[i].name) == 0)
f01008fc:	8b 04 85 60 4e 10 f0 	mov    -0xfefb1a0(,%eax,4),%eax
f0100903:	89 44 24 04          	mov    %eax,0x4(%esp)
f0100907:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010090a:	89 04 24             	mov    %eax,(%esp)
f010090d:	e8 0a 3b 00 00       	call   f010441c <strcmp>
f0100912:	85 c0                	test   %eax,%eax
f0100914:	75 24                	jne    f010093a <monitor+0x11f>
			return commands[i].func(argc, argv, tf);
f0100916:	8d 04 5b             	lea    (%ebx,%ebx,2),%eax
f0100919:	8b 55 08             	mov    0x8(%ebp),%edx
f010091c:	89 54 24 08          	mov    %edx,0x8(%esp)
f0100920:	8d 4d a8             	lea    -0x58(%ebp),%ecx
f0100923:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0100927:	89 34 24             	mov    %esi,(%esp)
f010092a:	ff 14 85 68 4e 10 f0 	call   *-0xfefb198(,%eax,4)
		print_trapframe(tf);

	while (1) {
		buf = readline("K> ");
		if (buf != NULL)
			if (runcmd(buf, tf) < 0)
f0100931:	85 c0                	test   %eax,%eax
f0100933:	78 25                	js     f010095a <monitor+0x13f>
f0100935:	e9 13 ff ff ff       	jmp    f010084d <monitor+0x32>
	argv[argc] = 0;

	// Lookup and invoke the command
	if (argc == 0)
		return 0;
	for (i = 0; i < ARRAY_SIZE(commands); i++) {
f010093a:	83 c3 01             	add    $0x1,%ebx
f010093d:	83 fb 03             	cmp    $0x3,%ebx
f0100940:	75 b7                	jne    f01008f9 <monitor+0xde>
		if (strcmp(argv[0], commands[i].name) == 0)
			return commands[i].func(argc, argv, tf);
	}
	cprintf("Unknown command '%s'\n", argv[0]);
f0100942:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0100945:	89 44 24 04          	mov    %eax,0x4(%esp)
f0100949:	c7 04 24 ab 4c 10 f0 	movl   $0xf0104cab,(%esp)
f0100950:	e8 d6 2b 00 00       	call   f010352b <cprintf>
f0100955:	e9 f3 fe ff ff       	jmp    f010084d <monitor+0x32>
		buf = readline("K> ");
		if (buf != NULL)
			if (runcmd(buf, tf) < 0)
				break;
	}
}
f010095a:	83 c4 5c             	add    $0x5c,%esp
f010095d:	5b                   	pop    %ebx
f010095e:	5e                   	pop    %esi
f010095f:	5f                   	pop    %edi
f0100960:	5d                   	pop    %ebp
f0100961:	c3                   	ret    
f0100962:	66 90                	xchg   %ax,%ax
f0100964:	66 90                	xchg   %ax,%ax
f0100966:	66 90                	xchg   %ax,%ax
f0100968:	66 90                	xchg   %ax,%ax
f010096a:	66 90                	xchg   %ax,%ax
f010096c:	66 90                	xchg   %ax,%ax
f010096e:	66 90                	xchg   %ax,%ax

f0100970 <nvram_read>:
// Detect machine's physical memory setup.
// --------------------------------------------------------------

static int
nvram_read(int r)
{
f0100970:	55                   	push   %ebp
f0100971:	89 e5                	mov    %esp,%ebp
f0100973:	56                   	push   %esi
f0100974:	53                   	push   %ebx
f0100975:	83 ec 10             	sub    $0x10,%esp
f0100978:	89 c3                	mov    %eax,%ebx
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f010097a:	89 04 24             	mov    %eax,(%esp)
f010097d:	e8 39 2b 00 00       	call   f01034bb <mc146818_read>
f0100982:	89 c6                	mov    %eax,%esi
f0100984:	83 c3 01             	add    $0x1,%ebx
f0100987:	89 1c 24             	mov    %ebx,(%esp)
f010098a:	e8 2c 2b 00 00       	call   f01034bb <mc146818_read>
f010098f:	c1 e0 08             	shl    $0x8,%eax
f0100992:	09 f0                	or     %esi,%eax
}
f0100994:	83 c4 10             	add    $0x10,%esp
f0100997:	5b                   	pop    %ebx
f0100998:	5e                   	pop    %esi
f0100999:	5d                   	pop    %ebp
f010099a:	c3                   	ret    

f010099b <boot_alloc>:
	// Initialize nextfree if this is the first time.
	// 'end' is a magic symbol automatically generated by the linker,
	// which points to the end of the kernel's bss segment:
	// the first virtual address that the linker did *not* assign
	// to any kernel code or global variables.
	if (!nextfree) {
f010099b:	83 3d d8 c1 17 f0 00 	cmpl   $0x0,0xf017c1d8
f01009a2:	75 11                	jne    f01009b5 <boot_alloc+0x1a>
		extern char end[];
		nextfree = ROUNDUP((char *) end, PGSIZE);
f01009a4:	ba af de 17 f0       	mov    $0xf017deaf,%edx
f01009a9:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
f01009af:	89 15 d8 c1 17 f0    	mov    %edx,0xf017c1d8
	//
	// LAB 2: Your code here.
	
	
	
	if(n>0)
f01009b5:	85 c0                	test   %eax,%eax
f01009b7:	74 2e                	je     f01009e7 <boot_alloc+0x4c>
	{
	result=nextfree;
f01009b9:	8b 0d d8 c1 17 f0    	mov    0xf017c1d8,%ecx
	nextfree +=ROUNDUP(n, PGSIZE);
f01009bf:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
f01009c5:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
f01009cb:	01 ca                	add    %ecx,%edx
f01009cd:	89 15 d8 c1 17 f0    	mov    %edx,0xf017c1d8
	else
	{
	return nextfree;	
    }
    
    if ((uint32_t) nextfree> ((npages * PGSIZE)+KERNBASE))
f01009d3:	a1 a4 ce 17 f0       	mov    0xf017cea4,%eax
f01009d8:	05 00 00 0f 00       	add    $0xf0000,%eax
f01009dd:	c1 e0 0c             	shl    $0xc,%eax
f01009e0:	39 c2                	cmp    %eax,%edx
f01009e2:	77 09                	ja     f01009ed <boot_alloc+0x52>
    {
    panic("Out of memory \n");
    }

	return result;
f01009e4:	89 c8                	mov    %ecx,%eax
f01009e6:	c3                   	ret    
	nextfree +=ROUNDUP(n, PGSIZE);
	
	}
	else
	{
	return nextfree;	
f01009e7:	a1 d8 c1 17 f0       	mov    0xf017c1d8,%eax
f01009ec:	c3                   	ret    
// This function may ONLY be used during initialization,
// before the page_free_list list has been set up.
static void *
boot_alloc(uint32_t n)

{
f01009ed:	55                   	push   %ebp
f01009ee:	89 e5                	mov    %esp,%ebp
f01009f0:	83 ec 18             	sub    $0x18,%esp
	return nextfree;	
    }
    
    if ((uint32_t) nextfree> ((npages * PGSIZE)+KERNBASE))
    {
    panic("Out of memory \n");
f01009f3:	c7 44 24 08 84 4e 10 	movl   $0xf0104e84,0x8(%esp)
f01009fa:	f0 
f01009fb:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
f0100a02:	00 
f0100a03:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100a0a:	e8 a7 f6 ff ff       	call   f01000b6 <_panic>

f0100a0f <page2kva>:
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
	return (pp - pages) << PGSHIFT;
f0100a0f:	2b 05 ac ce 17 f0    	sub    0xf017ceac,%eax
f0100a15:	c1 f8 03             	sar    $0x3,%eax
f0100a18:	c1 e0 0c             	shl    $0xc,%eax
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f0100a1b:	89 c2                	mov    %eax,%edx
f0100a1d:	c1 ea 0c             	shr    $0xc,%edx
f0100a20:	3b 15 a4 ce 17 f0    	cmp    0xf017cea4,%edx
f0100a26:	72 26                	jb     f0100a4e <page2kva+0x3f>
	return &pages[PGNUM(pa)];
}

static inline void*
page2kva(struct PageInfo *pp)
{
f0100a28:	55                   	push   %ebp
f0100a29:	89 e5                	mov    %esp,%ebp
f0100a2b:	83 ec 18             	sub    $0x18,%esp

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f0100a2e:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0100a32:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f0100a39:	f0 
f0100a3a:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
f0100a41:	00 
f0100a42:	c7 04 24 a0 4e 10 f0 	movl   $0xf0104ea0,(%esp)
f0100a49:	e8 68 f6 ff ff       	call   f01000b6 <_panic>
	return (void *)(pa + KERNBASE);
f0100a4e:	2d 00 00 00 10       	sub    $0x10000000,%eax

static inline void*
page2kva(struct PageInfo *pp)
{
	return KADDR(page2pa(pp));
}
f0100a53:	c3                   	ret    

f0100a54 <check_va2pa>:
static physaddr_t
check_va2pa(pde_t *pgdir, uintptr_t va)
{
	pte_t *p;

	pgdir = &pgdir[PDX(va)];
f0100a54:	89 d1                	mov    %edx,%ecx
f0100a56:	c1 e9 16             	shr    $0x16,%ecx
	if (!(*pgdir & PTE_P))
f0100a59:	8b 04 88             	mov    (%eax,%ecx,4),%eax
f0100a5c:	a8 01                	test   $0x1,%al
f0100a5e:	74 5d                	je     f0100abd <check_va2pa+0x69>
		return ~0;
	p = (pte_t*) KADDR(PTE_ADDR(*pgdir));
f0100a60:	25 00 f0 ff ff       	and    $0xfffff000,%eax
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f0100a65:	89 c1                	mov    %eax,%ecx
f0100a67:	c1 e9 0c             	shr    $0xc,%ecx
f0100a6a:	3b 0d a4 ce 17 f0    	cmp    0xf017cea4,%ecx
f0100a70:	72 26                	jb     f0100a98 <check_va2pa+0x44>
// this functionality for us!  We define our own version to help check
// the check_kern_pgdir() function; it shouldn't be used elsewhere.

static physaddr_t
check_va2pa(pde_t *pgdir, uintptr_t va)
{
f0100a72:	55                   	push   %ebp
f0100a73:	89 e5                	mov    %esp,%ebp
f0100a75:	83 ec 18             	sub    $0x18,%esp
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f0100a78:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0100a7c:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f0100a83:	f0 
f0100a84:	c7 44 24 04 3a 03 00 	movl   $0x33a,0x4(%esp)
f0100a8b:	00 
f0100a8c:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100a93:	e8 1e f6 ff ff       	call   f01000b6 <_panic>

	pgdir = &pgdir[PDX(va)];
	if (!(*pgdir & PTE_P))
		return ~0;
	p = (pte_t*) KADDR(PTE_ADDR(*pgdir));
	if (!(p[PTX(va)] & PTE_P))
f0100a98:	c1 ea 0c             	shr    $0xc,%edx
f0100a9b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0100aa1:	8b 84 90 00 00 00 f0 	mov    -0x10000000(%eax,%edx,4),%eax
f0100aa8:	89 c2                	mov    %eax,%edx
f0100aaa:	83 e2 01             	and    $0x1,%edx
		return ~0;
	return PTE_ADDR(p[PTX(va)]);
f0100aad:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0100ab2:	85 d2                	test   %edx,%edx
f0100ab4:	ba ff ff ff ff       	mov    $0xffffffff,%edx
f0100ab9:	0f 44 c2             	cmove  %edx,%eax
f0100abc:	c3                   	ret    
{
	pte_t *p;

	pgdir = &pgdir[PDX(va)];
	if (!(*pgdir & PTE_P))
		return ~0;
f0100abd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	p = (pte_t*) KADDR(PTE_ADDR(*pgdir));
	if (!(p[PTX(va)] & PTE_P))
		return ~0;
	return PTE_ADDR(p[PTX(va)]);
}
f0100ac2:	c3                   	ret    

f0100ac3 <check_page_free_list>:
//
// Check that the pages on the page_free_list are reasonable.
//
static void
check_page_free_list(bool only_low_memory)
{
f0100ac3:	55                   	push   %ebp
f0100ac4:	89 e5                	mov    %esp,%ebp
f0100ac6:	57                   	push   %edi
f0100ac7:	56                   	push   %esi
f0100ac8:	53                   	push   %ebx
f0100ac9:	83 ec 4c             	sub    $0x4c,%esp
	struct PageInfo *pp;
	unsigned pdx_limit = only_low_memory ? 1 : NPDENTRIES;
f0100acc:	84 c0                	test   %al,%al
f0100ace:	0f 85 07 03 00 00    	jne    f0100ddb <check_page_free_list+0x318>
f0100ad4:	e9 14 03 00 00       	jmp    f0100ded <check_page_free_list+0x32a>
	int nfree_basemem = 0, nfree_extmem = 0;
	char *first_free_page;

	if (!page_free_list)
		panic("'page_free_list' is a null pointer!");
f0100ad9:	c7 44 24 08 b0 51 10 	movl   $0xf01051b0,0x8(%esp)
f0100ae0:	f0 
f0100ae1:	c7 44 24 04 78 02 00 	movl   $0x278,0x4(%esp)
f0100ae8:	00 
f0100ae9:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100af0:	e8 c1 f5 ff ff       	call   f01000b6 <_panic>

	if (only_low_memory) {
		// Move pages with lower addresses first in the free
		// list, since entry_pgdir does not map all pages.
		struct PageInfo *pp1, *pp2;
		struct PageInfo **tp[2] = { &pp1, &pp2 };
f0100af5:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0100af8:	89 55 e0             	mov    %edx,-0x20(%ebp)
f0100afb:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0100afe:	89 55 e4             	mov    %edx,-0x1c(%ebp)
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
	return (pp - pages) << PGSHIFT;
f0100b01:	89 c2                	mov    %eax,%edx
f0100b03:	2b 15 ac ce 17 f0    	sub    0xf017ceac,%edx
		for (pp = page_free_list; pp; pp = pp->pp_link) {
			int pagetype = PDX(page2pa(pp)) >= pdx_limit;
f0100b09:	f7 c2 00 e0 7f 00    	test   $0x7fe000,%edx
f0100b0f:	0f 95 c2             	setne  %dl
f0100b12:	0f b6 d2             	movzbl %dl,%edx
			*tp[pagetype] = pp;
f0100b15:	8b 4c 95 e0          	mov    -0x20(%ebp,%edx,4),%ecx
f0100b19:	89 01                	mov    %eax,(%ecx)
			tp[pagetype] = &pp->pp_link;
f0100b1b:	89 44 95 e0          	mov    %eax,-0x20(%ebp,%edx,4)
	if (only_low_memory) {
		// Move pages with lower addresses first in the free
		// list, since entry_pgdir does not map all pages.
		struct PageInfo *pp1, *pp2;
		struct PageInfo **tp[2] = { &pp1, &pp2 };
		for (pp = page_free_list; pp; pp = pp->pp_link) {
f0100b1f:	8b 00                	mov    (%eax),%eax
f0100b21:	85 c0                	test   %eax,%eax
f0100b23:	75 dc                	jne    f0100b01 <check_page_free_list+0x3e>
			int pagetype = PDX(page2pa(pp)) >= pdx_limit;
			*tp[pagetype] = pp;
			tp[pagetype] = &pp->pp_link;
		}
		*tp[1] = 0;
f0100b25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100b28:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		*tp[0] = pp2;
f0100b2e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100b31:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0100b34:	89 10                	mov    %edx,(%eax)
		page_free_list = pp1;
f0100b36:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0100b39:	a3 dc c1 17 f0       	mov    %eax,0xf017c1dc
//
static void
check_page_free_list(bool only_low_memory)
{
	struct PageInfo *pp;
	unsigned pdx_limit = only_low_memory ? 1 : NPDENTRIES;
f0100b3e:	be 01 00 00 00       	mov    $0x1,%esi
		page_free_list = pp1;
	}

	// if there's a page that shouldn't be on the free list,
	// try to make sure it eventually causes trouble.
	for (pp = page_free_list; pp; pp = pp->pp_link)
f0100b43:	8b 1d dc c1 17 f0    	mov    0xf017c1dc,%ebx
f0100b49:	eb 63                	jmp    f0100bae <check_page_free_list+0xeb>
f0100b4b:	89 d8                	mov    %ebx,%eax
f0100b4d:	2b 05 ac ce 17 f0    	sub    0xf017ceac,%eax
f0100b53:	c1 f8 03             	sar    $0x3,%eax
f0100b56:	c1 e0 0c             	shl    $0xc,%eax
		if (PDX(page2pa(pp)) < pdx_limit)
f0100b59:	89 c2                	mov    %eax,%edx
f0100b5b:	c1 ea 16             	shr    $0x16,%edx
f0100b5e:	39 f2                	cmp    %esi,%edx
f0100b60:	73 4a                	jae    f0100bac <check_page_free_list+0xe9>
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f0100b62:	89 c2                	mov    %eax,%edx
f0100b64:	c1 ea 0c             	shr    $0xc,%edx
f0100b67:	3b 15 a4 ce 17 f0    	cmp    0xf017cea4,%edx
f0100b6d:	72 20                	jb     f0100b8f <check_page_free_list+0xcc>
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f0100b6f:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0100b73:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f0100b7a:	f0 
f0100b7b:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
f0100b82:	00 
f0100b83:	c7 04 24 a0 4e 10 f0 	movl   $0xf0104ea0,(%esp)
f0100b8a:	e8 27 f5 ff ff       	call   f01000b6 <_panic>
			memset(page2kva(pp), 0x97, 128);
f0100b8f:	c7 44 24 08 80 00 00 	movl   $0x80,0x8(%esp)
f0100b96:	00 
f0100b97:	c7 44 24 04 97 00 00 	movl   $0x97,0x4(%esp)
f0100b9e:	00 
	return (void *)(pa + KERNBASE);
f0100b9f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0100ba4:	89 04 24             	mov    %eax,(%esp)
f0100ba7:	e8 0b 39 00 00       	call   f01044b7 <memset>
		page_free_list = pp1;
	}

	// if there's a page that shouldn't be on the free list,
	// try to make sure it eventually causes trouble.
	for (pp = page_free_list; pp; pp = pp->pp_link)
f0100bac:	8b 1b                	mov    (%ebx),%ebx
f0100bae:	85 db                	test   %ebx,%ebx
f0100bb0:	75 99                	jne    f0100b4b <check_page_free_list+0x88>
		if (PDX(page2pa(pp)) < pdx_limit)
			memset(page2kva(pp), 0x97, 128);

	first_free_page = (char *) boot_alloc(0);
f0100bb2:	b8 00 00 00 00       	mov    $0x0,%eax
f0100bb7:	e8 df fd ff ff       	call   f010099b <boot_alloc>
f0100bbc:	89 45 c8             	mov    %eax,-0x38(%ebp)
	for (pp = page_free_list; pp; pp = pp->pp_link) {
f0100bbf:	8b 15 dc c1 17 f0    	mov    0xf017c1dc,%edx
		// check that we didn't corrupt the free list itself
		assert(pp >= pages);
f0100bc5:	8b 0d ac ce 17 f0    	mov    0xf017ceac,%ecx
		assert(pp < pages + npages);
f0100bcb:	a1 a4 ce 17 f0       	mov    0xf017cea4,%eax
f0100bd0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0100bd3:	8d 04 c1             	lea    (%ecx,%eax,8),%eax
f0100bd6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		assert(((char *) pp - (char *) pages) % sizeof(*pp) == 0);
f0100bd9:	89 4d d0             	mov    %ecx,-0x30(%ebp)
static void
check_page_free_list(bool only_low_memory)
{
	struct PageInfo *pp;
	unsigned pdx_limit = only_low_memory ? 1 : NPDENTRIES;
	int nfree_basemem = 0, nfree_extmem = 0;
f0100bdc:	bf 00 00 00 00       	mov    $0x0,%edi
f0100be1:	89 5d cc             	mov    %ebx,-0x34(%ebp)
	for (pp = page_free_list; pp; pp = pp->pp_link)
		if (PDX(page2pa(pp)) < pdx_limit)
			memset(page2kva(pp), 0x97, 128);

	first_free_page = (char *) boot_alloc(0);
	for (pp = page_free_list; pp; pp = pp->pp_link) {
f0100be4:	e9 97 01 00 00       	jmp    f0100d80 <check_page_free_list+0x2bd>
		// check that we didn't corrupt the free list itself
		assert(pp >= pages);
f0100be9:	39 ca                	cmp    %ecx,%edx
f0100beb:	73 24                	jae    f0100c11 <check_page_free_list+0x14e>
f0100bed:	c7 44 24 0c ae 4e 10 	movl   $0xf0104eae,0xc(%esp)
f0100bf4:	f0 
f0100bf5:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0100bfc:	f0 
f0100bfd:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
f0100c04:	00 
f0100c05:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100c0c:	e8 a5 f4 ff ff       	call   f01000b6 <_panic>
		assert(pp < pages + npages);
f0100c11:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
f0100c14:	72 24                	jb     f0100c3a <check_page_free_list+0x177>
f0100c16:	c7 44 24 0c cf 4e 10 	movl   $0xf0104ecf,0xc(%esp)
f0100c1d:	f0 
f0100c1e:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0100c25:	f0 
f0100c26:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
f0100c2d:	00 
f0100c2e:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100c35:	e8 7c f4 ff ff       	call   f01000b6 <_panic>
		assert(((char *) pp - (char *) pages) % sizeof(*pp) == 0);
f0100c3a:	89 d0                	mov    %edx,%eax
f0100c3c:	2b 45 d0             	sub    -0x30(%ebp),%eax
f0100c3f:	a8 07                	test   $0x7,%al
f0100c41:	74 24                	je     f0100c67 <check_page_free_list+0x1a4>
f0100c43:	c7 44 24 0c d4 51 10 	movl   $0xf01051d4,0xc(%esp)
f0100c4a:	f0 
f0100c4b:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0100c52:	f0 
f0100c53:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
f0100c5a:	00 
f0100c5b:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100c62:	e8 4f f4 ff ff       	call   f01000b6 <_panic>
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
	return (pp - pages) << PGSHIFT;
f0100c67:	c1 f8 03             	sar    $0x3,%eax
f0100c6a:	c1 e0 0c             	shl    $0xc,%eax

		// check a few pages that shouldn't be on the free list
		assert(page2pa(pp) != 0);
f0100c6d:	85 c0                	test   %eax,%eax
f0100c6f:	75 24                	jne    f0100c95 <check_page_free_list+0x1d2>
f0100c71:	c7 44 24 0c e3 4e 10 	movl   $0xf0104ee3,0xc(%esp)
f0100c78:	f0 
f0100c79:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0100c80:	f0 
f0100c81:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
f0100c88:	00 
f0100c89:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100c90:	e8 21 f4 ff ff       	call   f01000b6 <_panic>
		assert(page2pa(pp) != IOPHYSMEM);
f0100c95:	3d 00 00 0a 00       	cmp    $0xa0000,%eax
f0100c9a:	75 24                	jne    f0100cc0 <check_page_free_list+0x1fd>
f0100c9c:	c7 44 24 0c f4 4e 10 	movl   $0xf0104ef4,0xc(%esp)
f0100ca3:	f0 
f0100ca4:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0100cab:	f0 
f0100cac:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
f0100cb3:	00 
f0100cb4:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100cbb:	e8 f6 f3 ff ff       	call   f01000b6 <_panic>
		assert(page2pa(pp) != EXTPHYSMEM - PGSIZE);
f0100cc0:	3d 00 f0 0f 00       	cmp    $0xff000,%eax
f0100cc5:	75 24                	jne    f0100ceb <check_page_free_list+0x228>
f0100cc7:	c7 44 24 0c 08 52 10 	movl   $0xf0105208,0xc(%esp)
f0100cce:	f0 
f0100ccf:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0100cd6:	f0 
f0100cd7:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
f0100cde:	00 
f0100cdf:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100ce6:	e8 cb f3 ff ff       	call   f01000b6 <_panic>
		assert(page2pa(pp) != EXTPHYSMEM);
f0100ceb:	3d 00 00 10 00       	cmp    $0x100000,%eax
f0100cf0:	75 24                	jne    f0100d16 <check_page_free_list+0x253>
f0100cf2:	c7 44 24 0c 0d 4f 10 	movl   $0xf0104f0d,0xc(%esp)
f0100cf9:	f0 
f0100cfa:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0100d01:	f0 
f0100d02:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
f0100d09:	00 
f0100d0a:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100d11:	e8 a0 f3 ff ff       	call   f01000b6 <_panic>
		assert(page2pa(pp) < EXTPHYSMEM || (char *) page2kva(pp) >= first_free_page);
f0100d16:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
f0100d1b:	76 58                	jbe    f0100d75 <check_page_free_list+0x2b2>
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f0100d1d:	89 c3                	mov    %eax,%ebx
f0100d1f:	c1 eb 0c             	shr    $0xc,%ebx
f0100d22:	39 5d c4             	cmp    %ebx,-0x3c(%ebp)
f0100d25:	77 20                	ja     f0100d47 <check_page_free_list+0x284>
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f0100d27:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0100d2b:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f0100d32:	f0 
f0100d33:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
f0100d3a:	00 
f0100d3b:	c7 04 24 a0 4e 10 f0 	movl   $0xf0104ea0,(%esp)
f0100d42:	e8 6f f3 ff ff       	call   f01000b6 <_panic>
	return (void *)(pa + KERNBASE);
f0100d47:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0100d4c:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f0100d4f:	76 2a                	jbe    f0100d7b <check_page_free_list+0x2b8>
f0100d51:	c7 44 24 0c 2c 52 10 	movl   $0xf010522c,0xc(%esp)
f0100d58:	f0 
f0100d59:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0100d60:	f0 
f0100d61:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
f0100d68:	00 
f0100d69:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100d70:	e8 41 f3 ff ff       	call   f01000b6 <_panic>

		if (page2pa(pp) < EXTPHYSMEM)
			++nfree_basemem;
f0100d75:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
f0100d79:	eb 03                	jmp    f0100d7e <check_page_free_list+0x2bb>
		else
			++nfree_extmem;
f0100d7b:	83 c7 01             	add    $0x1,%edi
	for (pp = page_free_list; pp; pp = pp->pp_link)
		if (PDX(page2pa(pp)) < pdx_limit)
			memset(page2kva(pp), 0x97, 128);

	first_free_page = (char *) boot_alloc(0);
	for (pp = page_free_list; pp; pp = pp->pp_link) {
f0100d7e:	8b 12                	mov    (%edx),%edx
f0100d80:	85 d2                	test   %edx,%edx
f0100d82:	0f 85 61 fe ff ff    	jne    f0100be9 <check_page_free_list+0x126>
f0100d88:	8b 5d cc             	mov    -0x34(%ebp),%ebx
			++nfree_basemem;
		else
			++nfree_extmem;
	}

	assert(nfree_basemem > 0);
f0100d8b:	85 db                	test   %ebx,%ebx
f0100d8d:	7f 24                	jg     f0100db3 <check_page_free_list+0x2f0>
f0100d8f:	c7 44 24 0c 27 4f 10 	movl   $0xf0104f27,0xc(%esp)
f0100d96:	f0 
f0100d97:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0100d9e:	f0 
f0100d9f:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
f0100da6:	00 
f0100da7:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100dae:	e8 03 f3 ff ff       	call   f01000b6 <_panic>
	assert(nfree_extmem > 0);
f0100db3:	85 ff                	test   %edi,%edi
f0100db5:	7f 4d                	jg     f0100e04 <check_page_free_list+0x341>
f0100db7:	c7 44 24 0c 39 4f 10 	movl   $0xf0104f39,0xc(%esp)
f0100dbe:	f0 
f0100dbf:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0100dc6:	f0 
f0100dc7:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
f0100dce:	00 
f0100dcf:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100dd6:	e8 db f2 ff ff       	call   f01000b6 <_panic>
	struct PageInfo *pp;
	unsigned pdx_limit = only_low_memory ? 1 : NPDENTRIES;
	int nfree_basemem = 0, nfree_extmem = 0;
	char *first_free_page;

	if (!page_free_list)
f0100ddb:	a1 dc c1 17 f0       	mov    0xf017c1dc,%eax
f0100de0:	85 c0                	test   %eax,%eax
f0100de2:	0f 85 0d fd ff ff    	jne    f0100af5 <check_page_free_list+0x32>
f0100de8:	e9 ec fc ff ff       	jmp    f0100ad9 <check_page_free_list+0x16>
f0100ded:	83 3d dc c1 17 f0 00 	cmpl   $0x0,0xf017c1dc
f0100df4:	0f 84 df fc ff ff    	je     f0100ad9 <check_page_free_list+0x16>
//
static void
check_page_free_list(bool only_low_memory)
{
	struct PageInfo *pp;
	unsigned pdx_limit = only_low_memory ? 1 : NPDENTRIES;
f0100dfa:	be 00 04 00 00       	mov    $0x400,%esi
f0100dff:	e9 3f fd ff ff       	jmp    f0100b43 <check_page_free_list+0x80>
			++nfree_extmem;
	}

	assert(nfree_basemem > 0);
	assert(nfree_extmem > 0);
}
f0100e04:	83 c4 4c             	add    $0x4c,%esp
f0100e07:	5b                   	pop    %ebx
f0100e08:	5e                   	pop    %esi
f0100e09:	5f                   	pop    %edi
f0100e0a:	5d                   	pop    %ebp
f0100e0b:	c3                   	ret    

f0100e0c <page_init>:
// allocator functions below to allocate and deallocate physical
// memory via the page_free_list.
//
void
page_init(void)
{
f0100e0c:	55                   	push   %ebp
f0100e0d:	89 e5                	mov    %esp,%ebp
f0100e0f:	53                   	push   %ebx
f0100e10:	83 ec 04             	sub    $0x4,%esp
	//
	// Change the code to reflect this.
	// NB: DO NOT actually touch the physical memory corresponding to
	// free pages!
	size_t i;
	for (i = 0; i < npages; i++) {
f0100e13:	bb 00 00 00 00       	mov    $0x0,%ebx
f0100e18:	eb 4d                	jmp    f0100e67 <page_init+0x5b>
	if(i==0 ||(i>=(IOPHYSMEM/PGSIZE)&&i<=(((uint32_t)boot_alloc(0)-KERNBASE)/PGSIZE)))
f0100e1a:	85 db                	test   %ebx,%ebx
f0100e1c:	74 46                	je     f0100e64 <page_init+0x58>
f0100e1e:	81 fb 9f 00 00 00    	cmp    $0x9f,%ebx
f0100e24:	76 16                	jbe    f0100e3c <page_init+0x30>
f0100e26:	b8 00 00 00 00       	mov    $0x0,%eax
f0100e2b:	e8 6b fb ff ff       	call   f010099b <boot_alloc>
f0100e30:	05 00 00 00 10       	add    $0x10000000,%eax
f0100e35:	c1 e8 0c             	shr    $0xc,%eax
f0100e38:	39 c3                	cmp    %eax,%ebx
f0100e3a:	76 28                	jbe    f0100e64 <page_init+0x58>
f0100e3c:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
	continue;

		pages[i].pp_ref = 0;
f0100e43:	89 c2                	mov    %eax,%edx
f0100e45:	03 15 ac ce 17 f0    	add    0xf017ceac,%edx
f0100e4b:	66 c7 42 04 00 00    	movw   $0x0,0x4(%edx)
		pages[i].pp_link = page_free_list;
f0100e51:	8b 0d dc c1 17 f0    	mov    0xf017c1dc,%ecx
f0100e57:	89 0a                	mov    %ecx,(%edx)
		page_free_list = &pages[i];
f0100e59:	03 05 ac ce 17 f0    	add    0xf017ceac,%eax
f0100e5f:	a3 dc c1 17 f0       	mov    %eax,0xf017c1dc
	//
	// Change the code to reflect this.
	// NB: DO NOT actually touch the physical memory corresponding to
	// free pages!
	size_t i;
	for (i = 0; i < npages; i++) {
f0100e64:	83 c3 01             	add    $0x1,%ebx
f0100e67:	3b 1d a4 ce 17 f0    	cmp    0xf017cea4,%ebx
f0100e6d:	72 ab                	jb     f0100e1a <page_init+0xe>
		pages[i].pp_ref = 0;
		pages[i].pp_link = page_free_list;
		page_free_list = &pages[i];
	
	}
}
f0100e6f:	83 c4 04             	add    $0x4,%esp
f0100e72:	5b                   	pop    %ebx
f0100e73:	5d                   	pop    %ebp
f0100e74:	c3                   	ret    

f0100e75 <page_alloc>:
// Returns NULL if out of free memory.
//
// Hint: use page2kva and memset
struct PageInfo *
page_alloc(int alloc_flags)
{
f0100e75:	55                   	push   %ebp
f0100e76:	89 e5                	mov    %esp,%ebp
f0100e78:	53                   	push   %ebx
f0100e79:	83 ec 14             	sub    $0x14,%esp
	struct PageInfo *tempage;
	
	if (page_free_list == NULL)
f0100e7c:	8b 1d dc c1 17 f0    	mov    0xf017c1dc,%ebx
f0100e82:	85 db                	test   %ebx,%ebx
f0100e84:	74 6f                	je     f0100ef5 <page_alloc+0x80>
		return NULL;

  	tempage= page_free_list;
  	page_free_list = tempage->pp_link;
f0100e86:	8b 03                	mov    (%ebx),%eax
f0100e88:	a3 dc c1 17 f0       	mov    %eax,0xf017c1dc
  	tempage->pp_link = NULL;
f0100e8d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)

	if (alloc_flags & ALLOC_ZERO)
		memset(page2kva(tempage), 0, PGSIZE); 

  	return tempage;
f0100e93:	89 d8                	mov    %ebx,%eax

  	tempage= page_free_list;
  	page_free_list = tempage->pp_link;
  	tempage->pp_link = NULL;

	if (alloc_flags & ALLOC_ZERO)
f0100e95:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
f0100e99:	74 5f                	je     f0100efa <page_alloc+0x85>
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
	return (pp - pages) << PGSHIFT;
f0100e9b:	2b 05 ac ce 17 f0    	sub    0xf017ceac,%eax
f0100ea1:	c1 f8 03             	sar    $0x3,%eax
f0100ea4:	c1 e0 0c             	shl    $0xc,%eax
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f0100ea7:	89 c2                	mov    %eax,%edx
f0100ea9:	c1 ea 0c             	shr    $0xc,%edx
f0100eac:	3b 15 a4 ce 17 f0    	cmp    0xf017cea4,%edx
f0100eb2:	72 20                	jb     f0100ed4 <page_alloc+0x5f>
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f0100eb4:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0100eb8:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f0100ebf:	f0 
f0100ec0:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
f0100ec7:	00 
f0100ec8:	c7 04 24 a0 4e 10 f0 	movl   $0xf0104ea0,(%esp)
f0100ecf:	e8 e2 f1 ff ff       	call   f01000b6 <_panic>
		memset(page2kva(tempage), 0, PGSIZE); 
f0100ed4:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
f0100edb:	00 
f0100edc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
f0100ee3:	00 
	return (void *)(pa + KERNBASE);
f0100ee4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0100ee9:	89 04 24             	mov    %eax,(%esp)
f0100eec:	e8 c6 35 00 00       	call   f01044b7 <memset>

  	return tempage;
f0100ef1:	89 d8                	mov    %ebx,%eax
f0100ef3:	eb 05                	jmp    f0100efa <page_alloc+0x85>
page_alloc(int alloc_flags)
{
	struct PageInfo *tempage;
	
	if (page_free_list == NULL)
		return NULL;
f0100ef5:	b8 00 00 00 00       	mov    $0x0,%eax
		memset(page2kva(tempage), 0, PGSIZE); 

  	return tempage;
	

}
f0100efa:	83 c4 14             	add    $0x14,%esp
f0100efd:	5b                   	pop    %ebx
f0100efe:	5d                   	pop    %ebp
f0100eff:	c3                   	ret    

f0100f00 <page_free>:
// Return a page to the free list.
// (This function should only be called when pp->pp_ref reaches 0.)
//
void
page_free(struct PageInfo *pp)
{
f0100f00:	55                   	push   %ebp
f0100f01:	89 e5                	mov    %esp,%ebp
f0100f03:	83 ec 18             	sub    $0x18,%esp
f0100f06:	8b 45 08             	mov    0x8(%ebp),%eax
	// Fill this function in
	// Hint: You may want to panic if pp->pp_ref is nonzero or
	// pp->pp_link is not NULL.
	if(pp->pp_ref==0)
f0100f09:	66 83 78 04 00       	cmpw   $0x0,0x4(%eax)
f0100f0e:	75 0f                	jne    f0100f1f <page_free+0x1f>
	{
	pp->pp_link=page_free_list;
f0100f10:	8b 15 dc c1 17 f0    	mov    0xf017c1dc,%edx
f0100f16:	89 10                	mov    %edx,(%eax)
	page_free_list=pp;	
f0100f18:	a3 dc c1 17 f0       	mov    %eax,0xf017c1dc
f0100f1d:	eb 1c                	jmp    f0100f3b <page_free+0x3b>
	}
	else
	panic("page ref not zero \n");
f0100f1f:	c7 44 24 08 4a 4f 10 	movl   $0xf0104f4a,0x8(%esp)
f0100f26:	f0 
f0100f27:	c7 44 24 04 6e 01 00 	movl   $0x16e,0x4(%esp)
f0100f2e:	00 
f0100f2f:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100f36:	e8 7b f1 ff ff       	call   f01000b6 <_panic>
}
f0100f3b:	c9                   	leave  
f0100f3c:	c3                   	ret    

f0100f3d <page_decref>:
// Decrement the reference count on a page,
// freeing it if there are no more refs.
//
void
page_decref(struct PageInfo* pp)
{
f0100f3d:	55                   	push   %ebp
f0100f3e:	89 e5                	mov    %esp,%ebp
f0100f40:	83 ec 18             	sub    $0x18,%esp
f0100f43:	8b 45 08             	mov    0x8(%ebp),%eax
	if (--pp->pp_ref == 0)
f0100f46:	0f b7 48 04          	movzwl 0x4(%eax),%ecx
f0100f4a:	8d 51 ff             	lea    -0x1(%ecx),%edx
f0100f4d:	66 89 50 04          	mov    %dx,0x4(%eax)
f0100f51:	66 85 d2             	test   %dx,%dx
f0100f54:	75 08                	jne    f0100f5e <page_decref+0x21>
		page_free(pp);
f0100f56:	89 04 24             	mov    %eax,(%esp)
f0100f59:	e8 a2 ff ff ff       	call   f0100f00 <page_free>
}
f0100f5e:	c9                   	leave  
f0100f5f:	c3                   	ret    

f0100f60 <pgdir_walk>:
// Hint 3: look at inc/mmu.h for useful macros that mainipulate page
// table and page directory entries.
//
pte_t *
pgdir_walk(pde_t *pgdir, const void *va, int create)
{
f0100f60:	55                   	push   %ebp
f0100f61:	89 e5                	mov    %esp,%ebp
f0100f63:	57                   	push   %edi
f0100f64:	56                   	push   %esi
f0100f65:	53                   	push   %ebx
f0100f66:	83 ec 1c             	sub    $0x1c,%esp
f0100f69:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	  pde_t * pde; //va(virtual address) point to pa(physical address)
	  pte_t * pgtable; //same as pde
	  struct PageInfo *pp;

	  pde = &pgdir[PDX(va)]; // va->pgdir
f0100f6c:	89 de                	mov    %ebx,%esi
f0100f6e:	c1 ee 16             	shr    $0x16,%esi
f0100f71:	c1 e6 02             	shl    $0x2,%esi
f0100f74:	03 75 08             	add    0x8(%ebp),%esi
	  if(*pde & PTE_P) { 
f0100f77:	8b 06                	mov    (%esi),%eax
f0100f79:	a8 01                	test   $0x1,%al
f0100f7b:	74 3d                	je     f0100fba <pgdir_walk+0x5a>
	  	pgtable = (KADDR(PTE_ADDR(*pde)));
f0100f7d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f0100f82:	89 c2                	mov    %eax,%edx
f0100f84:	c1 ea 0c             	shr    $0xc,%edx
f0100f87:	3b 15 a4 ce 17 f0    	cmp    0xf017cea4,%edx
f0100f8d:	72 20                	jb     f0100faf <pgdir_walk+0x4f>
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f0100f8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0100f93:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f0100f9a:	f0 
f0100f9b:	c7 44 24 04 9b 01 00 	movl   $0x19b,0x4(%esp)
f0100fa2:	00 
f0100fa3:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0100faa:	e8 07 f1 ff ff       	call   f01000b6 <_panic>
	return (void *)(pa + KERNBASE);
f0100faf:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0100fb5:	e9 97 00 00 00       	jmp    f0101051 <pgdir_walk+0xf1>
	  } else {
		//page table page not exist
		if(!create || 
f0100fba:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0100fbe:	0f 84 9b 00 00 00    	je     f010105f <pgdir_walk+0xff>
f0100fc4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
f0100fcb:	e8 a5 fe ff ff       	call   f0100e75 <page_alloc>
f0100fd0:	85 c0                	test   %eax,%eax
f0100fd2:	0f 84 8e 00 00 00    	je     f0101066 <pgdir_walk+0x106>
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
	return (pp - pages) << PGSHIFT;
f0100fd8:	89 c1                	mov    %eax,%ecx
f0100fda:	2b 0d ac ce 17 f0    	sub    0xf017ceac,%ecx
f0100fe0:	c1 f9 03             	sar    $0x3,%ecx
f0100fe3:	c1 e1 0c             	shl    $0xc,%ecx
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f0100fe6:	89 ca                	mov    %ecx,%edx
f0100fe8:	c1 ea 0c             	shr    $0xc,%edx
f0100feb:	3b 15 a4 ce 17 f0    	cmp    0xf017cea4,%edx
f0100ff1:	72 20                	jb     f0101013 <pgdir_walk+0xb3>
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f0100ff3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0100ff7:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f0100ffe:	f0 
f0100fff:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
f0101006:	00 
f0101007:	c7 04 24 a0 4e 10 f0 	movl   $0xf0104ea0,(%esp)
f010100e:	e8 a3 f0 ff ff       	call   f01000b6 <_panic>
	return (void *)(pa + KERNBASE);
f0101013:	8d b9 00 00 00 f0    	lea    -0x10000000(%ecx),%edi
f0101019:	89 fa                	mov    %edi,%edx
		   !(pp = page_alloc(ALLOC_ZERO)) ||
f010101b:	85 ff                	test   %edi,%edi
f010101d:	74 4e                	je     f010106d <pgdir_walk+0x10d>
		   !(pgtable = (pte_t*)page2kva(pp))) 
			return NULL;
		    
		pp->pp_ref++;
f010101f:	66 83 40 04 01       	addw   $0x1,0x4(%eax)
#define PADDR(kva) _paddr(__FILE__, __LINE__, kva)

static inline physaddr_t
_paddr(const char *file, int line, void *kva)
{
	if ((uint32_t)kva < KERNBASE)
f0101024:	81 ff ff ff ff ef    	cmp    $0xefffffff,%edi
f010102a:	77 20                	ja     f010104c <pgdir_walk+0xec>
		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
f010102c:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0101030:	c7 44 24 08 74 52 10 	movl   $0xf0105274,0x8(%esp)
f0101037:	f0 
f0101038:	c7 44 24 04 a4 01 00 	movl   $0x1a4,0x4(%esp)
f010103f:	00 
f0101040:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101047:	e8 6a f0 ff ff       	call   f01000b6 <_panic>
		*pde = PADDR(pgtable) | PTE_P | PTE_W | PTE_U;
f010104c:	83 c9 07             	or     $0x7,%ecx
f010104f:	89 0e                	mov    %ecx,(%esi)
	}

	return &pgtable[PTX(va)];
f0101051:	c1 eb 0a             	shr    $0xa,%ebx
f0101054:	89 d8                	mov    %ebx,%eax
f0101056:	25 fc 0f 00 00       	and    $0xffc,%eax
f010105b:	01 d0                	add    %edx,%eax
f010105d:	eb 13                	jmp    f0101072 <pgdir_walk+0x112>
	  } else {
		//page table page not exist
		if(!create || 
		   !(pp = page_alloc(ALLOC_ZERO)) ||
		   !(pgtable = (pte_t*)page2kva(pp))) 
			return NULL;
f010105f:	b8 00 00 00 00       	mov    $0x0,%eax
f0101064:	eb 0c                	jmp    f0101072 <pgdir_walk+0x112>
f0101066:	b8 00 00 00 00       	mov    $0x0,%eax
f010106b:	eb 05                	jmp    f0101072 <pgdir_walk+0x112>
f010106d:	b8 00 00 00 00       	mov    $0x0,%eax
		pp->pp_ref++;
		*pde = PADDR(pgtable) | PTE_P | PTE_W | PTE_U;
	}

	return &pgtable[PTX(va)];
}
f0101072:	83 c4 1c             	add    $0x1c,%esp
f0101075:	5b                   	pop    %ebx
f0101076:	5e                   	pop    %esi
f0101077:	5f                   	pop    %edi
f0101078:	5d                   	pop    %ebp
f0101079:	c3                   	ret    

f010107a <boot_map_region>:
// mapped pages.
//
// Hint: the TA solution uses pgdir_walk
static void
boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm)
{
f010107a:	55                   	push   %ebp
f010107b:	89 e5                	mov    %esp,%ebp
f010107d:	57                   	push   %edi
f010107e:	56                   	push   %esi
f010107f:	53                   	push   %ebx
f0101080:	83 ec 2c             	sub    $0x2c,%esp
f0101083:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32_t x;
	uint32_t i=0;
	pte_t * pt; 
	x=size/PGSIZE;
f0101086:	c1 e9 0c             	shr    $0xc,%ecx
f0101089:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
	while(i<x)
f010108c:	89 d3                	mov    %edx,%ebx
// Hint: the TA solution uses pgdir_walk
static void
boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm)
{
	uint32_t x;
	uint32_t i=0;
f010108e:	be 00 00 00 00       	mov    $0x0,%esi
f0101093:	8b 45 08             	mov    0x8(%ebp),%eax
f0101096:	29 d0                	sub    %edx,%eax
f0101098:	89 45 e0             	mov    %eax,-0x20(%ebp)
	pte_t * pt; 
	x=size/PGSIZE;
	while(i<x)
	{
		pt=pgdir_walk(pgdir,(void*)va,1);
		*pt=(PTE_ADDR(pa) | perm | PTE_P); 
f010109b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010109e:	83 c8 01             	or     $0x1,%eax
f01010a1:	89 45 d8             	mov    %eax,-0x28(%ebp)
{
	uint32_t x;
	uint32_t i=0;
	pte_t * pt; 
	x=size/PGSIZE;
	while(i<x)
f01010a4:	eb 2b                	jmp    f01010d1 <boot_map_region+0x57>
	{
		pt=pgdir_walk(pgdir,(void*)va,1);
f01010a6:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
f01010ad:	00 
f01010ae:	89 5c 24 04          	mov    %ebx,0x4(%esp)
f01010b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01010b5:	89 04 24             	mov    %eax,(%esp)
f01010b8:	e8 a3 fe ff ff       	call   f0100f60 <pgdir_walk>
		*pt=(PTE_ADDR(pa) | perm | PTE_P); 
f01010bd:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
f01010c3:	0b 7d d8             	or     -0x28(%ebp),%edi
f01010c6:	89 38                	mov    %edi,(%eax)
		va+=PGSIZE;
f01010c8:	81 c3 00 10 00 00    	add    $0x1000,%ebx
		pa+=PGSIZE;
		i++;
f01010ce:	83 c6 01             	add    $0x1,%esi
f01010d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01010d4:	8d 3c 18             	lea    (%eax,%ebx,1),%edi
{
	uint32_t x;
	uint32_t i=0;
	pte_t * pt; 
	x=size/PGSIZE;
	while(i<x)
f01010d7:	3b 75 e4             	cmp    -0x1c(%ebp),%esi
f01010da:	75 ca                	jne    f01010a6 <boot_map_region+0x2c>
		va+=PGSIZE;
		pa+=PGSIZE;
		i++;
	}
	// Fill this function in
}
f01010dc:	83 c4 2c             	add    $0x2c,%esp
f01010df:	5b                   	pop    %ebx
f01010e0:	5e                   	pop    %esi
f01010e1:	5f                   	pop    %edi
f01010e2:	5d                   	pop    %ebp
f01010e3:	c3                   	ret    

f01010e4 <page_lookup>:
//
// Hint: the TA solution uses pgdir_walk and pa2page.
//
struct PageInfo *
page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)
{
f01010e4:	55                   	push   %ebp
f01010e5:	89 e5                	mov    %esp,%ebp
f01010e7:	83 ec 18             	sub    $0x18,%esp
	pte_t * pt = pgdir_walk(pgdir, va, 0);
f01010ea:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
f01010f1:	00 
f01010f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010f5:	89 44 24 04          	mov    %eax,0x4(%esp)
f01010f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01010fc:	89 04 24             	mov    %eax,(%esp)
f01010ff:	e8 5c fe ff ff       	call   f0100f60 <pgdir_walk>
	
	if(pt == NULL)
f0101104:	85 c0                	test   %eax,%eax
f0101106:	74 39                	je     f0101141 <page_lookup+0x5d>
	return NULL;
	
	*pte_store = pt;
f0101108:	8b 55 10             	mov    0x10(%ebp),%edx
f010110b:	89 02                	mov    %eax,(%edx)
	
  return pa2page(PTE_ADDR(*pt));	
f010110d:	8b 00                	mov    (%eax),%eax
}

static inline struct PageInfo*
pa2page(physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f010110f:	c1 e8 0c             	shr    $0xc,%eax
f0101112:	3b 05 a4 ce 17 f0    	cmp    0xf017cea4,%eax
f0101118:	72 1c                	jb     f0101136 <page_lookup+0x52>
		panic("pa2page called with invalid pa");
f010111a:	c7 44 24 08 98 52 10 	movl   $0xf0105298,0x8(%esp)
f0101121:	f0 
f0101122:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
f0101129:	00 
f010112a:	c7 04 24 a0 4e 10 f0 	movl   $0xf0104ea0,(%esp)
f0101131:	e8 80 ef ff ff       	call   f01000b6 <_panic>
	return &pages[PGNUM(pa)];
f0101136:	8b 15 ac ce 17 f0    	mov    0xf017ceac,%edx
f010113c:	8d 04 c2             	lea    (%edx,%eax,8),%eax
f010113f:	eb 05                	jmp    f0101146 <page_lookup+0x62>
page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)
{
	pte_t * pt = pgdir_walk(pgdir, va, 0);
	
	if(pt == NULL)
	return NULL;
f0101141:	b8 00 00 00 00       	mov    $0x0,%eax
	
	*pte_store = pt;
	
  return pa2page(PTE_ADDR(*pt));	

}
f0101146:	c9                   	leave  
f0101147:	c3                   	ret    

f0101148 <page_remove>:
// Hint: The TA solution is implemented using page_lookup,
// 	tlb_invalidate, and page_decref.
//
void
page_remove(pde_t *pgdir, void *va)
{
f0101148:	55                   	push   %ebp
f0101149:	89 e5                	mov    %esp,%ebp
f010114b:	53                   	push   %ebx
f010114c:	83 ec 24             	sub    $0x24,%esp
f010114f:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	struct PageInfo *page = NULL;
	pte_t *pt = NULL;
f0101152:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((page = page_lookup(pgdir, va, &pt)) != NULL){
f0101159:	8d 45 f4             	lea    -0xc(%ebp),%eax
f010115c:	89 44 24 08          	mov    %eax,0x8(%esp)
f0101160:	89 5c 24 04          	mov    %ebx,0x4(%esp)
f0101164:	8b 45 08             	mov    0x8(%ebp),%eax
f0101167:	89 04 24             	mov    %eax,(%esp)
f010116a:	e8 75 ff ff ff       	call   f01010e4 <page_lookup>
f010116f:	85 c0                	test   %eax,%eax
f0101171:	74 0b                	je     f010117e <page_remove+0x36>
		page_decref(page);
f0101173:	89 04 24             	mov    %eax,(%esp)
f0101176:	e8 c2 fd ff ff       	call   f0100f3d <page_decref>
}

static inline void
invlpg(void *addr)
{
	asm volatile("invlpg (%0)" : : "r" (addr) : "memory");
f010117b:	0f 01 3b             	invlpg (%ebx)
		tlb_invalidate(pgdir, va);
	}
	*pt=0;
f010117e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101181:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0101187:	83 c4 24             	add    $0x24,%esp
f010118a:	5b                   	pop    %ebx
f010118b:	5d                   	pop    %ebp
f010118c:	c3                   	ret    

f010118d <page_insert>:
// Hint: The TA solution is implemented using pgdir_walk, page_remove,
// and page2pa.
//
int
page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)
{
f010118d:	55                   	push   %ebp
f010118e:	89 e5                	mov    %esp,%ebp
f0101190:	57                   	push   %edi
f0101191:	56                   	push   %esi
f0101192:	53                   	push   %ebx
f0101193:	83 ec 1c             	sub    $0x1c,%esp
f0101196:	8b 5d 0c             	mov    0xc(%ebp),%ebx
f0101199:	8b 7d 10             	mov    0x10(%ebp),%edi
pte_t *pte = pgdir_walk(pgdir, va, 1);
f010119c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
f01011a3:	00 
f01011a4:	89 7c 24 04          	mov    %edi,0x4(%esp)
f01011a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01011ab:	89 04 24             	mov    %eax,(%esp)
f01011ae:	e8 ad fd ff ff       	call   f0100f60 <pgdir_walk>
f01011b3:	89 c6                	mov    %eax,%esi
 

    if (pte != NULL) {
f01011b5:	85 c0                	test   %eax,%eax
f01011b7:	74 48                	je     f0101201 <page_insert+0x74>
     
        if (*pte & PTE_P)
f01011b9:	f6 00 01             	testb  $0x1,(%eax)
f01011bc:	74 0f                	je     f01011cd <page_insert+0x40>
            page_remove(pgdir, va);
f01011be:	89 7c 24 04          	mov    %edi,0x4(%esp)
f01011c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01011c5:	89 04 24             	mov    %eax,(%esp)
f01011c8:	e8 7b ff ff ff       	call   f0101148 <page_remove>
   
       if (page_free_list == pp)
f01011cd:	a1 dc c1 17 f0       	mov    0xf017c1dc,%eax
f01011d2:	39 d8                	cmp    %ebx,%eax
f01011d4:	75 07                	jne    f01011dd <page_insert+0x50>
            page_free_list = page_free_list->pp_link;
f01011d6:	8b 00                	mov    (%eax),%eax
f01011d8:	a3 dc c1 17 f0       	mov    %eax,0xf017c1dc
    else {
     //   pte = pgdir_walk(pgdir, va, 1);
       // if (!pte)
            return -E_NO_MEM;
    }
    *pte = page2pa(pp) | perm | PTE_P;
f01011dd:	8b 55 14             	mov    0x14(%ebp),%edx
f01011e0:	83 ca 01             	or     $0x1,%edx
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
	return (pp - pages) << PGSHIFT;
f01011e3:	89 d8                	mov    %ebx,%eax
f01011e5:	2b 05 ac ce 17 f0    	sub    0xf017ceac,%eax
f01011eb:	c1 f8 03             	sar    $0x3,%eax
f01011ee:	c1 e0 0c             	shl    $0xc,%eax
f01011f1:	09 d0                	or     %edx,%eax
f01011f3:	89 06                	mov    %eax,(%esi)
    pp->pp_ref++;
f01011f5:	66 83 43 04 01       	addw   $0x1,0x4(%ebx)

return 0;
f01011fa:	b8 00 00 00 00       	mov    $0x0,%eax
f01011ff:	eb 05                	jmp    f0101206 <page_insert+0x79>
            page_free_list = page_free_list->pp_link;
    }
    else {
     //   pte = pgdir_walk(pgdir, va, 1);
       // if (!pte)
            return -E_NO_MEM;
f0101201:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
    *pte = page2pa(pp) | perm | PTE_P;
    pp->pp_ref++;

return 0;
	
}
f0101206:	83 c4 1c             	add    $0x1c,%esp
f0101209:	5b                   	pop    %ebx
f010120a:	5e                   	pop    %esi
f010120b:	5f                   	pop    %edi
f010120c:	5d                   	pop    %ebp
f010120d:	c3                   	ret    

f010120e <mem_init>:
//
// From UTOP to ULIM, the user is allowed to read but not write.
// Above ULIM the user cannot read or write.
void
mem_init(void)
{
f010120e:	55                   	push   %ebp
f010120f:	89 e5                	mov    %esp,%ebp
f0101211:	57                   	push   %edi
f0101212:	56                   	push   %esi
f0101213:	53                   	push   %ebx
f0101214:	83 ec 4c             	sub    $0x4c,%esp
{
	size_t basemem, extmem, ext16mem, totalmem;

	// Use CMOS calls to measure available base & extended memory.
	// (CMOS calls return results in kilobytes.)
	basemem = nvram_read(NVRAM_BASELO);
f0101217:	b8 15 00 00 00       	mov    $0x15,%eax
f010121c:	e8 4f f7 ff ff       	call   f0100970 <nvram_read>
f0101221:	89 c3                	mov    %eax,%ebx
	extmem = nvram_read(NVRAM_EXTLO);
f0101223:	b8 17 00 00 00       	mov    $0x17,%eax
f0101228:	e8 43 f7 ff ff       	call   f0100970 <nvram_read>
f010122d:	89 c6                	mov    %eax,%esi
	ext16mem = nvram_read(NVRAM_EXT16LO) * 64;
f010122f:	b8 34 00 00 00       	mov    $0x34,%eax
f0101234:	e8 37 f7 ff ff       	call   f0100970 <nvram_read>
f0101239:	c1 e0 06             	shl    $0x6,%eax
f010123c:	89 c2                	mov    %eax,%edx

	// Calculate the number of physical pages available in both base
	// and extended memory.
	if (ext16mem)
		totalmem = 16 * 1024 + ext16mem;
f010123e:	8d 80 00 40 00 00    	lea    0x4000(%eax),%eax
	extmem = nvram_read(NVRAM_EXTLO);
	ext16mem = nvram_read(NVRAM_EXT16LO) * 64;

	// Calculate the number of physical pages available in both base
	// and extended memory.
	if (ext16mem)
f0101244:	85 d2                	test   %edx,%edx
f0101246:	75 0b                	jne    f0101253 <mem_init+0x45>
		totalmem = 16 * 1024 + ext16mem;
	else if (extmem)
		totalmem = 1 * 1024 + extmem;
f0101248:	8d 86 00 04 00 00    	lea    0x400(%esi),%eax
f010124e:	85 f6                	test   %esi,%esi
f0101250:	0f 44 c3             	cmove  %ebx,%eax
	else
		totalmem = basemem;

	npages = totalmem / (PGSIZE / 1024);
f0101253:	89 c2                	mov    %eax,%edx
f0101255:	c1 ea 02             	shr    $0x2,%edx
f0101258:	89 15 a4 ce 17 f0    	mov    %edx,0xf017cea4
	npages_basemem = basemem / (PGSIZE / 1024);
f010125e:	89 da                	mov    %ebx,%edx
f0101260:	c1 ea 02             	shr    $0x2,%edx
f0101263:	89 15 e0 c1 17 f0    	mov    %edx,0xf017c1e0
	cprintf("Physical memory: %uK available, base = %uK, extended = %uK\n",
f0101269:	89 c2                	mov    %eax,%edx
f010126b:	29 da                	sub    %ebx,%edx
f010126d:	89 54 24 0c          	mov    %edx,0xc(%esp)
f0101271:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0101275:	89 44 24 04          	mov    %eax,0x4(%esp)
f0101279:	c7 04 24 b8 52 10 f0 	movl   $0xf01052b8,(%esp)
f0101280:	e8 a6 22 00 00       	call   f010352b <cprintf>
	// Remove this line when you're ready to test this function.
	//panic("mem_init: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.
	kern_pgdir = (pde_t *) boot_alloc(PGSIZE);
f0101285:	b8 00 10 00 00       	mov    $0x1000,%eax
f010128a:	e8 0c f7 ff ff       	call   f010099b <boot_alloc>
f010128f:	a3 a8 ce 17 f0       	mov    %eax,0xf017cea8
	memset(kern_pgdir, 0, PGSIZE);
f0101294:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
f010129b:	00 
f010129c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
f01012a3:	00 
f01012a4:	89 04 24             	mov    %eax,(%esp)
f01012a7:	e8 0b 32 00 00       	call   f01044b7 <memset>
	// a virtual page table at virtual address UVPT.
	// (For now, you don't have understand the greater purpose of the
	// following line.)

	// Permissions: kernel R, user R
	kern_pgdir[PDX(UVPT)] = PADDR(kern_pgdir) | PTE_U | PTE_P;
f01012ac:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
#define PADDR(kva) _paddr(__FILE__, __LINE__, kva)

static inline physaddr_t
_paddr(const char *file, int line, void *kva)
{
	if ((uint32_t)kva < KERNBASE)
f01012b1:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
f01012b6:	77 20                	ja     f01012d8 <mem_init+0xca>
		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
f01012b8:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01012bc:	c7 44 24 08 74 52 10 	movl   $0xf0105274,0x8(%esp)
f01012c3:	f0 
f01012c4:	c7 44 24 04 a4 00 00 	movl   $0xa4,0x4(%esp)
f01012cb:	00 
f01012cc:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01012d3:	e8 de ed ff ff       	call   f01000b6 <_panic>
	return (physaddr_t)kva - KERNBASE;
f01012d8:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01012de:	83 ca 05             	or     $0x5,%edx
f01012e1:	89 90 f4 0e 00 00    	mov    %edx,0xef4(%eax)
	// The kernel uses this array to keep track of physical pages: for
	// each physical page, there is a corresponding struct PageInfo in this
	// array.  'npages' is the number of physical pages in memory.  Use memset
	// to initialize all fields of each struct PageInfo to 0.
	// Your code goes here:
	pages=boot_alloc(sizeof(struct PageInfo)*npages);
f01012e7:	a1 a4 ce 17 f0       	mov    0xf017cea4,%eax
f01012ec:	c1 e0 03             	shl    $0x3,%eax
f01012ef:	e8 a7 f6 ff ff       	call   f010099b <boot_alloc>
f01012f4:	a3 ac ce 17 f0       	mov    %eax,0xf017ceac
	memset(pages,0,sizeof(struct PageInfo)*npages);
f01012f9:	8b 0d a4 ce 17 f0    	mov    0xf017cea4,%ecx
f01012ff:	8d 14 cd 00 00 00 00 	lea    0x0(,%ecx,8),%edx
f0101306:	89 54 24 08          	mov    %edx,0x8(%esp)
f010130a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
f0101311:	00 
f0101312:	89 04 24             	mov    %eax,(%esp)
f0101315:	e8 9d 31 00 00       	call   f01044b7 <memset>

	//////////////////////////////////////////////////////////////////////
	// Make 'envs' point to an array of size 'NENV' of 'struct Env'.
	// LAB 3: Your code here. 
          envs= boot_alloc(sizeof(struct Env) * NENV);
f010131a:	b8 00 80 01 00       	mov    $0x18000,%eax
f010131f:	e8 77 f6 ff ff       	call   f010099b <boot_alloc>
f0101324:	a3 e8 c1 17 f0       	mov    %eax,0xf017c1e8
          memset(envs,0,sizeof(struct Env) * NENV);
f0101329:	c7 44 24 08 00 80 01 	movl   $0x18000,0x8(%esp)
f0101330:	00 
f0101331:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
f0101338:	00 
f0101339:	89 04 24             	mov    %eax,(%esp)
f010133c:	e8 76 31 00 00       	call   f01044b7 <memset>
	// Now that we've allocated the initial kernel data structures, we set
	// up the list of free physical pages. Once we've done so, all further
	// memory management will go through the page_* functions. In
	// particular, we can now map memory using boot_map_region
	// or page_insert
	page_init();
f0101341:	e8 c6 fa ff ff       	call   f0100e0c <page_init>
	check_page_free_list(1);
f0101346:	b8 01 00 00 00       	mov    $0x1,%eax
f010134b:	e8 73 f7 ff ff       	call   f0100ac3 <check_page_free_list>
	int nfree;
	struct PageInfo *fl;
	char *c;
	int i;

	if (!pages)
f0101350:	83 3d ac ce 17 f0 00 	cmpl   $0x0,0xf017ceac
f0101357:	75 1c                	jne    f0101375 <mem_init+0x167>
		panic("'pages' is a null pointer!");
f0101359:	c7 44 24 08 5e 4f 10 	movl   $0xf0104f5e,0x8(%esp)
f0101360:	f0 
f0101361:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
f0101368:	00 
f0101369:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101370:	e8 41 ed ff ff       	call   f01000b6 <_panic>

	// check number of free pages
	for (pp = page_free_list, nfree = 0; pp; pp = pp->pp_link)
f0101375:	a1 dc c1 17 f0       	mov    0xf017c1dc,%eax
f010137a:	bb 00 00 00 00       	mov    $0x0,%ebx
f010137f:	eb 05                	jmp    f0101386 <mem_init+0x178>
		++nfree;
f0101381:	83 c3 01             	add    $0x1,%ebx

	if (!pages)
		panic("'pages' is a null pointer!");

	// check number of free pages
	for (pp = page_free_list, nfree = 0; pp; pp = pp->pp_link)
f0101384:	8b 00                	mov    (%eax),%eax
f0101386:	85 c0                	test   %eax,%eax
f0101388:	75 f7                	jne    f0101381 <mem_init+0x173>
		++nfree;

	// should be able to allocate three pages
	pp0 = pp1 = pp2 = 0;
	assert((pp0 = page_alloc(0)));
f010138a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f0101391:	e8 df fa ff ff       	call   f0100e75 <page_alloc>
f0101396:	89 c7                	mov    %eax,%edi
f0101398:	85 c0                	test   %eax,%eax
f010139a:	75 24                	jne    f01013c0 <mem_init+0x1b2>
f010139c:	c7 44 24 0c 79 4f 10 	movl   $0xf0104f79,0xc(%esp)
f01013a3:	f0 
f01013a4:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01013ab:	f0 
f01013ac:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
f01013b3:	00 
f01013b4:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01013bb:	e8 f6 ec ff ff       	call   f01000b6 <_panic>
	assert((pp1 = page_alloc(0)));
f01013c0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f01013c7:	e8 a9 fa ff ff       	call   f0100e75 <page_alloc>
f01013cc:	89 c6                	mov    %eax,%esi
f01013ce:	85 c0                	test   %eax,%eax
f01013d0:	75 24                	jne    f01013f6 <mem_init+0x1e8>
f01013d2:	c7 44 24 0c 8f 4f 10 	movl   $0xf0104f8f,0xc(%esp)
f01013d9:	f0 
f01013da:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01013e1:	f0 
f01013e2:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
f01013e9:	00 
f01013ea:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01013f1:	e8 c0 ec ff ff       	call   f01000b6 <_panic>
	assert((pp2 = page_alloc(0)));
f01013f6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f01013fd:	e8 73 fa ff ff       	call   f0100e75 <page_alloc>
f0101402:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0101405:	85 c0                	test   %eax,%eax
f0101407:	75 24                	jne    f010142d <mem_init+0x21f>
f0101409:	c7 44 24 0c a5 4f 10 	movl   $0xf0104fa5,0xc(%esp)
f0101410:	f0 
f0101411:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101418:	f0 
f0101419:	c7 44 24 04 bf 02 00 	movl   $0x2bf,0x4(%esp)
f0101420:	00 
f0101421:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101428:	e8 89 ec ff ff       	call   f01000b6 <_panic>

	assert(pp0);
	assert(pp1 && pp1 != pp0);
f010142d:	39 f7                	cmp    %esi,%edi
f010142f:	75 24                	jne    f0101455 <mem_init+0x247>
f0101431:	c7 44 24 0c bb 4f 10 	movl   $0xf0104fbb,0xc(%esp)
f0101438:	f0 
f0101439:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101440:	f0 
f0101441:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
f0101448:	00 
f0101449:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101450:	e8 61 ec ff ff       	call   f01000b6 <_panic>
	assert(pp2 && pp2 != pp1 && pp2 != pp0);
f0101455:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101458:	39 c6                	cmp    %eax,%esi
f010145a:	74 04                	je     f0101460 <mem_init+0x252>
f010145c:	39 c7                	cmp    %eax,%edi
f010145e:	75 24                	jne    f0101484 <mem_init+0x276>
f0101460:	c7 44 24 0c f4 52 10 	movl   $0xf01052f4,0xc(%esp)
f0101467:	f0 
f0101468:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f010146f:	f0 
f0101470:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
f0101477:	00 
f0101478:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f010147f:	e8 32 ec ff ff       	call   f01000b6 <_panic>
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
	return (pp - pages) << PGSHIFT;
f0101484:	8b 15 ac ce 17 f0    	mov    0xf017ceac,%edx
	assert(page2pa(pp0) < npages*PGSIZE);
f010148a:	a1 a4 ce 17 f0       	mov    0xf017cea4,%eax
f010148f:	c1 e0 0c             	shl    $0xc,%eax
f0101492:	89 f9                	mov    %edi,%ecx
f0101494:	29 d1                	sub    %edx,%ecx
f0101496:	c1 f9 03             	sar    $0x3,%ecx
f0101499:	c1 e1 0c             	shl    $0xc,%ecx
f010149c:	39 c1                	cmp    %eax,%ecx
f010149e:	72 24                	jb     f01014c4 <mem_init+0x2b6>
f01014a0:	c7 44 24 0c cd 4f 10 	movl   $0xf0104fcd,0xc(%esp)
f01014a7:	f0 
f01014a8:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01014af:	f0 
f01014b0:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
f01014b7:	00 
f01014b8:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01014bf:	e8 f2 eb ff ff       	call   f01000b6 <_panic>
f01014c4:	89 f1                	mov    %esi,%ecx
f01014c6:	29 d1                	sub    %edx,%ecx
f01014c8:	c1 f9 03             	sar    $0x3,%ecx
f01014cb:	c1 e1 0c             	shl    $0xc,%ecx
	assert(page2pa(pp1) < npages*PGSIZE);
f01014ce:	39 c8                	cmp    %ecx,%eax
f01014d0:	77 24                	ja     f01014f6 <mem_init+0x2e8>
f01014d2:	c7 44 24 0c ea 4f 10 	movl   $0xf0104fea,0xc(%esp)
f01014d9:	f0 
f01014da:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01014e1:	f0 
f01014e2:	c7 44 24 04 c5 02 00 	movl   $0x2c5,0x4(%esp)
f01014e9:	00 
f01014ea:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01014f1:	e8 c0 eb ff ff       	call   f01000b6 <_panic>
f01014f6:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
f01014f9:	29 d1                	sub    %edx,%ecx
f01014fb:	89 ca                	mov    %ecx,%edx
f01014fd:	c1 fa 03             	sar    $0x3,%edx
f0101500:	c1 e2 0c             	shl    $0xc,%edx
	assert(page2pa(pp2) < npages*PGSIZE);
f0101503:	39 d0                	cmp    %edx,%eax
f0101505:	77 24                	ja     f010152b <mem_init+0x31d>
f0101507:	c7 44 24 0c 07 50 10 	movl   $0xf0105007,0xc(%esp)
f010150e:	f0 
f010150f:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101516:	f0 
f0101517:	c7 44 24 04 c6 02 00 	movl   $0x2c6,0x4(%esp)
f010151e:	00 
f010151f:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101526:	e8 8b eb ff ff       	call   f01000b6 <_panic>

	// temporarily steal the rest of the free pages
	fl = page_free_list;
f010152b:	a1 dc c1 17 f0       	mov    0xf017c1dc,%eax
f0101530:	89 45 d0             	mov    %eax,-0x30(%ebp)
	page_free_list = 0;
f0101533:	c7 05 dc c1 17 f0 00 	movl   $0x0,0xf017c1dc
f010153a:	00 00 00 

	// should be no free memory
	assert(!page_alloc(0));
f010153d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f0101544:	e8 2c f9 ff ff       	call   f0100e75 <page_alloc>
f0101549:	85 c0                	test   %eax,%eax
f010154b:	74 24                	je     f0101571 <mem_init+0x363>
f010154d:	c7 44 24 0c 24 50 10 	movl   $0xf0105024,0xc(%esp)
f0101554:	f0 
f0101555:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f010155c:	f0 
f010155d:	c7 44 24 04 cd 02 00 	movl   $0x2cd,0x4(%esp)
f0101564:	00 
f0101565:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f010156c:	e8 45 eb ff ff       	call   f01000b6 <_panic>

	// free and re-allocate?
	page_free(pp0);
f0101571:	89 3c 24             	mov    %edi,(%esp)
f0101574:	e8 87 f9 ff ff       	call   f0100f00 <page_free>
	page_free(pp1);
f0101579:	89 34 24             	mov    %esi,(%esp)
f010157c:	e8 7f f9 ff ff       	call   f0100f00 <page_free>
	page_free(pp2);
f0101581:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101584:	89 04 24             	mov    %eax,(%esp)
f0101587:	e8 74 f9 ff ff       	call   f0100f00 <page_free>
	pp0 = pp1 = pp2 = 0;
	assert((pp0 = page_alloc(0)));
f010158c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f0101593:	e8 dd f8 ff ff       	call   f0100e75 <page_alloc>
f0101598:	89 c6                	mov    %eax,%esi
f010159a:	85 c0                	test   %eax,%eax
f010159c:	75 24                	jne    f01015c2 <mem_init+0x3b4>
f010159e:	c7 44 24 0c 79 4f 10 	movl   $0xf0104f79,0xc(%esp)
f01015a5:	f0 
f01015a6:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01015ad:	f0 
f01015ae:	c7 44 24 04 d4 02 00 	movl   $0x2d4,0x4(%esp)
f01015b5:	00 
f01015b6:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01015bd:	e8 f4 ea ff ff       	call   f01000b6 <_panic>
	assert((pp1 = page_alloc(0)));
f01015c2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f01015c9:	e8 a7 f8 ff ff       	call   f0100e75 <page_alloc>
f01015ce:	89 c7                	mov    %eax,%edi
f01015d0:	85 c0                	test   %eax,%eax
f01015d2:	75 24                	jne    f01015f8 <mem_init+0x3ea>
f01015d4:	c7 44 24 0c 8f 4f 10 	movl   $0xf0104f8f,0xc(%esp)
f01015db:	f0 
f01015dc:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01015e3:	f0 
f01015e4:	c7 44 24 04 d5 02 00 	movl   $0x2d5,0x4(%esp)
f01015eb:	00 
f01015ec:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01015f3:	e8 be ea ff ff       	call   f01000b6 <_panic>
	assert((pp2 = page_alloc(0)));
f01015f8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f01015ff:	e8 71 f8 ff ff       	call   f0100e75 <page_alloc>
f0101604:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0101607:	85 c0                	test   %eax,%eax
f0101609:	75 24                	jne    f010162f <mem_init+0x421>
f010160b:	c7 44 24 0c a5 4f 10 	movl   $0xf0104fa5,0xc(%esp)
f0101612:	f0 
f0101613:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f010161a:	f0 
f010161b:	c7 44 24 04 d6 02 00 	movl   $0x2d6,0x4(%esp)
f0101622:	00 
f0101623:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f010162a:	e8 87 ea ff ff       	call   f01000b6 <_panic>
	assert(pp0);
	assert(pp1 && pp1 != pp0);
f010162f:	39 fe                	cmp    %edi,%esi
f0101631:	75 24                	jne    f0101657 <mem_init+0x449>
f0101633:	c7 44 24 0c bb 4f 10 	movl   $0xf0104fbb,0xc(%esp)
f010163a:	f0 
f010163b:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101642:	f0 
f0101643:	c7 44 24 04 d8 02 00 	movl   $0x2d8,0x4(%esp)
f010164a:	00 
f010164b:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101652:	e8 5f ea ff ff       	call   f01000b6 <_panic>
	assert(pp2 && pp2 != pp1 && pp2 != pp0);
f0101657:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010165a:	39 c7                	cmp    %eax,%edi
f010165c:	74 04                	je     f0101662 <mem_init+0x454>
f010165e:	39 c6                	cmp    %eax,%esi
f0101660:	75 24                	jne    f0101686 <mem_init+0x478>
f0101662:	c7 44 24 0c f4 52 10 	movl   $0xf01052f4,0xc(%esp)
f0101669:	f0 
f010166a:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101671:	f0 
f0101672:	c7 44 24 04 d9 02 00 	movl   $0x2d9,0x4(%esp)
f0101679:	00 
f010167a:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101681:	e8 30 ea ff ff       	call   f01000b6 <_panic>
	assert(!page_alloc(0));
f0101686:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f010168d:	e8 e3 f7 ff ff       	call   f0100e75 <page_alloc>
f0101692:	85 c0                	test   %eax,%eax
f0101694:	74 24                	je     f01016ba <mem_init+0x4ac>
f0101696:	c7 44 24 0c 24 50 10 	movl   $0xf0105024,0xc(%esp)
f010169d:	f0 
f010169e:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01016a5:	f0 
f01016a6:	c7 44 24 04 da 02 00 	movl   $0x2da,0x4(%esp)
f01016ad:	00 
f01016ae:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01016b5:	e8 fc e9 ff ff       	call   f01000b6 <_panic>
f01016ba:	89 f0                	mov    %esi,%eax
f01016bc:	2b 05 ac ce 17 f0    	sub    0xf017ceac,%eax
f01016c2:	c1 f8 03             	sar    $0x3,%eax
f01016c5:	c1 e0 0c             	shl    $0xc,%eax
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f01016c8:	89 c2                	mov    %eax,%edx
f01016ca:	c1 ea 0c             	shr    $0xc,%edx
f01016cd:	3b 15 a4 ce 17 f0    	cmp    0xf017cea4,%edx
f01016d3:	72 20                	jb     f01016f5 <mem_init+0x4e7>
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f01016d5:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01016d9:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f01016e0:	f0 
f01016e1:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
f01016e8:	00 
f01016e9:	c7 04 24 a0 4e 10 f0 	movl   $0xf0104ea0,(%esp)
f01016f0:	e8 c1 e9 ff ff       	call   f01000b6 <_panic>

	// test flags
	memset(page2kva(pp0), 1, PGSIZE);
f01016f5:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
f01016fc:	00 
f01016fd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
f0101704:	00 
	return (void *)(pa + KERNBASE);
f0101705:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010170a:	89 04 24             	mov    %eax,(%esp)
f010170d:	e8 a5 2d 00 00       	call   f01044b7 <memset>
	page_free(pp0);
f0101712:	89 34 24             	mov    %esi,(%esp)
f0101715:	e8 e6 f7 ff ff       	call   f0100f00 <page_free>
	assert((pp = page_alloc(ALLOC_ZERO)));
f010171a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
f0101721:	e8 4f f7 ff ff       	call   f0100e75 <page_alloc>
f0101726:	85 c0                	test   %eax,%eax
f0101728:	75 24                	jne    f010174e <mem_init+0x540>
f010172a:	c7 44 24 0c 33 50 10 	movl   $0xf0105033,0xc(%esp)
f0101731:	f0 
f0101732:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101739:	f0 
f010173a:	c7 44 24 04 df 02 00 	movl   $0x2df,0x4(%esp)
f0101741:	00 
f0101742:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101749:	e8 68 e9 ff ff       	call   f01000b6 <_panic>
	assert(pp && pp0 == pp);
f010174e:	39 c6                	cmp    %eax,%esi
f0101750:	74 24                	je     f0101776 <mem_init+0x568>
f0101752:	c7 44 24 0c 51 50 10 	movl   $0xf0105051,0xc(%esp)
f0101759:	f0 
f010175a:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101761:	f0 
f0101762:	c7 44 24 04 e0 02 00 	movl   $0x2e0,0x4(%esp)
f0101769:	00 
f010176a:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101771:	e8 40 e9 ff ff       	call   f01000b6 <_panic>
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
	return (pp - pages) << PGSHIFT;
f0101776:	89 f0                	mov    %esi,%eax
f0101778:	2b 05 ac ce 17 f0    	sub    0xf017ceac,%eax
f010177e:	c1 f8 03             	sar    $0x3,%eax
f0101781:	c1 e0 0c             	shl    $0xc,%eax
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f0101784:	89 c2                	mov    %eax,%edx
f0101786:	c1 ea 0c             	shr    $0xc,%edx
f0101789:	3b 15 a4 ce 17 f0    	cmp    0xf017cea4,%edx
f010178f:	72 20                	jb     f01017b1 <mem_init+0x5a3>
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f0101791:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0101795:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f010179c:	f0 
f010179d:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
f01017a4:	00 
f01017a5:	c7 04 24 a0 4e 10 f0 	movl   $0xf0104ea0,(%esp)
f01017ac:	e8 05 e9 ff ff       	call   f01000b6 <_panic>
f01017b1:	8d 90 00 10 00 f0    	lea    -0xffff000(%eax),%edx
	return (void *)(pa + KERNBASE);
f01017b7:	8d 80 00 00 00 f0    	lea    -0x10000000(%eax),%eax
	c = page2kva(pp);
	for (i = 0; i < PGSIZE; i++)
		assert(c[i] == 0);
f01017bd:	80 38 00             	cmpb   $0x0,(%eax)
f01017c0:	74 24                	je     f01017e6 <mem_init+0x5d8>
f01017c2:	c7 44 24 0c 61 50 10 	movl   $0xf0105061,0xc(%esp)
f01017c9:	f0 
f01017ca:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01017d1:	f0 
f01017d2:	c7 44 24 04 e3 02 00 	movl   $0x2e3,0x4(%esp)
f01017d9:	00 
f01017da:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01017e1:	e8 d0 e8 ff ff       	call   f01000b6 <_panic>
f01017e6:	83 c0 01             	add    $0x1,%eax
	memset(page2kva(pp0), 1, PGSIZE);
	page_free(pp0);
	assert((pp = page_alloc(ALLOC_ZERO)));
	assert(pp && pp0 == pp);
	c = page2kva(pp);
	for (i = 0; i < PGSIZE; i++)
f01017e9:	39 d0                	cmp    %edx,%eax
f01017eb:	75 d0                	jne    f01017bd <mem_init+0x5af>
		assert(c[i] == 0);

	// give free list back
	page_free_list = fl;
f01017ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01017f0:	a3 dc c1 17 f0       	mov    %eax,0xf017c1dc

	// free the pages we took
	page_free(pp0);
f01017f5:	89 34 24             	mov    %esi,(%esp)
f01017f8:	e8 03 f7 ff ff       	call   f0100f00 <page_free>
	page_free(pp1);
f01017fd:	89 3c 24             	mov    %edi,(%esp)
f0101800:	e8 fb f6 ff ff       	call   f0100f00 <page_free>
	page_free(pp2);
f0101805:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101808:	89 04 24             	mov    %eax,(%esp)
f010180b:	e8 f0 f6 ff ff       	call   f0100f00 <page_free>

	// number of free pages should be the same
	for (pp = page_free_list; pp; pp = pp->pp_link)
f0101810:	a1 dc c1 17 f0       	mov    0xf017c1dc,%eax
f0101815:	eb 05                	jmp    f010181c <mem_init+0x60e>
		--nfree;
f0101817:	83 eb 01             	sub    $0x1,%ebx
	page_free(pp0);
	page_free(pp1);
	page_free(pp2);

	// number of free pages should be the same
	for (pp = page_free_list; pp; pp = pp->pp_link)
f010181a:	8b 00                	mov    (%eax),%eax
f010181c:	85 c0                	test   %eax,%eax
f010181e:	75 f7                	jne    f0101817 <mem_init+0x609>
		--nfree;
	assert(nfree == 0);
f0101820:	85 db                	test   %ebx,%ebx
f0101822:	74 24                	je     f0101848 <mem_init+0x63a>
f0101824:	c7 44 24 0c 6b 50 10 	movl   $0xf010506b,0xc(%esp)
f010182b:	f0 
f010182c:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101833:	f0 
f0101834:	c7 44 24 04 f0 02 00 	movl   $0x2f0,0x4(%esp)
f010183b:	00 
f010183c:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101843:	e8 6e e8 ff ff       	call   f01000b6 <_panic>

	cprintf("check_page_alloc() succeeded!\n");
f0101848:	c7 04 24 14 53 10 f0 	movl   $0xf0105314,(%esp)
f010184f:	e8 d7 1c 00 00       	call   f010352b <cprintf>
	int i;
	extern pde_t entry_pgdir[];

	// should be able to allocate three pages
	pp0 = pp1 = pp2 = 0;
	assert((pp0 = page_alloc(0)));
f0101854:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f010185b:	e8 15 f6 ff ff       	call   f0100e75 <page_alloc>
f0101860:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0101863:	85 c0                	test   %eax,%eax
f0101865:	75 24                	jne    f010188b <mem_init+0x67d>
f0101867:	c7 44 24 0c 79 4f 10 	movl   $0xf0104f79,0xc(%esp)
f010186e:	f0 
f010186f:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101876:	f0 
f0101877:	c7 44 24 04 4e 03 00 	movl   $0x34e,0x4(%esp)
f010187e:	00 
f010187f:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101886:	e8 2b e8 ff ff       	call   f01000b6 <_panic>
	assert((pp1 = page_alloc(0)));
f010188b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f0101892:	e8 de f5 ff ff       	call   f0100e75 <page_alloc>
f0101897:	89 c3                	mov    %eax,%ebx
f0101899:	85 c0                	test   %eax,%eax
f010189b:	75 24                	jne    f01018c1 <mem_init+0x6b3>
f010189d:	c7 44 24 0c 8f 4f 10 	movl   $0xf0104f8f,0xc(%esp)
f01018a4:	f0 
f01018a5:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01018ac:	f0 
f01018ad:	c7 44 24 04 4f 03 00 	movl   $0x34f,0x4(%esp)
f01018b4:	00 
f01018b5:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01018bc:	e8 f5 e7 ff ff       	call   f01000b6 <_panic>
	assert((pp2 = page_alloc(0)));
f01018c1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f01018c8:	e8 a8 f5 ff ff       	call   f0100e75 <page_alloc>
f01018cd:	89 c6                	mov    %eax,%esi
f01018cf:	85 c0                	test   %eax,%eax
f01018d1:	75 24                	jne    f01018f7 <mem_init+0x6e9>
f01018d3:	c7 44 24 0c a5 4f 10 	movl   $0xf0104fa5,0xc(%esp)
f01018da:	f0 
f01018db:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01018e2:	f0 
f01018e3:	c7 44 24 04 50 03 00 	movl   $0x350,0x4(%esp)
f01018ea:	00 
f01018eb:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01018f2:	e8 bf e7 ff ff       	call   f01000b6 <_panic>

	assert(pp0);
	assert(pp1 && pp1 != pp0);
f01018f7:	39 5d d4             	cmp    %ebx,-0x2c(%ebp)
f01018fa:	75 24                	jne    f0101920 <mem_init+0x712>
f01018fc:	c7 44 24 0c bb 4f 10 	movl   $0xf0104fbb,0xc(%esp)
f0101903:	f0 
f0101904:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f010190b:	f0 
f010190c:	c7 44 24 04 53 03 00 	movl   $0x353,0x4(%esp)
f0101913:	00 
f0101914:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f010191b:	e8 96 e7 ff ff       	call   f01000b6 <_panic>
	assert(pp2 && pp2 != pp1 && pp2 != pp0);
f0101920:	39 c3                	cmp    %eax,%ebx
f0101922:	74 05                	je     f0101929 <mem_init+0x71b>
f0101924:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0101927:	75 24                	jne    f010194d <mem_init+0x73f>
f0101929:	c7 44 24 0c f4 52 10 	movl   $0xf01052f4,0xc(%esp)
f0101930:	f0 
f0101931:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101938:	f0 
f0101939:	c7 44 24 04 54 03 00 	movl   $0x354,0x4(%esp)
f0101940:	00 
f0101941:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101948:	e8 69 e7 ff ff       	call   f01000b6 <_panic>

	// temporarily steal the rest of the free pages
	fl = page_free_list;
f010194d:	a1 dc c1 17 f0       	mov    0xf017c1dc,%eax
f0101952:	89 45 d0             	mov    %eax,-0x30(%ebp)
	page_free_list = 0;
f0101955:	c7 05 dc c1 17 f0 00 	movl   $0x0,0xf017c1dc
f010195c:	00 00 00 

	// should be no free memory
	assert(!page_alloc(0));
f010195f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f0101966:	e8 0a f5 ff ff       	call   f0100e75 <page_alloc>
f010196b:	85 c0                	test   %eax,%eax
f010196d:	74 24                	je     f0101993 <mem_init+0x785>
f010196f:	c7 44 24 0c 24 50 10 	movl   $0xf0105024,0xc(%esp)
f0101976:	f0 
f0101977:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f010197e:	f0 
f010197f:	c7 44 24 04 5b 03 00 	movl   $0x35b,0x4(%esp)
f0101986:	00 
f0101987:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f010198e:	e8 23 e7 ff ff       	call   f01000b6 <_panic>

	// there is no page allocated at address 0
	assert(page_lookup(kern_pgdir, (void *) 0x0, &ptep) == NULL);
f0101993:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101996:	89 44 24 08          	mov    %eax,0x8(%esp)
f010199a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
f01019a1:	00 
f01019a2:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f01019a7:	89 04 24             	mov    %eax,(%esp)
f01019aa:	e8 35 f7 ff ff       	call   f01010e4 <page_lookup>
f01019af:	85 c0                	test   %eax,%eax
f01019b1:	74 24                	je     f01019d7 <mem_init+0x7c9>
f01019b3:	c7 44 24 0c 34 53 10 	movl   $0xf0105334,0xc(%esp)
f01019ba:	f0 
f01019bb:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01019c2:	f0 
f01019c3:	c7 44 24 04 5e 03 00 	movl   $0x35e,0x4(%esp)
f01019ca:	00 
f01019cb:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01019d2:	e8 df e6 ff ff       	call   f01000b6 <_panic>

	// there is no free memory, so we can't allocate a page table
	assert(page_insert(kern_pgdir, pp1, 0x0, PTE_W) < 0);
f01019d7:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
f01019de:	00 
f01019df:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
f01019e6:	00 
f01019e7:	89 5c 24 04          	mov    %ebx,0x4(%esp)
f01019eb:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f01019f0:	89 04 24             	mov    %eax,(%esp)
f01019f3:	e8 95 f7 ff ff       	call   f010118d <page_insert>
f01019f8:	85 c0                	test   %eax,%eax
f01019fa:	78 24                	js     f0101a20 <mem_init+0x812>
f01019fc:	c7 44 24 0c 6c 53 10 	movl   $0xf010536c,0xc(%esp)
f0101a03:	f0 
f0101a04:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101a0b:	f0 
f0101a0c:	c7 44 24 04 61 03 00 	movl   $0x361,0x4(%esp)
f0101a13:	00 
f0101a14:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101a1b:	e8 96 e6 ff ff       	call   f01000b6 <_panic>

	// free pp0 and try again: pp0 should be used for page table
	page_free(pp0);
f0101a20:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101a23:	89 04 24             	mov    %eax,(%esp)
f0101a26:	e8 d5 f4 ff ff       	call   f0100f00 <page_free>
	assert(page_insert(kern_pgdir, pp1, 0x0, PTE_W) == 0);
f0101a2b:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
f0101a32:	00 
f0101a33:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
f0101a3a:	00 
f0101a3b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
f0101a3f:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0101a44:	89 04 24             	mov    %eax,(%esp)
f0101a47:	e8 41 f7 ff ff       	call   f010118d <page_insert>
f0101a4c:	85 c0                	test   %eax,%eax
f0101a4e:	74 24                	je     f0101a74 <mem_init+0x866>
f0101a50:	c7 44 24 0c 9c 53 10 	movl   $0xf010539c,0xc(%esp)
f0101a57:	f0 
f0101a58:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101a5f:	f0 
f0101a60:	c7 44 24 04 65 03 00 	movl   $0x365,0x4(%esp)
f0101a67:	00 
f0101a68:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101a6f:	e8 42 e6 ff ff       	call   f01000b6 <_panic>
	assert(PTE_ADDR(kern_pgdir[0]) == page2pa(pp0));
f0101a74:	8b 3d a8 ce 17 f0    	mov    0xf017cea8,%edi
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
	return (pp - pages) << PGSHIFT;
f0101a7a:	a1 ac ce 17 f0       	mov    0xf017ceac,%eax
f0101a7f:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0101a82:	8b 17                	mov    (%edi),%edx
f0101a84:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
f0101a8a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
f0101a8d:	29 c1                	sub    %eax,%ecx
f0101a8f:	89 c8                	mov    %ecx,%eax
f0101a91:	c1 f8 03             	sar    $0x3,%eax
f0101a94:	c1 e0 0c             	shl    $0xc,%eax
f0101a97:	39 c2                	cmp    %eax,%edx
f0101a99:	74 24                	je     f0101abf <mem_init+0x8b1>
f0101a9b:	c7 44 24 0c cc 53 10 	movl   $0xf01053cc,0xc(%esp)
f0101aa2:	f0 
f0101aa3:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101aaa:	f0 
f0101aab:	c7 44 24 04 66 03 00 	movl   $0x366,0x4(%esp)
f0101ab2:	00 
f0101ab3:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101aba:	e8 f7 e5 ff ff       	call   f01000b6 <_panic>
	assert(check_va2pa(kern_pgdir, 0x0) == page2pa(pp1));
f0101abf:	ba 00 00 00 00       	mov    $0x0,%edx
f0101ac4:	89 f8                	mov    %edi,%eax
f0101ac6:	e8 89 ef ff ff       	call   f0100a54 <check_va2pa>
f0101acb:	89 da                	mov    %ebx,%edx
f0101acd:	2b 55 cc             	sub    -0x34(%ebp),%edx
f0101ad0:	c1 fa 03             	sar    $0x3,%edx
f0101ad3:	c1 e2 0c             	shl    $0xc,%edx
f0101ad6:	39 d0                	cmp    %edx,%eax
f0101ad8:	74 24                	je     f0101afe <mem_init+0x8f0>
f0101ada:	c7 44 24 0c f4 53 10 	movl   $0xf01053f4,0xc(%esp)
f0101ae1:	f0 
f0101ae2:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101ae9:	f0 
f0101aea:	c7 44 24 04 67 03 00 	movl   $0x367,0x4(%esp)
f0101af1:	00 
f0101af2:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101af9:	e8 b8 e5 ff ff       	call   f01000b6 <_panic>
	assert(pp1->pp_ref == 1);
f0101afe:	66 83 7b 04 01       	cmpw   $0x1,0x4(%ebx)
f0101b03:	74 24                	je     f0101b29 <mem_init+0x91b>
f0101b05:	c7 44 24 0c 76 50 10 	movl   $0xf0105076,0xc(%esp)
f0101b0c:	f0 
f0101b0d:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101b14:	f0 
f0101b15:	c7 44 24 04 68 03 00 	movl   $0x368,0x4(%esp)
f0101b1c:	00 
f0101b1d:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101b24:	e8 8d e5 ff ff       	call   f01000b6 <_panic>
	assert(pp0->pp_ref == 1);
f0101b29:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101b2c:	66 83 78 04 01       	cmpw   $0x1,0x4(%eax)
f0101b31:	74 24                	je     f0101b57 <mem_init+0x949>
f0101b33:	c7 44 24 0c 87 50 10 	movl   $0xf0105087,0xc(%esp)
f0101b3a:	f0 
f0101b3b:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101b42:	f0 
f0101b43:	c7 44 24 04 69 03 00 	movl   $0x369,0x4(%esp)
f0101b4a:	00 
f0101b4b:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101b52:	e8 5f e5 ff ff       	call   f01000b6 <_panic>

	// should be able to map pp2 at PGSIZE because pp0 is already allocated for page table
	assert(page_insert(kern_pgdir, pp2, (void*) PGSIZE, PTE_W) == 0);
f0101b57:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
f0101b5e:	00 
f0101b5f:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
f0101b66:	00 
f0101b67:	89 74 24 04          	mov    %esi,0x4(%esp)
f0101b6b:	89 3c 24             	mov    %edi,(%esp)
f0101b6e:	e8 1a f6 ff ff       	call   f010118d <page_insert>
f0101b73:	85 c0                	test   %eax,%eax
f0101b75:	74 24                	je     f0101b9b <mem_init+0x98d>
f0101b77:	c7 44 24 0c 24 54 10 	movl   $0xf0105424,0xc(%esp)
f0101b7e:	f0 
f0101b7f:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101b86:	f0 
f0101b87:	c7 44 24 04 6c 03 00 	movl   $0x36c,0x4(%esp)
f0101b8e:	00 
f0101b8f:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101b96:	e8 1b e5 ff ff       	call   f01000b6 <_panic>
	assert(check_va2pa(kern_pgdir, PGSIZE) == page2pa(pp2));
f0101b9b:	ba 00 10 00 00       	mov    $0x1000,%edx
f0101ba0:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0101ba5:	e8 aa ee ff ff       	call   f0100a54 <check_va2pa>
f0101baa:	89 f2                	mov    %esi,%edx
f0101bac:	2b 15 ac ce 17 f0    	sub    0xf017ceac,%edx
f0101bb2:	c1 fa 03             	sar    $0x3,%edx
f0101bb5:	c1 e2 0c             	shl    $0xc,%edx
f0101bb8:	39 d0                	cmp    %edx,%eax
f0101bba:	74 24                	je     f0101be0 <mem_init+0x9d2>
f0101bbc:	c7 44 24 0c 60 54 10 	movl   $0xf0105460,0xc(%esp)
f0101bc3:	f0 
f0101bc4:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101bcb:	f0 
f0101bcc:	c7 44 24 04 6d 03 00 	movl   $0x36d,0x4(%esp)
f0101bd3:	00 
f0101bd4:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101bdb:	e8 d6 e4 ff ff       	call   f01000b6 <_panic>
	assert(pp2->pp_ref == 1);
f0101be0:	66 83 7e 04 01       	cmpw   $0x1,0x4(%esi)
f0101be5:	74 24                	je     f0101c0b <mem_init+0x9fd>
f0101be7:	c7 44 24 0c 98 50 10 	movl   $0xf0105098,0xc(%esp)
f0101bee:	f0 
f0101bef:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101bf6:	f0 
f0101bf7:	c7 44 24 04 6e 03 00 	movl   $0x36e,0x4(%esp)
f0101bfe:	00 
f0101bff:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101c06:	e8 ab e4 ff ff       	call   f01000b6 <_panic>

	// should be no free memory
	assert(!page_alloc(0));
f0101c0b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f0101c12:	e8 5e f2 ff ff       	call   f0100e75 <page_alloc>
f0101c17:	85 c0                	test   %eax,%eax
f0101c19:	74 24                	je     f0101c3f <mem_init+0xa31>
f0101c1b:	c7 44 24 0c 24 50 10 	movl   $0xf0105024,0xc(%esp)
f0101c22:	f0 
f0101c23:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101c2a:	f0 
f0101c2b:	c7 44 24 04 71 03 00 	movl   $0x371,0x4(%esp)
f0101c32:	00 
f0101c33:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101c3a:	e8 77 e4 ff ff       	call   f01000b6 <_panic>

	// should be able to map pp2 at PGSIZE because it's already there
	assert(page_insert(kern_pgdir, pp2, (void*) PGSIZE, PTE_W) == 0);
f0101c3f:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
f0101c46:	00 
f0101c47:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
f0101c4e:	00 
f0101c4f:	89 74 24 04          	mov    %esi,0x4(%esp)
f0101c53:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0101c58:	89 04 24             	mov    %eax,(%esp)
f0101c5b:	e8 2d f5 ff ff       	call   f010118d <page_insert>
f0101c60:	85 c0                	test   %eax,%eax
f0101c62:	74 24                	je     f0101c88 <mem_init+0xa7a>
f0101c64:	c7 44 24 0c 24 54 10 	movl   $0xf0105424,0xc(%esp)
f0101c6b:	f0 
f0101c6c:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101c73:	f0 
f0101c74:	c7 44 24 04 74 03 00 	movl   $0x374,0x4(%esp)
f0101c7b:	00 
f0101c7c:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101c83:	e8 2e e4 ff ff       	call   f01000b6 <_panic>
	assert(check_va2pa(kern_pgdir, PGSIZE) == page2pa(pp2));
f0101c88:	ba 00 10 00 00       	mov    $0x1000,%edx
f0101c8d:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0101c92:	e8 bd ed ff ff       	call   f0100a54 <check_va2pa>
f0101c97:	89 f2                	mov    %esi,%edx
f0101c99:	2b 15 ac ce 17 f0    	sub    0xf017ceac,%edx
f0101c9f:	c1 fa 03             	sar    $0x3,%edx
f0101ca2:	c1 e2 0c             	shl    $0xc,%edx
f0101ca5:	39 d0                	cmp    %edx,%eax
f0101ca7:	74 24                	je     f0101ccd <mem_init+0xabf>
f0101ca9:	c7 44 24 0c 60 54 10 	movl   $0xf0105460,0xc(%esp)
f0101cb0:	f0 
f0101cb1:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101cb8:	f0 
f0101cb9:	c7 44 24 04 75 03 00 	movl   $0x375,0x4(%esp)
f0101cc0:	00 
f0101cc1:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101cc8:	e8 e9 e3 ff ff       	call   f01000b6 <_panic>
	assert(pp2->pp_ref == 1);
f0101ccd:	66 83 7e 04 01       	cmpw   $0x1,0x4(%esi)
f0101cd2:	74 24                	je     f0101cf8 <mem_init+0xaea>
f0101cd4:	c7 44 24 0c 98 50 10 	movl   $0xf0105098,0xc(%esp)
f0101cdb:	f0 
f0101cdc:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101ce3:	f0 
f0101ce4:	c7 44 24 04 76 03 00 	movl   $0x376,0x4(%esp)
f0101ceb:	00 
f0101cec:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101cf3:	e8 be e3 ff ff       	call   f01000b6 <_panic>

	// pp2 should NOT be on the free list
	// could happen in ref counts are handled sloppily in page_insert
	assert(!page_alloc(0));
f0101cf8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f0101cff:	e8 71 f1 ff ff       	call   f0100e75 <page_alloc>
f0101d04:	85 c0                	test   %eax,%eax
f0101d06:	74 24                	je     f0101d2c <mem_init+0xb1e>
f0101d08:	c7 44 24 0c 24 50 10 	movl   $0xf0105024,0xc(%esp)
f0101d0f:	f0 
f0101d10:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101d17:	f0 
f0101d18:	c7 44 24 04 7a 03 00 	movl   $0x37a,0x4(%esp)
f0101d1f:	00 
f0101d20:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101d27:	e8 8a e3 ff ff       	call   f01000b6 <_panic>

	// check that pgdir_walk returns a pointer to the pte
	ptep = (pte_t *) KADDR(PTE_ADDR(kern_pgdir[PDX(PGSIZE)]));
f0101d2c:	8b 15 a8 ce 17 f0    	mov    0xf017cea8,%edx
f0101d32:	8b 02                	mov    (%edx),%eax
f0101d34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f0101d39:	89 c1                	mov    %eax,%ecx
f0101d3b:	c1 e9 0c             	shr    $0xc,%ecx
f0101d3e:	3b 0d a4 ce 17 f0    	cmp    0xf017cea4,%ecx
f0101d44:	72 20                	jb     f0101d66 <mem_init+0xb58>
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f0101d46:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0101d4a:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f0101d51:	f0 
f0101d52:	c7 44 24 04 7d 03 00 	movl   $0x37d,0x4(%esp)
f0101d59:	00 
f0101d5a:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101d61:	e8 50 e3 ff ff       	call   f01000b6 <_panic>
	return (void *)(pa + KERNBASE);
f0101d66:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101d6b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	assert(pgdir_walk(kern_pgdir, (void*)PGSIZE, 0) == ptep+PTX(PGSIZE));
f0101d6e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
f0101d75:	00 
f0101d76:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
f0101d7d:	00 
f0101d7e:	89 14 24             	mov    %edx,(%esp)
f0101d81:	e8 da f1 ff ff       	call   f0100f60 <pgdir_walk>
f0101d86:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f0101d89:	8d 51 04             	lea    0x4(%ecx),%edx
f0101d8c:	39 d0                	cmp    %edx,%eax
f0101d8e:	74 24                	je     f0101db4 <mem_init+0xba6>
f0101d90:	c7 44 24 0c 90 54 10 	movl   $0xf0105490,0xc(%esp)
f0101d97:	f0 
f0101d98:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101d9f:	f0 
f0101da0:	c7 44 24 04 7e 03 00 	movl   $0x37e,0x4(%esp)
f0101da7:	00 
f0101da8:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101daf:	e8 02 e3 ff ff       	call   f01000b6 <_panic>

	// should be able to change permissions too.
	assert(page_insert(kern_pgdir, pp2, (void*) PGSIZE, PTE_W|PTE_U) == 0);
f0101db4:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
f0101dbb:	00 
f0101dbc:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
f0101dc3:	00 
f0101dc4:	89 74 24 04          	mov    %esi,0x4(%esp)
f0101dc8:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0101dcd:	89 04 24             	mov    %eax,(%esp)
f0101dd0:	e8 b8 f3 ff ff       	call   f010118d <page_insert>
f0101dd5:	85 c0                	test   %eax,%eax
f0101dd7:	74 24                	je     f0101dfd <mem_init+0xbef>
f0101dd9:	c7 44 24 0c d0 54 10 	movl   $0xf01054d0,0xc(%esp)
f0101de0:	f0 
f0101de1:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101de8:	f0 
f0101de9:	c7 44 24 04 81 03 00 	movl   $0x381,0x4(%esp)
f0101df0:	00 
f0101df1:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101df8:	e8 b9 e2 ff ff       	call   f01000b6 <_panic>
	assert(check_va2pa(kern_pgdir, PGSIZE) == page2pa(pp2));
f0101dfd:	8b 3d a8 ce 17 f0    	mov    0xf017cea8,%edi
f0101e03:	ba 00 10 00 00       	mov    $0x1000,%edx
f0101e08:	89 f8                	mov    %edi,%eax
f0101e0a:	e8 45 ec ff ff       	call   f0100a54 <check_va2pa>
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
	return (pp - pages) << PGSHIFT;
f0101e0f:	89 f2                	mov    %esi,%edx
f0101e11:	2b 15 ac ce 17 f0    	sub    0xf017ceac,%edx
f0101e17:	c1 fa 03             	sar    $0x3,%edx
f0101e1a:	c1 e2 0c             	shl    $0xc,%edx
f0101e1d:	39 d0                	cmp    %edx,%eax
f0101e1f:	74 24                	je     f0101e45 <mem_init+0xc37>
f0101e21:	c7 44 24 0c 60 54 10 	movl   $0xf0105460,0xc(%esp)
f0101e28:	f0 
f0101e29:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101e30:	f0 
f0101e31:	c7 44 24 04 82 03 00 	movl   $0x382,0x4(%esp)
f0101e38:	00 
f0101e39:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101e40:	e8 71 e2 ff ff       	call   f01000b6 <_panic>
	assert(pp2->pp_ref == 1);
f0101e45:	66 83 7e 04 01       	cmpw   $0x1,0x4(%esi)
f0101e4a:	74 24                	je     f0101e70 <mem_init+0xc62>
f0101e4c:	c7 44 24 0c 98 50 10 	movl   $0xf0105098,0xc(%esp)
f0101e53:	f0 
f0101e54:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101e5b:	f0 
f0101e5c:	c7 44 24 04 83 03 00 	movl   $0x383,0x4(%esp)
f0101e63:	00 
f0101e64:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101e6b:	e8 46 e2 ff ff       	call   f01000b6 <_panic>
	assert(*pgdir_walk(kern_pgdir, (void*) PGSIZE, 0) & PTE_U);
f0101e70:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
f0101e77:	00 
f0101e78:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
f0101e7f:	00 
f0101e80:	89 3c 24             	mov    %edi,(%esp)
f0101e83:	e8 d8 f0 ff ff       	call   f0100f60 <pgdir_walk>
f0101e88:	f6 00 04             	testb  $0x4,(%eax)
f0101e8b:	75 24                	jne    f0101eb1 <mem_init+0xca3>
f0101e8d:	c7 44 24 0c 10 55 10 	movl   $0xf0105510,0xc(%esp)
f0101e94:	f0 
f0101e95:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101e9c:	f0 
f0101e9d:	c7 44 24 04 84 03 00 	movl   $0x384,0x4(%esp)
f0101ea4:	00 
f0101ea5:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101eac:	e8 05 e2 ff ff       	call   f01000b6 <_panic>
	assert(kern_pgdir[0] & PTE_U);
f0101eb1:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0101eb6:	f6 00 04             	testb  $0x4,(%eax)
f0101eb9:	75 24                	jne    f0101edf <mem_init+0xcd1>
f0101ebb:	c7 44 24 0c a9 50 10 	movl   $0xf01050a9,0xc(%esp)
f0101ec2:	f0 
f0101ec3:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101eca:	f0 
f0101ecb:	c7 44 24 04 85 03 00 	movl   $0x385,0x4(%esp)
f0101ed2:	00 
f0101ed3:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101eda:	e8 d7 e1 ff ff       	call   f01000b6 <_panic>

	// should be able to remap with fewer permissions
	assert(page_insert(kern_pgdir, pp2, (void*) PGSIZE, PTE_W) == 0);
f0101edf:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
f0101ee6:	00 
f0101ee7:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
f0101eee:	00 
f0101eef:	89 74 24 04          	mov    %esi,0x4(%esp)
f0101ef3:	89 04 24             	mov    %eax,(%esp)
f0101ef6:	e8 92 f2 ff ff       	call   f010118d <page_insert>
f0101efb:	85 c0                	test   %eax,%eax
f0101efd:	74 24                	je     f0101f23 <mem_init+0xd15>
f0101eff:	c7 44 24 0c 24 54 10 	movl   $0xf0105424,0xc(%esp)
f0101f06:	f0 
f0101f07:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101f0e:	f0 
f0101f0f:	c7 44 24 04 88 03 00 	movl   $0x388,0x4(%esp)
f0101f16:	00 
f0101f17:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101f1e:	e8 93 e1 ff ff       	call   f01000b6 <_panic>
	assert(*pgdir_walk(kern_pgdir, (void*) PGSIZE, 0) & PTE_W);
f0101f23:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
f0101f2a:	00 
f0101f2b:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
f0101f32:	00 
f0101f33:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0101f38:	89 04 24             	mov    %eax,(%esp)
f0101f3b:	e8 20 f0 ff ff       	call   f0100f60 <pgdir_walk>
f0101f40:	f6 00 02             	testb  $0x2,(%eax)
f0101f43:	75 24                	jne    f0101f69 <mem_init+0xd5b>
f0101f45:	c7 44 24 0c 44 55 10 	movl   $0xf0105544,0xc(%esp)
f0101f4c:	f0 
f0101f4d:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101f54:	f0 
f0101f55:	c7 44 24 04 89 03 00 	movl   $0x389,0x4(%esp)
f0101f5c:	00 
f0101f5d:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101f64:	e8 4d e1 ff ff       	call   f01000b6 <_panic>
	assert(!(*pgdir_walk(kern_pgdir, (void*) PGSIZE, 0) & PTE_U));
f0101f69:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
f0101f70:	00 
f0101f71:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
f0101f78:	00 
f0101f79:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0101f7e:	89 04 24             	mov    %eax,(%esp)
f0101f81:	e8 da ef ff ff       	call   f0100f60 <pgdir_walk>
f0101f86:	f6 00 04             	testb  $0x4,(%eax)
f0101f89:	74 24                	je     f0101faf <mem_init+0xda1>
f0101f8b:	c7 44 24 0c 78 55 10 	movl   $0xf0105578,0xc(%esp)
f0101f92:	f0 
f0101f93:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101f9a:	f0 
f0101f9b:	c7 44 24 04 8a 03 00 	movl   $0x38a,0x4(%esp)
f0101fa2:	00 
f0101fa3:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101faa:	e8 07 e1 ff ff       	call   f01000b6 <_panic>

	// should not be able to map at PTSIZE because need free page for page table
	assert(page_insert(kern_pgdir, pp0, (void*) PTSIZE, PTE_W) < 0);
f0101faf:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
f0101fb6:	00 
f0101fb7:	c7 44 24 08 00 00 40 	movl   $0x400000,0x8(%esp)
f0101fbe:	00 
f0101fbf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101fc2:	89 44 24 04          	mov    %eax,0x4(%esp)
f0101fc6:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0101fcb:	89 04 24             	mov    %eax,(%esp)
f0101fce:	e8 ba f1 ff ff       	call   f010118d <page_insert>
f0101fd3:	85 c0                	test   %eax,%eax
f0101fd5:	78 24                	js     f0101ffb <mem_init+0xded>
f0101fd7:	c7 44 24 0c b0 55 10 	movl   $0xf01055b0,0xc(%esp)
f0101fde:	f0 
f0101fdf:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0101fe6:	f0 
f0101fe7:	c7 44 24 04 8d 03 00 	movl   $0x38d,0x4(%esp)
f0101fee:	00 
f0101fef:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0101ff6:	e8 bb e0 ff ff       	call   f01000b6 <_panic>

	// insert pp1 at PGSIZE (replacing pp2)
	assert(page_insert(kern_pgdir, pp1, (void*) PGSIZE, PTE_W) == 0);
f0101ffb:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
f0102002:	00 
f0102003:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
f010200a:	00 
f010200b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
f010200f:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0102014:	89 04 24             	mov    %eax,(%esp)
f0102017:	e8 71 f1 ff ff       	call   f010118d <page_insert>
f010201c:	85 c0                	test   %eax,%eax
f010201e:	74 24                	je     f0102044 <mem_init+0xe36>
f0102020:	c7 44 24 0c e8 55 10 	movl   $0xf01055e8,0xc(%esp)
f0102027:	f0 
f0102028:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f010202f:	f0 
f0102030:	c7 44 24 04 90 03 00 	movl   $0x390,0x4(%esp)
f0102037:	00 
f0102038:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f010203f:	e8 72 e0 ff ff       	call   f01000b6 <_panic>
	assert(!(*pgdir_walk(kern_pgdir, (void*) PGSIZE, 0) & PTE_U));
f0102044:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
f010204b:	00 
f010204c:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
f0102053:	00 
f0102054:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0102059:	89 04 24             	mov    %eax,(%esp)
f010205c:	e8 ff ee ff ff       	call   f0100f60 <pgdir_walk>
f0102061:	f6 00 04             	testb  $0x4,(%eax)
f0102064:	74 24                	je     f010208a <mem_init+0xe7c>
f0102066:	c7 44 24 0c 78 55 10 	movl   $0xf0105578,0xc(%esp)
f010206d:	f0 
f010206e:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102075:	f0 
f0102076:	c7 44 24 04 91 03 00 	movl   $0x391,0x4(%esp)
f010207d:	00 
f010207e:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102085:	e8 2c e0 ff ff       	call   f01000b6 <_panic>

	// should have pp1 at both 0 and PGSIZE, pp2 nowhere, ...
	assert(check_va2pa(kern_pgdir, 0) == page2pa(pp1));
f010208a:	8b 3d a8 ce 17 f0    	mov    0xf017cea8,%edi
f0102090:	ba 00 00 00 00       	mov    $0x0,%edx
f0102095:	89 f8                	mov    %edi,%eax
f0102097:	e8 b8 e9 ff ff       	call   f0100a54 <check_va2pa>
f010209c:	89 c1                	mov    %eax,%ecx
f010209e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01020a1:	89 d8                	mov    %ebx,%eax
f01020a3:	2b 05 ac ce 17 f0    	sub    0xf017ceac,%eax
f01020a9:	c1 f8 03             	sar    $0x3,%eax
f01020ac:	c1 e0 0c             	shl    $0xc,%eax
f01020af:	39 c1                	cmp    %eax,%ecx
f01020b1:	74 24                	je     f01020d7 <mem_init+0xec9>
f01020b3:	c7 44 24 0c 24 56 10 	movl   $0xf0105624,0xc(%esp)
f01020ba:	f0 
f01020bb:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01020c2:	f0 
f01020c3:	c7 44 24 04 94 03 00 	movl   $0x394,0x4(%esp)
f01020ca:	00 
f01020cb:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01020d2:	e8 df df ff ff       	call   f01000b6 <_panic>
	assert(check_va2pa(kern_pgdir, PGSIZE) == page2pa(pp1));
f01020d7:	ba 00 10 00 00       	mov    $0x1000,%edx
f01020dc:	89 f8                	mov    %edi,%eax
f01020de:	e8 71 e9 ff ff       	call   f0100a54 <check_va2pa>
f01020e3:	39 45 cc             	cmp    %eax,-0x34(%ebp)
f01020e6:	74 24                	je     f010210c <mem_init+0xefe>
f01020e8:	c7 44 24 0c 50 56 10 	movl   $0xf0105650,0xc(%esp)
f01020ef:	f0 
f01020f0:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01020f7:	f0 
f01020f8:	c7 44 24 04 95 03 00 	movl   $0x395,0x4(%esp)
f01020ff:	00 
f0102100:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102107:	e8 aa df ff ff       	call   f01000b6 <_panic>
	// ... and ref counts should reflect this
	assert(pp1->pp_ref == 2);
f010210c:	66 83 7b 04 02       	cmpw   $0x2,0x4(%ebx)
f0102111:	74 24                	je     f0102137 <mem_init+0xf29>
f0102113:	c7 44 24 0c bf 50 10 	movl   $0xf01050bf,0xc(%esp)
f010211a:	f0 
f010211b:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102122:	f0 
f0102123:	c7 44 24 04 97 03 00 	movl   $0x397,0x4(%esp)
f010212a:	00 
f010212b:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102132:	e8 7f df ff ff       	call   f01000b6 <_panic>
	assert(pp2->pp_ref == 0);
f0102137:	66 83 7e 04 00       	cmpw   $0x0,0x4(%esi)
f010213c:	74 24                	je     f0102162 <mem_init+0xf54>
f010213e:	c7 44 24 0c d0 50 10 	movl   $0xf01050d0,0xc(%esp)
f0102145:	f0 
f0102146:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f010214d:	f0 
f010214e:	c7 44 24 04 98 03 00 	movl   $0x398,0x4(%esp)
f0102155:	00 
f0102156:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f010215d:	e8 54 df ff ff       	call   f01000b6 <_panic>

	// pp2 should be returned by page_alloc
	assert((pp = page_alloc(0)) && pp == pp2);
f0102162:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f0102169:	e8 07 ed ff ff       	call   f0100e75 <page_alloc>
f010216e:	85 c0                	test   %eax,%eax
f0102170:	74 04                	je     f0102176 <mem_init+0xf68>
f0102172:	39 c6                	cmp    %eax,%esi
f0102174:	74 24                	je     f010219a <mem_init+0xf8c>
f0102176:	c7 44 24 0c 80 56 10 	movl   $0xf0105680,0xc(%esp)
f010217d:	f0 
f010217e:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102185:	f0 
f0102186:	c7 44 24 04 9b 03 00 	movl   $0x39b,0x4(%esp)
f010218d:	00 
f010218e:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102195:	e8 1c df ff ff       	call   f01000b6 <_panic>

	// unmapping pp1 at 0 should keep pp1 at PGSIZE
	page_remove(kern_pgdir, 0x0);
f010219a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
f01021a1:	00 
f01021a2:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f01021a7:	89 04 24             	mov    %eax,(%esp)
f01021aa:	e8 99 ef ff ff       	call   f0101148 <page_remove>
	assert(check_va2pa(kern_pgdir, 0x0) == ~0);
f01021af:	8b 3d a8 ce 17 f0    	mov    0xf017cea8,%edi
f01021b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01021ba:	89 f8                	mov    %edi,%eax
f01021bc:	e8 93 e8 ff ff       	call   f0100a54 <check_va2pa>
f01021c1:	83 f8 ff             	cmp    $0xffffffff,%eax
f01021c4:	74 24                	je     f01021ea <mem_init+0xfdc>
f01021c6:	c7 44 24 0c a4 56 10 	movl   $0xf01056a4,0xc(%esp)
f01021cd:	f0 
f01021ce:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01021d5:	f0 
f01021d6:	c7 44 24 04 9f 03 00 	movl   $0x39f,0x4(%esp)
f01021dd:	00 
f01021de:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01021e5:	e8 cc de ff ff       	call   f01000b6 <_panic>
	assert(check_va2pa(kern_pgdir, PGSIZE) == page2pa(pp1));
f01021ea:	ba 00 10 00 00       	mov    $0x1000,%edx
f01021ef:	89 f8                	mov    %edi,%eax
f01021f1:	e8 5e e8 ff ff       	call   f0100a54 <check_va2pa>
f01021f6:	89 da                	mov    %ebx,%edx
f01021f8:	2b 15 ac ce 17 f0    	sub    0xf017ceac,%edx
f01021fe:	c1 fa 03             	sar    $0x3,%edx
f0102201:	c1 e2 0c             	shl    $0xc,%edx
f0102204:	39 d0                	cmp    %edx,%eax
f0102206:	74 24                	je     f010222c <mem_init+0x101e>
f0102208:	c7 44 24 0c 50 56 10 	movl   $0xf0105650,0xc(%esp)
f010220f:	f0 
f0102210:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102217:	f0 
f0102218:	c7 44 24 04 a0 03 00 	movl   $0x3a0,0x4(%esp)
f010221f:	00 
f0102220:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102227:	e8 8a de ff ff       	call   f01000b6 <_panic>
	assert(pp1->pp_ref == 1);
f010222c:	66 83 7b 04 01       	cmpw   $0x1,0x4(%ebx)
f0102231:	74 24                	je     f0102257 <mem_init+0x1049>
f0102233:	c7 44 24 0c 76 50 10 	movl   $0xf0105076,0xc(%esp)
f010223a:	f0 
f010223b:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102242:	f0 
f0102243:	c7 44 24 04 a1 03 00 	movl   $0x3a1,0x4(%esp)
f010224a:	00 
f010224b:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102252:	e8 5f de ff ff       	call   f01000b6 <_panic>
	assert(pp2->pp_ref == 0);
f0102257:	66 83 7e 04 00       	cmpw   $0x0,0x4(%esi)
f010225c:	74 24                	je     f0102282 <mem_init+0x1074>
f010225e:	c7 44 24 0c d0 50 10 	movl   $0xf01050d0,0xc(%esp)
f0102265:	f0 
f0102266:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f010226d:	f0 
f010226e:	c7 44 24 04 a2 03 00 	movl   $0x3a2,0x4(%esp)
f0102275:	00 
f0102276:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f010227d:	e8 34 de ff ff       	call   f01000b6 <_panic>

	// test re-inserting pp1 at PGSIZE
	assert(page_insert(kern_pgdir, pp1, (void*) PGSIZE, 0) == 0);
f0102282:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
f0102289:	00 
f010228a:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
f0102291:	00 
f0102292:	89 5c 24 04          	mov    %ebx,0x4(%esp)
f0102296:	89 3c 24             	mov    %edi,(%esp)
f0102299:	e8 ef ee ff ff       	call   f010118d <page_insert>
f010229e:	85 c0                	test   %eax,%eax
f01022a0:	74 24                	je     f01022c6 <mem_init+0x10b8>
f01022a2:	c7 44 24 0c c8 56 10 	movl   $0xf01056c8,0xc(%esp)
f01022a9:	f0 
f01022aa:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01022b1:	f0 
f01022b2:	c7 44 24 04 a5 03 00 	movl   $0x3a5,0x4(%esp)
f01022b9:	00 
f01022ba:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01022c1:	e8 f0 dd ff ff       	call   f01000b6 <_panic>
	assert(pp1->pp_ref);
f01022c6:	66 83 7b 04 00       	cmpw   $0x0,0x4(%ebx)
f01022cb:	75 24                	jne    f01022f1 <mem_init+0x10e3>
f01022cd:	c7 44 24 0c e1 50 10 	movl   $0xf01050e1,0xc(%esp)
f01022d4:	f0 
f01022d5:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01022dc:	f0 
f01022dd:	c7 44 24 04 a6 03 00 	movl   $0x3a6,0x4(%esp)
f01022e4:	00 
f01022e5:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01022ec:	e8 c5 dd ff ff       	call   f01000b6 <_panic>
	assert(pp1->pp_link == NULL);
f01022f1:	83 3b 00             	cmpl   $0x0,(%ebx)
f01022f4:	74 24                	je     f010231a <mem_init+0x110c>
f01022f6:	c7 44 24 0c ed 50 10 	movl   $0xf01050ed,0xc(%esp)
f01022fd:	f0 
f01022fe:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102305:	f0 
f0102306:	c7 44 24 04 a7 03 00 	movl   $0x3a7,0x4(%esp)
f010230d:	00 
f010230e:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102315:	e8 9c dd ff ff       	call   f01000b6 <_panic>

	// unmapping pp1 at PGSIZE should free it
	page_remove(kern_pgdir, (void*) PGSIZE);
f010231a:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
f0102321:	00 
f0102322:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0102327:	89 04 24             	mov    %eax,(%esp)
f010232a:	e8 19 ee ff ff       	call   f0101148 <page_remove>
	assert(check_va2pa(kern_pgdir, 0x0) == ~0);
f010232f:	8b 3d a8 ce 17 f0    	mov    0xf017cea8,%edi
f0102335:	ba 00 00 00 00       	mov    $0x0,%edx
f010233a:	89 f8                	mov    %edi,%eax
f010233c:	e8 13 e7 ff ff       	call   f0100a54 <check_va2pa>
f0102341:	83 f8 ff             	cmp    $0xffffffff,%eax
f0102344:	74 24                	je     f010236a <mem_init+0x115c>
f0102346:	c7 44 24 0c a4 56 10 	movl   $0xf01056a4,0xc(%esp)
f010234d:	f0 
f010234e:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102355:	f0 
f0102356:	c7 44 24 04 ab 03 00 	movl   $0x3ab,0x4(%esp)
f010235d:	00 
f010235e:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102365:	e8 4c dd ff ff       	call   f01000b6 <_panic>
	assert(check_va2pa(kern_pgdir, PGSIZE) == ~0);
f010236a:	ba 00 10 00 00       	mov    $0x1000,%edx
f010236f:	89 f8                	mov    %edi,%eax
f0102371:	e8 de e6 ff ff       	call   f0100a54 <check_va2pa>
f0102376:	83 f8 ff             	cmp    $0xffffffff,%eax
f0102379:	74 24                	je     f010239f <mem_init+0x1191>
f010237b:	c7 44 24 0c 00 57 10 	movl   $0xf0105700,0xc(%esp)
f0102382:	f0 
f0102383:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f010238a:	f0 
f010238b:	c7 44 24 04 ac 03 00 	movl   $0x3ac,0x4(%esp)
f0102392:	00 
f0102393:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f010239a:	e8 17 dd ff ff       	call   f01000b6 <_panic>
	assert(pp1->pp_ref == 0);
f010239f:	66 83 7b 04 00       	cmpw   $0x0,0x4(%ebx)
f01023a4:	74 24                	je     f01023ca <mem_init+0x11bc>
f01023a6:	c7 44 24 0c 02 51 10 	movl   $0xf0105102,0xc(%esp)
f01023ad:	f0 
f01023ae:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01023b5:	f0 
f01023b6:	c7 44 24 04 ad 03 00 	movl   $0x3ad,0x4(%esp)
f01023bd:	00 
f01023be:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01023c5:	e8 ec dc ff ff       	call   f01000b6 <_panic>
	assert(pp2->pp_ref == 0);
f01023ca:	66 83 7e 04 00       	cmpw   $0x0,0x4(%esi)
f01023cf:	74 24                	je     f01023f5 <mem_init+0x11e7>
f01023d1:	c7 44 24 0c d0 50 10 	movl   $0xf01050d0,0xc(%esp)
f01023d8:	f0 
f01023d9:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01023e0:	f0 
f01023e1:	c7 44 24 04 ae 03 00 	movl   $0x3ae,0x4(%esp)
f01023e8:	00 
f01023e9:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01023f0:	e8 c1 dc ff ff       	call   f01000b6 <_panic>

	// so it should be returned by page_alloc
	assert((pp = page_alloc(0)) && pp == pp1);
f01023f5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f01023fc:	e8 74 ea ff ff       	call   f0100e75 <page_alloc>
f0102401:	85 c0                	test   %eax,%eax
f0102403:	74 04                	je     f0102409 <mem_init+0x11fb>
f0102405:	39 c3                	cmp    %eax,%ebx
f0102407:	74 24                	je     f010242d <mem_init+0x121f>
f0102409:	c7 44 24 0c 28 57 10 	movl   $0xf0105728,0xc(%esp)
f0102410:	f0 
f0102411:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102418:	f0 
f0102419:	c7 44 24 04 b1 03 00 	movl   $0x3b1,0x4(%esp)
f0102420:	00 
f0102421:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102428:	e8 89 dc ff ff       	call   f01000b6 <_panic>

	// should be no free memory
	assert(!page_alloc(0));
f010242d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f0102434:	e8 3c ea ff ff       	call   f0100e75 <page_alloc>
f0102439:	85 c0                	test   %eax,%eax
f010243b:	74 24                	je     f0102461 <mem_init+0x1253>
f010243d:	c7 44 24 0c 24 50 10 	movl   $0xf0105024,0xc(%esp)
f0102444:	f0 
f0102445:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f010244c:	f0 
f010244d:	c7 44 24 04 b4 03 00 	movl   $0x3b4,0x4(%esp)
f0102454:	00 
f0102455:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f010245c:	e8 55 dc ff ff       	call   f01000b6 <_panic>

	// forcibly take pp0 back
	assert(PTE_ADDR(kern_pgdir[0]) == page2pa(pp0));
f0102461:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0102466:	8b 08                	mov    (%eax),%ecx
f0102468:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f010246e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0102471:	2b 15 ac ce 17 f0    	sub    0xf017ceac,%edx
f0102477:	c1 fa 03             	sar    $0x3,%edx
f010247a:	c1 e2 0c             	shl    $0xc,%edx
f010247d:	39 d1                	cmp    %edx,%ecx
f010247f:	74 24                	je     f01024a5 <mem_init+0x1297>
f0102481:	c7 44 24 0c cc 53 10 	movl   $0xf01053cc,0xc(%esp)
f0102488:	f0 
f0102489:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102490:	f0 
f0102491:	c7 44 24 04 b7 03 00 	movl   $0x3b7,0x4(%esp)
f0102498:	00 
f0102499:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01024a0:	e8 11 dc ff ff       	call   f01000b6 <_panic>
	kern_pgdir[0] = 0;
f01024a5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	assert(pp0->pp_ref == 1);
f01024ab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01024ae:	66 83 78 04 01       	cmpw   $0x1,0x4(%eax)
f01024b3:	74 24                	je     f01024d9 <mem_init+0x12cb>
f01024b5:	c7 44 24 0c 87 50 10 	movl   $0xf0105087,0xc(%esp)
f01024bc:	f0 
f01024bd:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01024c4:	f0 
f01024c5:	c7 44 24 04 b9 03 00 	movl   $0x3b9,0x4(%esp)
f01024cc:	00 
f01024cd:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01024d4:	e8 dd db ff ff       	call   f01000b6 <_panic>
	pp0->pp_ref = 0;
f01024d9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01024dc:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)

	// check pointer arithmetic in pgdir_walk
	page_free(pp0);
f01024e2:	89 04 24             	mov    %eax,(%esp)
f01024e5:	e8 16 ea ff ff       	call   f0100f00 <page_free>
	va = (void*)(PGSIZE * NPDENTRIES + PGSIZE);
	ptep = pgdir_walk(kern_pgdir, va, 1);
f01024ea:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
f01024f1:	00 
f01024f2:	c7 44 24 04 00 10 40 	movl   $0x401000,0x4(%esp)
f01024f9:	00 
f01024fa:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f01024ff:	89 04 24             	mov    %eax,(%esp)
f0102502:	e8 59 ea ff ff       	call   f0100f60 <pgdir_walk>
f0102507:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010250a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	ptep1 = (pte_t *) KADDR(PTE_ADDR(kern_pgdir[PDX(va)]));
f010250d:	8b 15 a8 ce 17 f0    	mov    0xf017cea8,%edx
f0102513:	8b 7a 04             	mov    0x4(%edx),%edi
f0102516:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f010251c:	8b 0d a4 ce 17 f0    	mov    0xf017cea4,%ecx
f0102522:	89 f8                	mov    %edi,%eax
f0102524:	c1 e8 0c             	shr    $0xc,%eax
f0102527:	39 c8                	cmp    %ecx,%eax
f0102529:	72 20                	jb     f010254b <mem_init+0x133d>
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f010252b:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f010252f:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f0102536:	f0 
f0102537:	c7 44 24 04 c0 03 00 	movl   $0x3c0,0x4(%esp)
f010253e:	00 
f010253f:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102546:	e8 6b db ff ff       	call   f01000b6 <_panic>
	assert(ptep == ptep1 + PTX(va));
f010254b:	81 ef fc ff ff 0f    	sub    $0xffffffc,%edi
f0102551:	39 7d cc             	cmp    %edi,-0x34(%ebp)
f0102554:	74 24                	je     f010257a <mem_init+0x136c>
f0102556:	c7 44 24 0c 13 51 10 	movl   $0xf0105113,0xc(%esp)
f010255d:	f0 
f010255e:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102565:	f0 
f0102566:	c7 44 24 04 c1 03 00 	movl   $0x3c1,0x4(%esp)
f010256d:	00 
f010256e:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102575:	e8 3c db ff ff       	call   f01000b6 <_panic>
	kern_pgdir[PDX(va)] = 0;
f010257a:	c7 42 04 00 00 00 00 	movl   $0x0,0x4(%edx)
	pp0->pp_ref = 0;
f0102581:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102584:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
	return (pp - pages) << PGSHIFT;
f010258a:	2b 05 ac ce 17 f0    	sub    0xf017ceac,%eax
f0102590:	c1 f8 03             	sar    $0x3,%eax
f0102593:	c1 e0 0c             	shl    $0xc,%eax
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f0102596:	89 c2                	mov    %eax,%edx
f0102598:	c1 ea 0c             	shr    $0xc,%edx
f010259b:	39 d1                	cmp    %edx,%ecx
f010259d:	77 20                	ja     f01025bf <mem_init+0x13b1>
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f010259f:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01025a3:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f01025aa:	f0 
f01025ab:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
f01025b2:	00 
f01025b3:	c7 04 24 a0 4e 10 f0 	movl   $0xf0104ea0,(%esp)
f01025ba:	e8 f7 da ff ff       	call   f01000b6 <_panic>

	// check that new page tables get cleared
	memset(page2kva(pp0), 0xFF, PGSIZE);
f01025bf:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
f01025c6:	00 
f01025c7:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
f01025ce:	00 
	return (void *)(pa + KERNBASE);
f01025cf:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01025d4:	89 04 24             	mov    %eax,(%esp)
f01025d7:	e8 db 1e 00 00       	call   f01044b7 <memset>
	page_free(pp0);
f01025dc:	8b 7d d4             	mov    -0x2c(%ebp),%edi
f01025df:	89 3c 24             	mov    %edi,(%esp)
f01025e2:	e8 19 e9 ff ff       	call   f0100f00 <page_free>
	pgdir_walk(kern_pgdir, 0x0, 1);
f01025e7:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
f01025ee:	00 
f01025ef:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
f01025f6:	00 
f01025f7:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f01025fc:	89 04 24             	mov    %eax,(%esp)
f01025ff:	e8 5c e9 ff ff       	call   f0100f60 <pgdir_walk>
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
	return (pp - pages) << PGSHIFT;
f0102604:	89 fa                	mov    %edi,%edx
f0102606:	2b 15 ac ce 17 f0    	sub    0xf017ceac,%edx
f010260c:	c1 fa 03             	sar    $0x3,%edx
f010260f:	c1 e2 0c             	shl    $0xc,%edx
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f0102612:	89 d0                	mov    %edx,%eax
f0102614:	c1 e8 0c             	shr    $0xc,%eax
f0102617:	3b 05 a4 ce 17 f0    	cmp    0xf017cea4,%eax
f010261d:	72 20                	jb     f010263f <mem_init+0x1431>
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f010261f:	89 54 24 0c          	mov    %edx,0xc(%esp)
f0102623:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f010262a:	f0 
f010262b:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
f0102632:	00 
f0102633:	c7 04 24 a0 4e 10 f0 	movl   $0xf0104ea0,(%esp)
f010263a:	e8 77 da ff ff       	call   f01000b6 <_panic>
	return (void *)(pa + KERNBASE);
f010263f:	8d 82 00 00 00 f0    	lea    -0x10000000(%edx),%eax
	ptep = (pte_t *) page2kva(pp0);
f0102645:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0102648:	81 ea 00 f0 ff 0f    	sub    $0xffff000,%edx
	for(i=0; i<NPTENTRIES; i++)
		assert((ptep[i] & PTE_P) == 0);
f010264e:	f6 00 01             	testb  $0x1,(%eax)
f0102651:	74 24                	je     f0102677 <mem_init+0x1469>
f0102653:	c7 44 24 0c 2b 51 10 	movl   $0xf010512b,0xc(%esp)
f010265a:	f0 
f010265b:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102662:	f0 
f0102663:	c7 44 24 04 cb 03 00 	movl   $0x3cb,0x4(%esp)
f010266a:	00 
f010266b:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102672:	e8 3f da ff ff       	call   f01000b6 <_panic>
f0102677:	83 c0 04             	add    $0x4,%eax
	// check that new page tables get cleared
	memset(page2kva(pp0), 0xFF, PGSIZE);
	page_free(pp0);
	pgdir_walk(kern_pgdir, 0x0, 1);
	ptep = (pte_t *) page2kva(pp0);
	for(i=0; i<NPTENTRIES; i++)
f010267a:	39 d0                	cmp    %edx,%eax
f010267c:	75 d0                	jne    f010264e <mem_init+0x1440>
		assert((ptep[i] & PTE_P) == 0);
	kern_pgdir[0] = 0;
f010267e:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0102683:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	pp0->pp_ref = 0;
f0102689:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010268c:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)

	// give free list back
	page_free_list = fl;
f0102692:	8b 7d d0             	mov    -0x30(%ebp),%edi
f0102695:	89 3d dc c1 17 f0    	mov    %edi,0xf017c1dc

	// free the pages we took
	page_free(pp0);
f010269b:	89 04 24             	mov    %eax,(%esp)
f010269e:	e8 5d e8 ff ff       	call   f0100f00 <page_free>
	page_free(pp1);
f01026a3:	89 1c 24             	mov    %ebx,(%esp)
f01026a6:	e8 55 e8 ff ff       	call   f0100f00 <page_free>
	page_free(pp2);
f01026ab:	89 34 24             	mov    %esi,(%esp)
f01026ae:	e8 4d e8 ff ff       	call   f0100f00 <page_free>

	cprintf("check_page() succeeded!\n");
f01026b3:	c7 04 24 42 51 10 f0 	movl   $0xf0105142,(%esp)
f01026ba:	e8 6c 0e 00 00       	call   f010352b <cprintf>
	//    - the new image at UPAGES -- kernel R, user R
	//      (ie. perm = PTE_U | PTE_P)
	//    - pages itself -- kernel RW, user NONE
	// Your code goes here:
	//static void boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm);
        boot_map_region(kern_pgdir, UPAGES, PTSIZE,PADDR(pages), PTE_U | PTE_P);
f01026bf:	a1 ac ce 17 f0       	mov    0xf017ceac,%eax
#define PADDR(kva) _paddr(__FILE__, __LINE__, kva)

static inline physaddr_t
_paddr(const char *file, int line, void *kva)
{
	if ((uint32_t)kva < KERNBASE)
f01026c4:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
f01026c9:	77 20                	ja     f01026eb <mem_init+0x14dd>
		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
f01026cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01026cf:	c7 44 24 08 74 52 10 	movl   $0xf0105274,0x8(%esp)
f01026d6:	f0 
f01026d7:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
f01026de:	00 
f01026df:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01026e6:	e8 cb d9 ff ff       	call   f01000b6 <_panic>
f01026eb:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
f01026f2:	00 
	return (physaddr_t)kva - KERNBASE;
f01026f3:	05 00 00 00 10       	add    $0x10000000,%eax
f01026f8:	89 04 24             	mov    %eax,(%esp)
f01026fb:	b9 00 00 40 00       	mov    $0x400000,%ecx
f0102700:	ba 00 00 00 ef       	mov    $0xef000000,%edx
f0102705:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f010270a:	e8 6b e9 ff ff       	call   f010107a <boot_map_region>
	// Permissions:
	//    - the new image at UENVS  -- kernel R, user R
	//    - envs itself -- kernel RW, user NONE
	// LAB 3: Your code here.
        //pde_t * env_pgdir;
        boot_map_region(kern_pgdir, UENVS, PTSIZE,PADDR(envs), PTE_U | PTE_P);
f010270f:	a1 e8 c1 17 f0       	mov    0xf017c1e8,%eax
#define PADDR(kva) _paddr(__FILE__, __LINE__, kva)

static inline physaddr_t
_paddr(const char *file, int line, void *kva)
{
	if ((uint32_t)kva < KERNBASE)
f0102714:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
f0102719:	77 20                	ja     f010273b <mem_init+0x152d>
		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
f010271b:	89 44 24 0c          	mov    %eax,0xc(%esp)
f010271f:	c7 44 24 08 74 52 10 	movl   $0xf0105274,0x8(%esp)
f0102726:	f0 
f0102727:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
f010272e:	00 
f010272f:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102736:	e8 7b d9 ff ff       	call   f01000b6 <_panic>
f010273b:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
f0102742:	00 
	return (physaddr_t)kva - KERNBASE;
f0102743:	05 00 00 00 10       	add    $0x10000000,%eax
f0102748:	89 04 24             	mov    %eax,(%esp)
f010274b:	b9 00 00 40 00       	mov    $0x400000,%ecx
f0102750:	ba 00 00 c0 ee       	mov    $0xeec00000,%edx
f0102755:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f010275a:	e8 1b e9 ff ff       	call   f010107a <boot_map_region>
#define PADDR(kva) _paddr(__FILE__, __LINE__, kva)

static inline physaddr_t
_paddr(const char *file, int line, void *kva)
{
	if ((uint32_t)kva < KERNBASE)
f010275f:	bb 00 00 11 f0       	mov    $0xf0110000,%ebx
f0102764:	81 fb ff ff ff ef    	cmp    $0xefffffff,%ebx
f010276a:	77 20                	ja     f010278c <mem_init+0x157e>
		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
f010276c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
f0102770:	c7 44 24 08 74 52 10 	movl   $0xf0105274,0x8(%esp)
f0102777:	f0 
f0102778:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
f010277f:	00 
f0102780:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102787:	e8 2a d9 ff ff       	call   f01000b6 <_panic>
	//     * [KSTACKTOP-PTSIZE, KSTACKTOP-KSTKSIZE) -- not backed; so if
	//       the kernel overflows its stack, it will fault rather than
	//       overwrite memory.  Known as a "guard page".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
        boot_map_region(kern_pgdir, KSTACKTOP-KSTKSIZE, KSTKSIZE,PADDR(bootstack), PTE_W );
f010278c:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
f0102793:	00 
f0102794:	c7 04 24 00 00 11 00 	movl   $0x110000,(%esp)
f010279b:	b9 00 80 00 00       	mov    $0x8000,%ecx
f01027a0:	ba 00 80 ff ef       	mov    $0xefff8000,%edx
f01027a5:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f01027aa:	e8 cb e8 ff ff       	call   f010107a <boot_map_region>
	// We might not have 2^32 - KERNBASE bytes of physical memory, but
	// we just set up the mapping anyway.
	// Permissions: kernel RW, user NONE
	// Your code goes here:
	uint64_t kern_map_length = 0x100000000 - (uint64_t) KERNBASE;
    boot_map_region(kern_pgdir, KERNBASE,kern_map_length ,0, PTE_W | PTE_P);
f01027af:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
f01027b6:	00 
f01027b7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f01027be:	b9 00 00 00 10       	mov    $0x10000000,%ecx
f01027c3:	ba 00 00 00 f0       	mov    $0xf0000000,%edx
f01027c8:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f01027cd:	e8 a8 e8 ff ff       	call   f010107a <boot_map_region>
check_kern_pgdir(void)
{
	uint32_t i, n;
	pde_t *pgdir;

	pgdir = kern_pgdir;
f01027d2:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f01027d7:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	// check pages array
	n = ROUNDUP(npages*sizeof(struct PageInfo), PGSIZE);
f01027da:	a1 a4 ce 17 f0       	mov    0xf017cea4,%eax
f01027df:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01027e2:	8d 04 c5 ff 0f 00 00 	lea    0xfff(,%eax,8),%eax
f01027e9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01027ee:	89 45 cc             	mov    %eax,-0x34(%ebp)
	for (i = 0; i < n; i += PGSIZE)
		assert(check_va2pa(pgdir, UPAGES + i) == PADDR(pages) + i);
f01027f1:	8b 3d ac ce 17 f0    	mov    0xf017ceac,%edi
#define PADDR(kva) _paddr(__FILE__, __LINE__, kva)

static inline physaddr_t
_paddr(const char *file, int line, void *kva)
{
	if ((uint32_t)kva < KERNBASE)
f01027f7:	89 7d c8             	mov    %edi,-0x38(%ebp)
		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
	return (physaddr_t)kva - KERNBASE;
f01027fa:	8d 87 00 00 00 10    	lea    0x10000000(%edi),%eax
f0102800:	89 45 c4             	mov    %eax,-0x3c(%ebp)

	pgdir = kern_pgdir;

	// check pages array
	n = ROUNDUP(npages*sizeof(struct PageInfo), PGSIZE);
	for (i = 0; i < n; i += PGSIZE)
f0102803:	be 00 00 00 00       	mov    $0x0,%esi
f0102808:	eb 6b                	jmp    f0102875 <mem_init+0x1667>
f010280a:	8d 96 00 00 00 ef    	lea    -0x11000000(%esi),%edx
		assert(check_va2pa(pgdir, UPAGES + i) == PADDR(pages) + i);
f0102810:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102813:	e8 3c e2 ff ff       	call   f0100a54 <check_va2pa>
#define PADDR(kva) _paddr(__FILE__, __LINE__, kva)

static inline physaddr_t
_paddr(const char *file, int line, void *kva)
{
	if ((uint32_t)kva < KERNBASE)
f0102818:	81 7d c8 ff ff ff ef 	cmpl   $0xefffffff,-0x38(%ebp)
f010281f:	77 20                	ja     f0102841 <mem_init+0x1633>
		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
f0102821:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0102825:	c7 44 24 08 74 52 10 	movl   $0xf0105274,0x8(%esp)
f010282c:	f0 
f010282d:	c7 44 24 04 08 03 00 	movl   $0x308,0x4(%esp)
f0102834:	00 
f0102835:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f010283c:	e8 75 d8 ff ff       	call   f01000b6 <_panic>
f0102841:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
f0102844:	8d 14 0e             	lea    (%esi,%ecx,1),%edx
f0102847:	39 d0                	cmp    %edx,%eax
f0102849:	74 24                	je     f010286f <mem_init+0x1661>
f010284b:	c7 44 24 0c 4c 57 10 	movl   $0xf010574c,0xc(%esp)
f0102852:	f0 
f0102853:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f010285a:	f0 
f010285b:	c7 44 24 04 08 03 00 	movl   $0x308,0x4(%esp)
f0102862:	00 
f0102863:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f010286a:	e8 47 d8 ff ff       	call   f01000b6 <_panic>

	pgdir = kern_pgdir;

	// check pages array
	n = ROUNDUP(npages*sizeof(struct PageInfo), PGSIZE);
	for (i = 0; i < n; i += PGSIZE)
f010286f:	81 c6 00 10 00 00    	add    $0x1000,%esi
f0102875:	39 75 cc             	cmp    %esi,-0x34(%ebp)
f0102878:	77 90                	ja     f010280a <mem_init+0x15fc>
		assert(check_va2pa(pgdir, UPAGES + i) == PADDR(pages) + i);

	// check envs array (new test for lab 3)
	n = ROUNDUP(NENV*sizeof(struct Env), PGSIZE);
	for (i = 0; i < n; i += PGSIZE)
		assert(check_va2pa(pgdir, UENVS + i) == PADDR(envs) + i);
f010287a:	8b 35 e8 c1 17 f0    	mov    0xf017c1e8,%esi
#define PADDR(kva) _paddr(__FILE__, __LINE__, kva)

static inline physaddr_t
_paddr(const char *file, int line, void *kva)
{
	if ((uint32_t)kva < KERNBASE)
f0102880:	89 f7                	mov    %esi,%edi
f0102882:	ba 00 00 c0 ee       	mov    $0xeec00000,%edx
f0102887:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010288a:	e8 c5 e1 ff ff       	call   f0100a54 <check_va2pa>
f010288f:	81 fe ff ff ff ef    	cmp    $0xefffffff,%esi
f0102895:	77 20                	ja     f01028b7 <mem_init+0x16a9>
		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
f0102897:	89 74 24 0c          	mov    %esi,0xc(%esp)
f010289b:	c7 44 24 08 74 52 10 	movl   $0xf0105274,0x8(%esp)
f01028a2:	f0 
f01028a3:	c7 44 24 04 0d 03 00 	movl   $0x30d,0x4(%esp)
f01028aa:	00 
f01028ab:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01028b2:	e8 ff d7 ff ff       	call   f01000b6 <_panic>
#define PADDR(kva) _paddr(__FILE__, __LINE__, kva)

static inline physaddr_t
_paddr(const char *file, int line, void *kva)
{
	if ((uint32_t)kva < KERNBASE)
f01028b7:	be 00 00 c0 ee       	mov    $0xeec00000,%esi
f01028bc:	81 c7 00 00 40 21    	add    $0x21400000,%edi
f01028c2:	8d 14 37             	lea    (%edi,%esi,1),%edx
f01028c5:	39 c2                	cmp    %eax,%edx
f01028c7:	74 24                	je     f01028ed <mem_init+0x16df>
f01028c9:	c7 44 24 0c 80 57 10 	movl   $0xf0105780,0xc(%esp)
f01028d0:	f0 
f01028d1:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01028d8:	f0 
f01028d9:	c7 44 24 04 0d 03 00 	movl   $0x30d,0x4(%esp)
f01028e0:	00 
f01028e1:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01028e8:	e8 c9 d7 ff ff       	call   f01000b6 <_panic>
f01028ed:	81 c6 00 10 00 00    	add    $0x1000,%esi
	for (i = 0; i < n; i += PGSIZE)
		assert(check_va2pa(pgdir, UPAGES + i) == PADDR(pages) + i);

	// check envs array (new test for lab 3)
	n = ROUNDUP(NENV*sizeof(struct Env), PGSIZE);
	for (i = 0; i < n; i += PGSIZE)
f01028f3:	81 fe 00 80 c1 ee    	cmp    $0xeec18000,%esi
f01028f9:	0f 85 26 05 00 00    	jne    f0102e25 <mem_init+0x1c17>
		assert(check_va2pa(pgdir, UENVS + i) == PADDR(envs) + i);

	// check phys mem
	for (i = 0; i < npages * PGSIZE; i += PGSIZE)
f01028ff:	8b 7d d0             	mov    -0x30(%ebp),%edi
f0102902:	c1 e7 0c             	shl    $0xc,%edi
f0102905:	be 00 00 00 00       	mov    $0x0,%esi
f010290a:	eb 3c                	jmp    f0102948 <mem_init+0x173a>
f010290c:	8d 96 00 00 00 f0    	lea    -0x10000000(%esi),%edx
		assert(check_va2pa(pgdir, KERNBASE + i) == i);
f0102912:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102915:	e8 3a e1 ff ff       	call   f0100a54 <check_va2pa>
f010291a:	39 c6                	cmp    %eax,%esi
f010291c:	74 24                	je     f0102942 <mem_init+0x1734>
f010291e:	c7 44 24 0c b4 57 10 	movl   $0xf01057b4,0xc(%esp)
f0102925:	f0 
f0102926:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f010292d:	f0 
f010292e:	c7 44 24 04 11 03 00 	movl   $0x311,0x4(%esp)
f0102935:	00 
f0102936:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f010293d:	e8 74 d7 ff ff       	call   f01000b6 <_panic>
	n = ROUNDUP(NENV*sizeof(struct Env), PGSIZE);
	for (i = 0; i < n; i += PGSIZE)
		assert(check_va2pa(pgdir, UENVS + i) == PADDR(envs) + i);

	// check phys mem
	for (i = 0; i < npages * PGSIZE; i += PGSIZE)
f0102942:	81 c6 00 10 00 00    	add    $0x1000,%esi
f0102948:	39 fe                	cmp    %edi,%esi
f010294a:	72 c0                	jb     f010290c <mem_init+0x16fe>
f010294c:	be 00 80 ff ef       	mov    $0xefff8000,%esi
f0102951:	81 c3 00 80 00 20    	add    $0x20008000,%ebx
		assert(check_va2pa(pgdir, KERNBASE + i) == i);

	// check kernel stack
	for (i = 0; i < KSTKSIZE; i += PGSIZE)
		assert(check_va2pa(pgdir, KSTACKTOP - KSTKSIZE + i) == PADDR(bootstack) + i);
f0102957:	89 f2                	mov    %esi,%edx
f0102959:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010295c:	e8 f3 e0 ff ff       	call   f0100a54 <check_va2pa>
f0102961:	8d 14 33             	lea    (%ebx,%esi,1),%edx
f0102964:	39 d0                	cmp    %edx,%eax
f0102966:	74 24                	je     f010298c <mem_init+0x177e>
f0102968:	c7 44 24 0c dc 57 10 	movl   $0xf01057dc,0xc(%esp)
f010296f:	f0 
f0102970:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102977:	f0 
f0102978:	c7 44 24 04 15 03 00 	movl   $0x315,0x4(%esp)
f010297f:	00 
f0102980:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102987:	e8 2a d7 ff ff       	call   f01000b6 <_panic>
f010298c:	81 c6 00 10 00 00    	add    $0x1000,%esi
	// check phys mem
	for (i = 0; i < npages * PGSIZE; i += PGSIZE)
		assert(check_va2pa(pgdir, KERNBASE + i) == i);

	// check kernel stack
	for (i = 0; i < KSTKSIZE; i += PGSIZE)
f0102992:	81 fe 00 00 00 f0    	cmp    $0xf0000000,%esi
f0102998:	75 bd                	jne    f0102957 <mem_init+0x1749>
		assert(check_va2pa(pgdir, KSTACKTOP - KSTKSIZE + i) == PADDR(bootstack) + i);
	assert(check_va2pa(pgdir, KSTACKTOP - PTSIZE) == ~0);
f010299a:	ba 00 00 c0 ef       	mov    $0xefc00000,%edx
f010299f:	8b 7d d4             	mov    -0x2c(%ebp),%edi
f01029a2:	89 f8                	mov    %edi,%eax
f01029a4:	e8 ab e0 ff ff       	call   f0100a54 <check_va2pa>
f01029a9:	83 f8 ff             	cmp    $0xffffffff,%eax
f01029ac:	75 0c                	jne    f01029ba <mem_init+0x17ac>
f01029ae:	b8 00 00 00 00       	mov    $0x0,%eax
f01029b3:	89 fa                	mov    %edi,%edx
f01029b5:	e9 f0 00 00 00       	jmp    f0102aaa <mem_init+0x189c>
f01029ba:	c7 44 24 0c 24 58 10 	movl   $0xf0105824,0xc(%esp)
f01029c1:	f0 
f01029c2:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01029c9:	f0 
f01029ca:	c7 44 24 04 16 03 00 	movl   $0x316,0x4(%esp)
f01029d1:	00 
f01029d2:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f01029d9:	e8 d8 d6 ff ff       	call   f01000b6 <_panic>

	// check PDE permissions
	for (i = 0; i < NPDENTRIES; i++) {
		switch (i) {
f01029de:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01029e3:	72 3c                	jb     f0102a21 <mem_init+0x1813>
f01029e5:	3d bd 03 00 00       	cmp    $0x3bd,%eax
f01029ea:	76 07                	jbe    f01029f3 <mem_init+0x17e5>
f01029ec:	3d bf 03 00 00       	cmp    $0x3bf,%eax
f01029f1:	75 2e                	jne    f0102a21 <mem_init+0x1813>
		case PDX(UVPT):
		case PDX(KSTACKTOP-1):
		case PDX(UPAGES):
		case PDX(UENVS):
			assert(pgdir[i] & PTE_P);
f01029f3:	f6 04 82 01          	testb  $0x1,(%edx,%eax,4)
f01029f7:	0f 85 aa 00 00 00    	jne    f0102aa7 <mem_init+0x1899>
f01029fd:	c7 44 24 0c 5b 51 10 	movl   $0xf010515b,0xc(%esp)
f0102a04:	f0 
f0102a05:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102a0c:	f0 
f0102a0d:	c7 44 24 04 1f 03 00 	movl   $0x31f,0x4(%esp)
f0102a14:	00 
f0102a15:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102a1c:	e8 95 d6 ff ff       	call   f01000b6 <_panic>
			break;
		default:
			if (i >= PDX(KERNBASE)) {
f0102a21:	3d bf 03 00 00       	cmp    $0x3bf,%eax
f0102a26:	76 55                	jbe    f0102a7d <mem_init+0x186f>
				assert(pgdir[i] & PTE_P);
f0102a28:	8b 0c 82             	mov    (%edx,%eax,4),%ecx
f0102a2b:	f6 c1 01             	test   $0x1,%cl
f0102a2e:	75 24                	jne    f0102a54 <mem_init+0x1846>
f0102a30:	c7 44 24 0c 5b 51 10 	movl   $0xf010515b,0xc(%esp)
f0102a37:	f0 
f0102a38:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102a3f:	f0 
f0102a40:	c7 44 24 04 23 03 00 	movl   $0x323,0x4(%esp)
f0102a47:	00 
f0102a48:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102a4f:	e8 62 d6 ff ff       	call   f01000b6 <_panic>
				assert(pgdir[i] & PTE_W);
f0102a54:	f6 c1 02             	test   $0x2,%cl
f0102a57:	75 4e                	jne    f0102aa7 <mem_init+0x1899>
f0102a59:	c7 44 24 0c 6c 51 10 	movl   $0xf010516c,0xc(%esp)
f0102a60:	f0 
f0102a61:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102a68:	f0 
f0102a69:	c7 44 24 04 24 03 00 	movl   $0x324,0x4(%esp)
f0102a70:	00 
f0102a71:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102a78:	e8 39 d6 ff ff       	call   f01000b6 <_panic>
			} else
				assert(pgdir[i] == 0);
f0102a7d:	83 3c 82 00          	cmpl   $0x0,(%edx,%eax,4)
f0102a81:	74 24                	je     f0102aa7 <mem_init+0x1899>
f0102a83:	c7 44 24 0c 7d 51 10 	movl   $0xf010517d,0xc(%esp)
f0102a8a:	f0 
f0102a8b:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102a92:	f0 
f0102a93:	c7 44 24 04 26 03 00 	movl   $0x326,0x4(%esp)
f0102a9a:	00 
f0102a9b:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102aa2:	e8 0f d6 ff ff       	call   f01000b6 <_panic>
	for (i = 0; i < KSTKSIZE; i += PGSIZE)
		assert(check_va2pa(pgdir, KSTACKTOP - KSTKSIZE + i) == PADDR(bootstack) + i);
	assert(check_va2pa(pgdir, KSTACKTOP - PTSIZE) == ~0);

	// check PDE permissions
	for (i = 0; i < NPDENTRIES; i++) {
f0102aa7:	83 c0 01             	add    $0x1,%eax
f0102aaa:	3d 00 04 00 00       	cmp    $0x400,%eax
f0102aaf:	0f 85 29 ff ff ff    	jne    f01029de <mem_init+0x17d0>
			} else
				assert(pgdir[i] == 0);
			break;
		}
	}
	cprintf("check_kern_pgdir() succeeded!\n");
f0102ab5:	c7 04 24 54 58 10 f0 	movl   $0xf0105854,(%esp)
f0102abc:	e8 6a 0a 00 00       	call   f010352b <cprintf>
	// somewhere between KERNBASE and KERNBASE+4MB right now, which is
	// mapped the same way by both page tables.
	//
	// If the machine reboots at this point, you've probably set up your
	// kern_pgdir wrong.
	lcr3(PADDR(kern_pgdir));
f0102ac1:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0102ac6:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
f0102acb:	77 20                	ja     f0102aed <mem_init+0x18df>
		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
f0102acd:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0102ad1:	c7 44 24 08 74 52 10 	movl   $0xf0105274,0x8(%esp)
f0102ad8:	f0 
f0102ad9:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
f0102ae0:	00 
f0102ae1:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102ae8:	e8 c9 d5 ff ff       	call   f01000b6 <_panic>
	return (physaddr_t)kva - KERNBASE;
f0102aed:	05 00 00 00 10       	add    $0x10000000,%eax
}

static inline void
lcr3(uint32_t val)
{
	asm volatile("movl %0,%%cr3" : : "r" (val));
f0102af2:	0f 22 d8             	mov    %eax,%cr3

	check_page_free_list(0);
f0102af5:	b8 00 00 00 00       	mov    $0x0,%eax
f0102afa:	e8 c4 df ff ff       	call   f0100ac3 <check_page_free_list>

static inline uint32_t
rcr0(void)
{
	uint32_t val;
	asm volatile("movl %%cr0,%0" : "=r" (val));
f0102aff:	0f 20 c0             	mov    %cr0,%eax

	// entry.S set the really important flags in cr0 (including enabling
	// paging).  Here we configure the rest of the flags that we care about.
	cr0 = rcr0();
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_MP;
	cr0 &= ~(CR0_TS|CR0_EM);
f0102b02:	83 e0 f3             	and    $0xfffffff3,%eax
f0102b05:	0d 23 00 05 80       	or     $0x80050023,%eax
}

static inline void
lcr0(uint32_t val)
{
	asm volatile("movl %0,%%cr0" : : "r" (val));
f0102b0a:	0f 22 c0             	mov    %eax,%cr0
	uintptr_t va;
	int i;

	// check that we can read and write installed pages
	pp1 = pp2 = 0;
	assert((pp0 = page_alloc(0)));
f0102b0d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f0102b14:	e8 5c e3 ff ff       	call   f0100e75 <page_alloc>
f0102b19:	89 c3                	mov    %eax,%ebx
f0102b1b:	85 c0                	test   %eax,%eax
f0102b1d:	75 24                	jne    f0102b43 <mem_init+0x1935>
f0102b1f:	c7 44 24 0c 79 4f 10 	movl   $0xf0104f79,0xc(%esp)
f0102b26:	f0 
f0102b27:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102b2e:	f0 
f0102b2f:	c7 44 24 04 e6 03 00 	movl   $0x3e6,0x4(%esp)
f0102b36:	00 
f0102b37:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102b3e:	e8 73 d5 ff ff       	call   f01000b6 <_panic>
	assert((pp1 = page_alloc(0)));
f0102b43:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f0102b4a:	e8 26 e3 ff ff       	call   f0100e75 <page_alloc>
f0102b4f:	89 c7                	mov    %eax,%edi
f0102b51:	85 c0                	test   %eax,%eax
f0102b53:	75 24                	jne    f0102b79 <mem_init+0x196b>
f0102b55:	c7 44 24 0c 8f 4f 10 	movl   $0xf0104f8f,0xc(%esp)
f0102b5c:	f0 
f0102b5d:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102b64:	f0 
f0102b65:	c7 44 24 04 e7 03 00 	movl   $0x3e7,0x4(%esp)
f0102b6c:	00 
f0102b6d:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102b74:	e8 3d d5 ff ff       	call   f01000b6 <_panic>
	assert((pp2 = page_alloc(0)));
f0102b79:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f0102b80:	e8 f0 e2 ff ff       	call   f0100e75 <page_alloc>
f0102b85:	89 c6                	mov    %eax,%esi
f0102b87:	85 c0                	test   %eax,%eax
f0102b89:	75 24                	jne    f0102baf <mem_init+0x19a1>
f0102b8b:	c7 44 24 0c a5 4f 10 	movl   $0xf0104fa5,0xc(%esp)
f0102b92:	f0 
f0102b93:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102b9a:	f0 
f0102b9b:	c7 44 24 04 e8 03 00 	movl   $0x3e8,0x4(%esp)
f0102ba2:	00 
f0102ba3:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102baa:	e8 07 d5 ff ff       	call   f01000b6 <_panic>
	page_free(pp0);
f0102baf:	89 1c 24             	mov    %ebx,(%esp)
f0102bb2:	e8 49 e3 ff ff       	call   f0100f00 <page_free>
	memset(page2kva(pp1), 1, PGSIZE);
f0102bb7:	89 f8                	mov    %edi,%eax
f0102bb9:	e8 51 de ff ff       	call   f0100a0f <page2kva>
f0102bbe:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
f0102bc5:	00 
f0102bc6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
f0102bcd:	00 
f0102bce:	89 04 24             	mov    %eax,(%esp)
f0102bd1:	e8 e1 18 00 00       	call   f01044b7 <memset>
	memset(page2kva(pp2), 2, PGSIZE);
f0102bd6:	89 f0                	mov    %esi,%eax
f0102bd8:	e8 32 de ff ff       	call   f0100a0f <page2kva>
f0102bdd:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
f0102be4:	00 
f0102be5:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
f0102bec:	00 
f0102bed:	89 04 24             	mov    %eax,(%esp)
f0102bf0:	e8 c2 18 00 00       	call   f01044b7 <memset>
	page_insert(kern_pgdir, pp1, (void*) PGSIZE, PTE_W);
f0102bf5:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
f0102bfc:	00 
f0102bfd:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
f0102c04:	00 
f0102c05:	89 7c 24 04          	mov    %edi,0x4(%esp)
f0102c09:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0102c0e:	89 04 24             	mov    %eax,(%esp)
f0102c11:	e8 77 e5 ff ff       	call   f010118d <page_insert>
	assert(pp1->pp_ref == 1);
f0102c16:	66 83 7f 04 01       	cmpw   $0x1,0x4(%edi)
f0102c1b:	74 24                	je     f0102c41 <mem_init+0x1a33>
f0102c1d:	c7 44 24 0c 76 50 10 	movl   $0xf0105076,0xc(%esp)
f0102c24:	f0 
f0102c25:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102c2c:	f0 
f0102c2d:	c7 44 24 04 ed 03 00 	movl   $0x3ed,0x4(%esp)
f0102c34:	00 
f0102c35:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102c3c:	e8 75 d4 ff ff       	call   f01000b6 <_panic>
	assert(*(uint32_t *)PGSIZE == 0x01010101U);
f0102c41:	81 3d 00 10 00 00 01 	cmpl   $0x1010101,0x1000
f0102c48:	01 01 01 
f0102c4b:	74 24                	je     f0102c71 <mem_init+0x1a63>
f0102c4d:	c7 44 24 0c 74 58 10 	movl   $0xf0105874,0xc(%esp)
f0102c54:	f0 
f0102c55:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102c5c:	f0 
f0102c5d:	c7 44 24 04 ee 03 00 	movl   $0x3ee,0x4(%esp)
f0102c64:	00 
f0102c65:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102c6c:	e8 45 d4 ff ff       	call   f01000b6 <_panic>
	page_insert(kern_pgdir, pp2, (void*) PGSIZE, PTE_W);
f0102c71:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
f0102c78:	00 
f0102c79:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
f0102c80:	00 
f0102c81:	89 74 24 04          	mov    %esi,0x4(%esp)
f0102c85:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0102c8a:	89 04 24             	mov    %eax,(%esp)
f0102c8d:	e8 fb e4 ff ff       	call   f010118d <page_insert>
	assert(*(uint32_t *)PGSIZE == 0x02020202U);
f0102c92:	81 3d 00 10 00 00 02 	cmpl   $0x2020202,0x1000
f0102c99:	02 02 02 
f0102c9c:	74 24                	je     f0102cc2 <mem_init+0x1ab4>
f0102c9e:	c7 44 24 0c 98 58 10 	movl   $0xf0105898,0xc(%esp)
f0102ca5:	f0 
f0102ca6:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102cad:	f0 
f0102cae:	c7 44 24 04 f0 03 00 	movl   $0x3f0,0x4(%esp)
f0102cb5:	00 
f0102cb6:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102cbd:	e8 f4 d3 ff ff       	call   f01000b6 <_panic>
	assert(pp2->pp_ref == 1);
f0102cc2:	66 83 7e 04 01       	cmpw   $0x1,0x4(%esi)
f0102cc7:	74 24                	je     f0102ced <mem_init+0x1adf>
f0102cc9:	c7 44 24 0c 98 50 10 	movl   $0xf0105098,0xc(%esp)
f0102cd0:	f0 
f0102cd1:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102cd8:	f0 
f0102cd9:	c7 44 24 04 f1 03 00 	movl   $0x3f1,0x4(%esp)
f0102ce0:	00 
f0102ce1:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102ce8:	e8 c9 d3 ff ff       	call   f01000b6 <_panic>
	assert(pp1->pp_ref == 0);
f0102ced:	66 83 7f 04 00       	cmpw   $0x0,0x4(%edi)
f0102cf2:	74 24                	je     f0102d18 <mem_init+0x1b0a>
f0102cf4:	c7 44 24 0c 02 51 10 	movl   $0xf0105102,0xc(%esp)
f0102cfb:	f0 
f0102cfc:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102d03:	f0 
f0102d04:	c7 44 24 04 f2 03 00 	movl   $0x3f2,0x4(%esp)
f0102d0b:	00 
f0102d0c:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102d13:	e8 9e d3 ff ff       	call   f01000b6 <_panic>
	*(uint32_t *)PGSIZE = 0x03030303U;
f0102d18:	c7 05 00 10 00 00 03 	movl   $0x3030303,0x1000
f0102d1f:	03 03 03 
	assert(*(uint32_t *)page2kva(pp2) == 0x03030303U);
f0102d22:	89 f0                	mov    %esi,%eax
f0102d24:	e8 e6 dc ff ff       	call   f0100a0f <page2kva>
f0102d29:	81 38 03 03 03 03    	cmpl   $0x3030303,(%eax)
f0102d2f:	74 24                	je     f0102d55 <mem_init+0x1b47>
f0102d31:	c7 44 24 0c bc 58 10 	movl   $0xf01058bc,0xc(%esp)
f0102d38:	f0 
f0102d39:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102d40:	f0 
f0102d41:	c7 44 24 04 f4 03 00 	movl   $0x3f4,0x4(%esp)
f0102d48:	00 
f0102d49:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102d50:	e8 61 d3 ff ff       	call   f01000b6 <_panic>
	page_remove(kern_pgdir, (void*) PGSIZE);
f0102d55:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
f0102d5c:	00 
f0102d5d:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0102d62:	89 04 24             	mov    %eax,(%esp)
f0102d65:	e8 de e3 ff ff       	call   f0101148 <page_remove>
	assert(pp2->pp_ref == 0);
f0102d6a:	66 83 7e 04 00       	cmpw   $0x0,0x4(%esi)
f0102d6f:	74 24                	je     f0102d95 <mem_init+0x1b87>
f0102d71:	c7 44 24 0c d0 50 10 	movl   $0xf01050d0,0xc(%esp)
f0102d78:	f0 
f0102d79:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102d80:	f0 
f0102d81:	c7 44 24 04 f6 03 00 	movl   $0x3f6,0x4(%esp)
f0102d88:	00 
f0102d89:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102d90:	e8 21 d3 ff ff       	call   f01000b6 <_panic>

	// forcibly take pp0 back
	assert(PTE_ADDR(kern_pgdir[0]) == page2pa(pp0));
f0102d95:	a1 a8 ce 17 f0       	mov    0xf017cea8,%eax
f0102d9a:	8b 08                	mov    (%eax),%ecx
f0102d9c:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);

static inline physaddr_t
page2pa(struct PageInfo *pp)
{
	return (pp - pages) << PGSHIFT;
f0102da2:	89 da                	mov    %ebx,%edx
f0102da4:	2b 15 ac ce 17 f0    	sub    0xf017ceac,%edx
f0102daa:	c1 fa 03             	sar    $0x3,%edx
f0102dad:	c1 e2 0c             	shl    $0xc,%edx
f0102db0:	39 d1                	cmp    %edx,%ecx
f0102db2:	74 24                	je     f0102dd8 <mem_init+0x1bca>
f0102db4:	c7 44 24 0c cc 53 10 	movl   $0xf01053cc,0xc(%esp)
f0102dbb:	f0 
f0102dbc:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102dc3:	f0 
f0102dc4:	c7 44 24 04 f9 03 00 	movl   $0x3f9,0x4(%esp)
f0102dcb:	00 
f0102dcc:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102dd3:	e8 de d2 ff ff       	call   f01000b6 <_panic>
	kern_pgdir[0] = 0;
f0102dd8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	assert(pp0->pp_ref == 1);
f0102dde:	66 83 7b 04 01       	cmpw   $0x1,0x4(%ebx)
f0102de3:	74 24                	je     f0102e09 <mem_init+0x1bfb>
f0102de5:	c7 44 24 0c 87 50 10 	movl   $0xf0105087,0xc(%esp)
f0102dec:	f0 
f0102ded:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0102df4:	f0 
f0102df5:	c7 44 24 04 fb 03 00 	movl   $0x3fb,0x4(%esp)
f0102dfc:	00 
f0102dfd:	c7 04 24 94 4e 10 f0 	movl   $0xf0104e94,(%esp)
f0102e04:	e8 ad d2 ff ff       	call   f01000b6 <_panic>
	pp0->pp_ref = 0;
f0102e09:	66 c7 43 04 00 00    	movw   $0x0,0x4(%ebx)

	// free the pages we took
	page_free(pp0);
f0102e0f:	89 1c 24             	mov    %ebx,(%esp)
f0102e12:	e8 e9 e0 ff ff       	call   f0100f00 <page_free>

	cprintf("check_page_installed_pgdir() succeeded!\n");
f0102e17:	c7 04 24 e8 58 10 f0 	movl   $0xf01058e8,(%esp)
f0102e1e:	e8 08 07 00 00       	call   f010352b <cprintf>
f0102e23:	eb 10                	jmp    f0102e35 <mem_init+0x1c27>
		assert(check_va2pa(pgdir, UPAGES + i) == PADDR(pages) + i);

	// check envs array (new test for lab 3)
	n = ROUNDUP(NENV*sizeof(struct Env), PGSIZE);
	for (i = 0; i < n; i += PGSIZE)
		assert(check_va2pa(pgdir, UENVS + i) == PADDR(envs) + i);
f0102e25:	89 f2                	mov    %esi,%edx
f0102e27:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102e2a:	e8 25 dc ff ff       	call   f0100a54 <check_va2pa>
f0102e2f:	90                   	nop
f0102e30:	e9 8d fa ff ff       	jmp    f01028c2 <mem_init+0x16b4>
	cr0 &= ~(CR0_TS|CR0_EM);
	lcr0(cr0);

	// Some more checks, only possible after kern_pgdir is installed.
	check_page_installed_pgdir();
}
f0102e35:	83 c4 4c             	add    $0x4c,%esp
f0102e38:	5b                   	pop    %ebx
f0102e39:	5e                   	pop    %esi
f0102e3a:	5f                   	pop    %edi
f0102e3b:	5d                   	pop    %ebp
f0102e3c:	c3                   	ret    

f0102e3d <tlb_invalidate>:
// Invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
//
void
tlb_invalidate(pde_t *pgdir, void *va)
{
f0102e3d:	55                   	push   %ebp
f0102e3e:	89 e5                	mov    %esp,%ebp
}

static inline void
invlpg(void *addr)
{
	asm volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0102e40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e43:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(va);
}
f0102e46:	5d                   	pop    %ebp
f0102e47:	c3                   	ret    

f0102e48 <user_mem_check>:
// Returns 0 if the user program can access this range of addresses,
// and -E_FAULT otherwise.
//
int
user_mem_check(struct Env *env, const void *va, size_t len, int perm)
{
f0102e48:	55                   	push   %ebp
f0102e49:	89 e5                	mov    %esp,%ebp
	// LAB 3: Your code here.

	return 0;
}
f0102e4b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e50:	5d                   	pop    %ebp
f0102e51:	c3                   	ret    

f0102e52 <user_mem_assert>:
// If it cannot, 'env' is destroyed and, if env is the current
// environment, this function will not return.
//
void
user_mem_assert(struct Env *env, const void *va, size_t len, int perm)
{
f0102e52:	55                   	push   %ebp
f0102e53:	89 e5                	mov    %esp,%ebp
	if (user_mem_check(env, va, len, perm | PTE_U) < 0) {
		cprintf("[%08x] user_mem_check assertion failure for "
			"va %08x\n", env->env_id, user_mem_check_addr);
		env_destroy(env);	// may not return
	}
}
f0102e55:	5d                   	pop    %ebp
f0102e56:	c3                   	ret    

f0102e57 <envid2env>:
//   On success, sets *env_store to the environment.
//   On error, sets *env_store to NULL.
//
int
envid2env(envid_t envid, struct Env **env_store, bool checkperm)
{
f0102e57:	55                   	push   %ebp
f0102e58:	89 e5                	mov    %esp,%ebp
f0102e5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0102e5d:	8b 4d 10             	mov    0x10(%ebp),%ecx
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0102e60:	85 c0                	test   %eax,%eax
f0102e62:	75 11                	jne    f0102e75 <envid2env+0x1e>
		*env_store = curenv;
f0102e64:	a1 e4 c1 17 f0       	mov    0xf017c1e4,%eax
f0102e69:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0102e6c:	89 01                	mov    %eax,(%ecx)
		return 0;
f0102e6e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e73:	eb 5e                	jmp    f0102ed3 <envid2env+0x7c>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0102e75:	89 c2                	mov    %eax,%edx
f0102e77:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0102e7d:	8d 14 52             	lea    (%edx,%edx,2),%edx
f0102e80:	c1 e2 05             	shl    $0x5,%edx
f0102e83:	03 15 e8 c1 17 f0    	add    0xf017c1e8,%edx
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0102e89:	83 7a 54 00          	cmpl   $0x0,0x54(%edx)
f0102e8d:	74 05                	je     f0102e94 <envid2env+0x3d>
f0102e8f:	39 42 48             	cmp    %eax,0x48(%edx)
f0102e92:	74 10                	je     f0102ea4 <envid2env+0x4d>
		*env_store = 0;
f0102e94:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e97:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return -E_BAD_ENV;
f0102e9d:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0102ea2:	eb 2f                	jmp    f0102ed3 <envid2env+0x7c>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0102ea4:	84 c9                	test   %cl,%cl
f0102ea6:	74 21                	je     f0102ec9 <envid2env+0x72>
f0102ea8:	a1 e4 c1 17 f0       	mov    0xf017c1e4,%eax
f0102ead:	39 c2                	cmp    %eax,%edx
f0102eaf:	74 18                	je     f0102ec9 <envid2env+0x72>
f0102eb1:	8b 40 48             	mov    0x48(%eax),%eax
f0102eb4:	39 42 4c             	cmp    %eax,0x4c(%edx)
f0102eb7:	74 10                	je     f0102ec9 <envid2env+0x72>
		*env_store = 0;
f0102eb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ebc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return -E_BAD_ENV;
f0102ec2:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0102ec7:	eb 0a                	jmp    f0102ed3 <envid2env+0x7c>
	}

	*env_store = e;
f0102ec9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ecc:	89 10                	mov    %edx,(%eax)
	return 0;
f0102ece:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ed3:	5d                   	pop    %ebp
f0102ed4:	c3                   	ret    

f0102ed5 <env_init_percpu>:
}

// Load GDT and segment descriptors.
void
env_init_percpu(void)
{
f0102ed5:	55                   	push   %ebp
f0102ed6:	89 e5                	mov    %esp,%ebp
}

static inline void
lgdt(void *p)
{
	asm volatile("lgdt (%0)" : : "r" (p));
f0102ed8:	b8 00 a3 11 f0       	mov    $0xf011a300,%eax
f0102edd:	0f 01 10             	lgdtl  (%eax)
	lgdt(&gdt_pd);
	// The kernel never uses GS or FS, so we leave those set to
	// the user data segment.
	asm volatile("movw %%ax,%%gs" : : "a" (GD_UD|3));
f0102ee0:	b8 23 00 00 00       	mov    $0x23,%eax
f0102ee5:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" : : "a" (GD_UD|3));
f0102ee7:	8e e0                	mov    %eax,%fs
	// The kernel does use ES, DS, and SS.  We'll change between
	// the kernel and user data segments as needed.
	asm volatile("movw %%ax,%%es" : : "a" (GD_KD));
f0102ee9:	b0 10                	mov    $0x10,%al
f0102eeb:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" : : "a" (GD_KD));
f0102eed:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" : : "a" (GD_KD));
f0102eef:	8e d0                	mov    %eax,%ss
	// Load the kernel text segment into CS.
	asm volatile("ljmp %0,$1f\n 1:\n" : : "i" (GD_KT));
f0102ef1:	ea f8 2e 10 f0 08 00 	ljmp   $0x8,$0xf0102ef8
}

static inline void
lldt(uint16_t sel)
{
	asm volatile("lldt %0" : : "r" (sel));
f0102ef8:	b0 00                	mov    $0x0,%al
f0102efa:	0f 00 d0             	lldt   %ax
	// For good measure, clear the local descriptor table (LDT),
	// since we don't use it.
	lldt(0);
}
f0102efd:	5d                   	pop    %ebp
f0102efe:	c3                   	ret    

f0102eff <env_init>:
// they are in the envs array (i.e., so that the first call to
// env_alloc() returns envs[0]).
//
void
env_init(void)
{
f0102eff:	55                   	push   %ebp
f0102f00:	89 e5                	mov    %esp,%ebp
f0102f02:	56                   	push   %esi
f0102f03:	53                   	push   %ebx
        envid_t envid;
        env_free_list=0;
       
        for(i=NENV-1;i>0;i--)
        {
           envs[i].env_id=0;
f0102f04:	8b 35 e8 c1 17 f0    	mov    0xf017c1e8,%esi
f0102f0a:	8d 86 a0 7f 01 00    	lea    0x17fa0(%esi),%eax
f0102f10:	ba ff 03 00 00       	mov    $0x3ff,%edx
f0102f15:	b9 00 00 00 00       	mov    $0x0,%ecx
f0102f1a:	89 c3                	mov    %eax,%ebx
f0102f1c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
           envs[i].env_status=ENV_FREE;
f0102f23:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
           envs[i].env_parent_id=0;
f0102f2a:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
           envs[i].env_link= env_free_list;
f0102f31:	89 48 44             	mov    %ecx,0x44(%eax)
f0102f34:	83 e8 60             	sub    $0x60,%eax
	// LAB 3: Your code here.m
        uint32_t i;
        envid_t envid;
        env_free_list=0;
       
        for(i=NENV-1;i>0;i--)
f0102f37:	83 ea 01             	sub    $0x1,%edx
f0102f3a:	74 04                	je     f0102f40 <env_init+0x41>
        {
           envs[i].env_id=0;
           envs[i].env_status=ENV_FREE;
           envs[i].env_parent_id=0;
           envs[i].env_link= env_free_list;
           env_free_list= &envs[i]; 
f0102f3c:	89 d9                	mov    %ebx,%ecx
f0102f3e:	eb da                	jmp    f0102f1a <env_init+0x1b>
f0102f40:	83 c6 60             	add    $0x60,%esi
f0102f43:	89 35 ec c1 17 f0    	mov    %esi,0xf017c1ec
        }

        

	// Per-CPU part of the initialization
	env_init_percpu();
f0102f49:	e8 87 ff ff ff       	call   f0102ed5 <env_init_percpu>
       
}
f0102f4e:	5b                   	pop    %ebx
f0102f4f:	5e                   	pop    %esi
f0102f50:	5d                   	pop    %ebp
f0102f51:	c3                   	ret    

f0102f52 <env_alloc>:
//	-E_NO_FREE_ENV if all NENVS environments are allocated
//	-E_NO_MEM on memory exhaustion
//
int
env_alloc(struct Env **newenv_store, envid_t parent_id)
{
f0102f52:	55                   	push   %ebp
f0102f53:	89 e5                	mov    %esp,%ebp
f0102f55:	53                   	push   %ebx
f0102f56:	83 ec 14             	sub    $0x14,%esp
	int32_t generation;
	int r;
	struct Env *e;

	if (!(e = env_free_list))
f0102f59:	8b 1d ec c1 17 f0    	mov    0xf017c1ec,%ebx
f0102f5f:	85 db                	test   %ebx,%ebx
f0102f61:	0f 84 51 01 00 00    	je     f01030b8 <env_alloc+0x166>
{
	uint32_t i;
	struct PageInfo *p = NULL;

	// Allocate a page for the page directory
	if (!(p = page_alloc(ALLOC_ZERO)))
f0102f67:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
f0102f6e:	e8 02 df ff ff       	call   f0100e75 <page_alloc>
f0102f73:	85 c0                	test   %eax,%eax
f0102f75:	0f 84 44 01 00 00    	je     f01030bf <env_alloc+0x16d>
f0102f7b:	89 c2                	mov    %eax,%edx
f0102f7d:	2b 15 ac ce 17 f0    	sub    0xf017ceac,%edx
f0102f83:	c1 fa 03             	sar    $0x3,%edx
f0102f86:	c1 e2 0c             	shl    $0xc,%edx
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f0102f89:	89 d1                	mov    %edx,%ecx
f0102f8b:	c1 e9 0c             	shr    $0xc,%ecx
f0102f8e:	3b 0d a4 ce 17 f0    	cmp    0xf017cea4,%ecx
f0102f94:	72 20                	jb     f0102fb6 <env_alloc+0x64>
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f0102f96:	89 54 24 0c          	mov    %edx,0xc(%esp)
f0102f9a:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f0102fa1:	f0 
f0102fa2:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
f0102fa9:	00 
f0102faa:	c7 04 24 a0 4e 10 f0 	movl   $0xf0104ea0,(%esp)
f0102fb1:	e8 00 d1 ff ff       	call   f01000b6 <_panic>
	return (void *)(pa + KERNBASE);
f0102fb6:	81 ea 00 00 00 10    	sub    $0x10000000,%edx
f0102fbc:	89 53 5c             	mov    %edx,0x5c(%ebx)
	//    - The functions in kern/pmap.h are handy.

	// LAB 3: Your code here.
           
          e->env_pgdir=(pte_t*)page2kva(p);
          p->pp_ref++;
f0102fbf:	66 83 40 04 01       	addw   $0x1,0x4(%eax)
          }


	// UVPT maps the env's own page table read-only.
	// Permissions: kernel R, user R
	e->env_pgdir[PDX(UVPT)] = PADDR(e->env_pgdir) | PTE_P | PTE_U;
f0102fc4:	8b 43 5c             	mov    0x5c(%ebx),%eax
#define PADDR(kva) _paddr(__FILE__, __LINE__, kva)

static inline physaddr_t
_paddr(const char *file, int line, void *kva)
{
	if ((uint32_t)kva < KERNBASE)
f0102fc7:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
f0102fcc:	77 20                	ja     f0102fee <env_alloc+0x9c>
		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
f0102fce:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0102fd2:	c7 44 24 08 74 52 10 	movl   $0xf0105274,0x8(%esp)
f0102fd9:	f0 
f0102fda:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
f0102fe1:	00 
f0102fe2:	c7 04 24 6e 59 10 f0 	movl   $0xf010596e,(%esp)
f0102fe9:	e8 c8 d0 ff ff       	call   f01000b6 <_panic>
	return (physaddr_t)kva - KERNBASE;
f0102fee:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0102ff4:	83 ca 05             	or     $0x5,%edx
f0102ff7:	89 90 f4 0e 00 00    	mov    %edx,0xef4(%eax)
	// Allocate and set up the page directory for this environment.
	if ((r = env_setup_vm(e)) < 0)
		return r;

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
f0102ffd:	8b 43 48             	mov    0x48(%ebx),%eax
f0103000:	05 00 10 00 00       	add    $0x1000,%eax
	if (generation <= 0)	// Don't create a negative env_id.
f0103005:	25 00 fc ff ff       	and    $0xfffffc00,%eax
		generation = 1 << ENVGENSHIFT;
f010300a:	ba 00 10 00 00       	mov    $0x1000,%edx
f010300f:	0f 4e c2             	cmovle %edx,%eax
	e->env_id = generation | (e - envs);
f0103012:	89 da                	mov    %ebx,%edx
f0103014:	2b 15 e8 c1 17 f0    	sub    0xf017c1e8,%edx
f010301a:	c1 fa 05             	sar    $0x5,%edx
f010301d:	69 d2 ab aa aa aa    	imul   $0xaaaaaaab,%edx,%edx
f0103023:	09 d0                	or     %edx,%eax
f0103025:	89 43 48             	mov    %eax,0x48(%ebx)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
f0103028:	8b 45 0c             	mov    0xc(%ebp),%eax
f010302b:	89 43 4c             	mov    %eax,0x4c(%ebx)
	e->env_type = ENV_TYPE_USER;
f010302e:	c7 43 50 00 00 00 00 	movl   $0x0,0x50(%ebx)
	e->env_status = ENV_RUNNABLE;
f0103035:	c7 43 54 02 00 00 00 	movl   $0x2,0x54(%ebx)
	e->env_runs = 0;
f010303c:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f0103043:	c7 44 24 08 44 00 00 	movl   $0x44,0x8(%esp)
f010304a:	00 
f010304b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
f0103052:	00 
f0103053:	89 1c 24             	mov    %ebx,(%esp)
f0103056:	e8 5c 14 00 00       	call   f01044b7 <memset>
	// The low 2 bits of each segment register contains the
	// Requestor Privilege Level (RPL); 3 means user mode.  When
	// we switch privilege levels, the hardware does various
	// checks involving the RPL and the Descriptor Privilege Level
	// (DPL) stored in the descriptors themselves.
	e->env_tf.tf_ds = GD_UD | 3;
f010305b:	66 c7 43 24 23 00    	movw   $0x23,0x24(%ebx)
	e->env_tf.tf_es = GD_UD | 3;
f0103061:	66 c7 43 20 23 00    	movw   $0x23,0x20(%ebx)
	e->env_tf.tf_ss = GD_UD | 3;
f0103067:	66 c7 43 40 23 00    	movw   $0x23,0x40(%ebx)
	e->env_tf.tf_esp = USTACKTOP;
f010306d:	c7 43 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%ebx)
	e->env_tf.tf_cs = GD_UT | 3;
f0103074:	66 c7 43 34 1b 00    	movw   $0x1b,0x34(%ebx)
	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	env_free_list = e->env_link;
f010307a:	8b 43 44             	mov    0x44(%ebx),%eax
f010307d:	a3 ec c1 17 f0       	mov    %eax,0xf017c1ec
	*newenv_store = e;
f0103082:	8b 45 08             	mov    0x8(%ebp),%eax
f0103085:	89 18                	mov    %ebx,(%eax)

	cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
f0103087:	8b 53 48             	mov    0x48(%ebx),%edx
f010308a:	a1 e4 c1 17 f0       	mov    0xf017c1e4,%eax
f010308f:	85 c0                	test   %eax,%eax
f0103091:	74 05                	je     f0103098 <env_alloc+0x146>
f0103093:	8b 40 48             	mov    0x48(%eax),%eax
f0103096:	eb 05                	jmp    f010309d <env_alloc+0x14b>
f0103098:	b8 00 00 00 00       	mov    $0x0,%eax
f010309d:	89 54 24 08          	mov    %edx,0x8(%esp)
f01030a1:	89 44 24 04          	mov    %eax,0x4(%esp)
f01030a5:	c7 04 24 79 59 10 f0 	movl   $0xf0105979,(%esp)
f01030ac:	e8 7a 04 00 00       	call   f010352b <cprintf>
	return 0;
f01030b1:	b8 00 00 00 00       	mov    $0x0,%eax
f01030b6:	eb 0c                	jmp    f01030c4 <env_alloc+0x172>
	int32_t generation;
	int r;
	struct Env *e;

	if (!(e = env_free_list))
		return -E_NO_FREE_ENV;
f01030b8:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f01030bd:	eb 05                	jmp    f01030c4 <env_alloc+0x172>
	uint32_t i;
	struct PageInfo *p = NULL;

	// Allocate a page for the page directory
	if (!(p = page_alloc(ALLOC_ZERO)))
		return -E_NO_MEM;
f01030bf:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
	env_free_list = e->env_link;
	*newenv_store = e;

	cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
	return 0;
}
f01030c4:	83 c4 14             	add    $0x14,%esp
f01030c7:	5b                   	pop    %ebx
f01030c8:	5d                   	pop    %ebp
f01030c9:	c3                   	ret    

f01030ca <env_create>:
// before running the first user-mode environment.
// The new env's parent ID is set to 0.
//
void
env_create(uint8_t *binary, enum EnvType type)
 { 
f01030ca:	55                   	push   %ebp
f01030cb:	89 e5                	mov    %esp,%ebp
f01030cd:	57                   	push   %edi
f01030ce:	56                   	push   %esi
f01030cf:	53                   	push   %ebx
f01030d0:	83 ec 3c             	sub    $0x3c,%esp
      
      uint32_t check;
      struct Env *e=NULL;  
f01030d3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
          
      check=env_alloc(&e, 0);
f01030da:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
f01030e1:	00 
f01030e2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01030e5:	89 04 24             	mov    %eax,(%esp)
f01030e8:	e8 65 fe ff ff       	call   f0102f52 <env_alloc>
      

 if(check==0)
f01030ed:	85 c0                	test   %eax,%eax
f01030ef:	0f 85 15 01 00 00    	jne    f010320a <env_create+0x140>
{
    
 load_icode(e, binary);
f01030f5:	8b 7d e4             	mov    -0x1c(%ebp),%edi

          #define ELFHDR		((struct Elf *) 0x10000) 
         
          struct Proghdr *ph, *eph;
          uint32_t i;
          ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
f01030f8:	a1 1c 00 01 00       	mov    0x1001c,%eax
f01030fd:	05 00 00 01 00       	add    $0x10000,%eax
f0103102:	89 c2                	mov    %eax,%edx
f0103104:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 	  eph = ph + ELFHDR->e_phnum;
f0103107:	0f b7 05 2c 00 01 00 	movzwl 0x1002c,%eax
f010310e:	c1 e0 05             	shl    $0x5,%eax
f0103111:	01 d0                	add    %edx,%eax
f0103113:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0103116:	e9 e1 00 00 00       	jmp    f01031fc <env_create+0x132>
         
          for (; ph < eph; ph++)
         {

           if(ph->p_type == ELF_PROG_LOAD)
f010311b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010311e:	83 38 01             	cmpl   $0x1,(%eax)
f0103121:	0f 85 b4 00 00 00    	jne    f01031db <env_create+0x111>
           {

               if(ph->p_filesz <= ph->p_memsz)
f0103127:	8b 50 14             	mov    0x14(%eax),%edx
f010312a:	39 50 10             	cmp    %edx,0x10(%eax)
f010312d:	77 1c                	ja     f010314b <env_create+0x81>
               {
                     panic(" Memsize is greater than filesize");
f010312f:	c7 44 24 08 14 59 10 	movl   $0xf0105914,0x8(%esp)
f0103136:	f0 
f0103137:	c7 44 24 04 93 01 00 	movl   $0x193,0x4(%esp)
f010313e:	00 
f010313f:	c7 04 24 6e 59 10 f0 	movl   $0xf010596e,(%esp)
f0103146:	e8 6b cf ff ff       	call   f01000b6 <_panic>
               }
             
              region_alloc(e,(void*)ph->p_va,ph->p_memsz);
f010314b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010314e:	8b 40 08             	mov    0x8(%eax),%eax
            void *start;
            void *end;
            void* i;
            uint32_t insert;
            struct PageInfo *pp;
            start= ROUNDDOWN(va,PGSIZE);
f0103151:	89 c3                	mov    %eax,%ebx
f0103153:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
            end= ROUNDUP(va+len,PGSIZE);
f0103159:	8d b4 02 ff 0f 00 00 	lea    0xfff(%edx,%eax,1),%esi
f0103160:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
f0103166:	eb 6d                	jmp    f01031d5 <env_create+0x10b>
        
          for(i=start; i<end; i=i+PGSIZE)
         {
              pp=page_alloc(ALLOC_ZERO);
f0103168:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
f010316f:	e8 01 dd ff ff       	call   f0100e75 <page_alloc>
              if(pp==NULL)
f0103174:	85 c0                	test   %eax,%eax
f0103176:	75 1c                	jne    f0103194 <env_create+0xca>
            {
               panic("Page allocation failed");
f0103178:	c7 44 24 08 8e 59 10 	movl   $0xf010598e,0x8(%esp)
f010317f:	f0 
f0103180:	c7 44 24 04 37 01 00 	movl   $0x137,0x4(%esp)
f0103187:	00 
f0103188:	c7 04 24 6e 59 10 f0 	movl   $0xf010596e,(%esp)
f010318f:	e8 22 cf ff ff       	call   f01000b6 <_panic>
            } 
               
               insert= page_insert(e->env_pgdir,pp,(void*) i, PTE_W);
f0103194:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
f010319b:	00 
f010319c:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f01031a0:	89 44 24 04          	mov    %eax,0x4(%esp)
f01031a4:	8b 47 5c             	mov    0x5c(%edi),%eax
f01031a7:	89 04 24             	mov    %eax,(%esp)
f01031aa:	e8 de df ff ff       	call   f010118d <page_insert>
               
               if(insert!=0)
f01031af:	85 c0                	test   %eax,%eax
f01031b1:	74 1c                	je     f01031cf <env_create+0x105>
               {
                 panic("Page allocation failed");
f01031b3:	c7 44 24 08 8e 59 10 	movl   $0xf010598e,0x8(%esp)
f01031ba:	f0 
f01031bb:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
f01031c2:	00 
f01031c3:	c7 04 24 6e 59 10 f0 	movl   $0xf010596e,(%esp)
f01031ca:	e8 e7 ce ff ff       	call   f01000b6 <_panic>
            uint32_t insert;
            struct PageInfo *pp;
            start= ROUNDDOWN(va,PGSIZE);
            end= ROUNDUP(va+len,PGSIZE);
        
          for(i=start; i<end; i=i+PGSIZE)
f01031cf:	81 c3 00 10 00 00    	add    $0x1000,%ebx
f01031d5:	39 de                	cmp    %ebx,%esi
f01031d7:	77 8f                	ja     f0103168 <env_create+0x9e>
f01031d9:	eb 1d                	jmp    f01031f8 <env_create+0x12e>

           else

            {

              memset((void*)ph->p_va,0,ph->p_memsz);            
f01031db:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
f01031de:	8b 41 14             	mov    0x14(%ecx),%eax
f01031e1:	89 44 24 08          	mov    %eax,0x8(%esp)
f01031e5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
f01031ec:	00 
f01031ed:	8b 41 08             	mov    0x8(%ecx),%eax
f01031f0:	89 04 24             	mov    %eax,(%esp)
f01031f3:	e8 bf 12 00 00       	call   f01044b7 <memset>
          struct Proghdr *ph, *eph;
          uint32_t i;
          ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
 	  eph = ph + ELFHDR->e_phnum;
         
          for (; ph < eph; ph++)
f01031f8:	83 45 d4 20          	addl   $0x20,-0x2c(%ebp)
f01031fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01031ff:	39 45 d0             	cmp    %eax,-0x30(%ebp)
f0103202:	0f 87 13 ff ff ff    	ja     f010311b <env_create+0x51>
f0103208:	eb 1c                	jmp    f0103226 <env_create+0x15c>
 load_icode(e, binary);
}

else
{
 panic("Env_alloc has failed");
f010320a:	c7 44 24 08 a5 59 10 	movl   $0xf01059a5,0x8(%esp)
f0103211:	f0 
f0103212:	c7 44 24 04 c0 01 00 	movl   $0x1c0,0x4(%esp)
f0103219:	00 
f010321a:	c7 04 24 6e 59 10 f0 	movl   $0xf010596e,(%esp)
f0103221:	e8 90 ce ff ff       	call   f01000b6 <_panic>

}


// LAB 3: Your code here.
}
f0103226:	83 c4 3c             	add    $0x3c,%esp
f0103229:	5b                   	pop    %ebx
f010322a:	5e                   	pop    %esi
f010322b:	5f                   	pop    %edi
f010322c:	5d                   	pop    %ebp
f010322d:	c3                   	ret    

f010322e <env_free>:
//
// Frees env e and all memory it uses.
//
void
env_free(struct Env *e)
{
f010322e:	55                   	push   %ebp
f010322f:	89 e5                	mov    %esp,%ebp
f0103231:	57                   	push   %edi
f0103232:	56                   	push   %esi
f0103233:	53                   	push   %ebx
f0103234:	83 ec 2c             	sub    $0x2c,%esp
f0103237:	8b 7d 08             	mov    0x8(%ebp),%edi
	physaddr_t pa;

	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (e == curenv)
f010323a:	a1 e4 c1 17 f0       	mov    0xf017c1e4,%eax
f010323f:	39 c7                	cmp    %eax,%edi
f0103241:	75 37                	jne    f010327a <env_free+0x4c>
		lcr3(PADDR(kern_pgdir));
f0103243:	8b 15 a8 ce 17 f0    	mov    0xf017cea8,%edx
#define PADDR(kva) _paddr(__FILE__, __LINE__, kva)

static inline physaddr_t
_paddr(const char *file, int line, void *kva)
{
	if ((uint32_t)kva < KERNBASE)
f0103249:	81 fa ff ff ff ef    	cmp    $0xefffffff,%edx
f010324f:	77 20                	ja     f0103271 <env_free+0x43>
		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
f0103251:	89 54 24 0c          	mov    %edx,0xc(%esp)
f0103255:	c7 44 24 08 74 52 10 	movl   $0xf0105274,0x8(%esp)
f010325c:	f0 
f010325d:	c7 44 24 04 d6 01 00 	movl   $0x1d6,0x4(%esp)
f0103264:	00 
f0103265:	c7 04 24 6e 59 10 f0 	movl   $0xf010596e,(%esp)
f010326c:	e8 45 ce ff ff       	call   f01000b6 <_panic>
	return (physaddr_t)kva - KERNBASE;
f0103271:	81 c2 00 00 00 10    	add    $0x10000000,%edx
}

static inline void
lcr3(uint32_t val)
{
	asm volatile("movl %0,%%cr3" : : "r" (val));
f0103277:	0f 22 da             	mov    %edx,%cr3

	// Note the environment's demise.
	cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
f010327a:	8b 57 48             	mov    0x48(%edi),%edx
f010327d:	85 c0                	test   %eax,%eax
f010327f:	74 05                	je     f0103286 <env_free+0x58>
f0103281:	8b 40 48             	mov    0x48(%eax),%eax
f0103284:	eb 05                	jmp    f010328b <env_free+0x5d>
f0103286:	b8 00 00 00 00       	mov    $0x0,%eax
f010328b:	89 54 24 08          	mov    %edx,0x8(%esp)
f010328f:	89 44 24 04          	mov    %eax,0x4(%esp)
f0103293:	c7 04 24 ba 59 10 f0 	movl   $0xf01059ba,(%esp)
f010329a:	e8 8c 02 00 00       	call   f010352b <cprintf>

	// Flush all mapped pages in the user portion of the address space
	static_assert(UTOP % PTSIZE == 0);
	for (pdeno = 0; pdeno < PDX(UTOP); pdeno++) {
f010329f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01032a6:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01032a9:	89 c8                	mov    %ecx,%eax
f01032ab:	c1 e0 02             	shl    $0x2,%eax
f01032ae:	89 45 dc             	mov    %eax,-0x24(%ebp)

		// only look at mapped page tables
		if (!(e->env_pgdir[pdeno] & PTE_P))
f01032b1:	8b 47 5c             	mov    0x5c(%edi),%eax
f01032b4:	8b 34 88             	mov    (%eax,%ecx,4),%esi
f01032b7:	f7 c6 01 00 00 00    	test   $0x1,%esi
f01032bd:	0f 84 b7 00 00 00    	je     f010337a <env_free+0x14c>
			continue;

		// find the pa and va of the page table
		pa = PTE_ADDR(e->env_pgdir[pdeno]);
f01032c3:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)

static inline void*
_kaddr(const char *file, int line, physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f01032c9:	89 f0                	mov    %esi,%eax
f01032cb:	c1 e8 0c             	shr    $0xc,%eax
f01032ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01032d1:	3b 05 a4 ce 17 f0    	cmp    0xf017cea4,%eax
f01032d7:	72 20                	jb     f01032f9 <env_free+0xcb>
		_panic(file, line, "KADDR called with invalid pa %08lx", pa);
f01032d9:	89 74 24 0c          	mov    %esi,0xc(%esp)
f01032dd:	c7 44 24 08 8c 51 10 	movl   $0xf010518c,0x8(%esp)
f01032e4:	f0 
f01032e5:	c7 44 24 04 e5 01 00 	movl   $0x1e5,0x4(%esp)
f01032ec:	00 
f01032ed:	c7 04 24 6e 59 10 f0 	movl   $0xf010596e,(%esp)
f01032f4:	e8 bd cd ff ff       	call   f01000b6 <_panic>
		pt = (pte_t*) KADDR(pa);

		// unmap all PTEs in this page table
		for (pteno = 0; pteno <= PTX(~0); pteno++) {
			if (pt[pteno] & PTE_P)
				page_remove(e->env_pgdir, PGADDR(pdeno, pteno, 0));
f01032f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01032fc:	c1 e0 16             	shl    $0x16,%eax
f01032ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// find the pa and va of the page table
		pa = PTE_ADDR(e->env_pgdir[pdeno]);
		pt = (pte_t*) KADDR(pa);

		// unmap all PTEs in this page table
		for (pteno = 0; pteno <= PTX(~0); pteno++) {
f0103302:	bb 00 00 00 00       	mov    $0x0,%ebx
			if (pt[pteno] & PTE_P)
f0103307:	f6 84 9e 00 00 00 f0 	testb  $0x1,-0x10000000(%esi,%ebx,4)
f010330e:	01 
f010330f:	74 17                	je     f0103328 <env_free+0xfa>
				page_remove(e->env_pgdir, PGADDR(pdeno, pteno, 0));
f0103311:	89 d8                	mov    %ebx,%eax
f0103313:	c1 e0 0c             	shl    $0xc,%eax
f0103316:	0b 45 e4             	or     -0x1c(%ebp),%eax
f0103319:	89 44 24 04          	mov    %eax,0x4(%esp)
f010331d:	8b 47 5c             	mov    0x5c(%edi),%eax
f0103320:	89 04 24             	mov    %eax,(%esp)
f0103323:	e8 20 de ff ff       	call   f0101148 <page_remove>
		// find the pa and va of the page table
		pa = PTE_ADDR(e->env_pgdir[pdeno]);
		pt = (pte_t*) KADDR(pa);

		// unmap all PTEs in this page table
		for (pteno = 0; pteno <= PTX(~0); pteno++) {
f0103328:	83 c3 01             	add    $0x1,%ebx
f010332b:	81 fb 00 04 00 00    	cmp    $0x400,%ebx
f0103331:	75 d4                	jne    f0103307 <env_free+0xd9>
			if (pt[pteno] & PTE_P)
				page_remove(e->env_pgdir, PGADDR(pdeno, pteno, 0));
		}

		// free the page table itself
		e->env_pgdir[pdeno] = 0;
f0103333:	8b 47 5c             	mov    0x5c(%edi),%eax
f0103336:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0103339:	c7 04 10 00 00 00 00 	movl   $0x0,(%eax,%edx,1)
}

static inline struct PageInfo*
pa2page(physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f0103340:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103343:	3b 05 a4 ce 17 f0    	cmp    0xf017cea4,%eax
f0103349:	72 1c                	jb     f0103367 <env_free+0x139>
		panic("pa2page called with invalid pa");
f010334b:	c7 44 24 08 98 52 10 	movl   $0xf0105298,0x8(%esp)
f0103352:	f0 
f0103353:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
f010335a:	00 
f010335b:	c7 04 24 a0 4e 10 f0 	movl   $0xf0104ea0,(%esp)
f0103362:	e8 4f cd ff ff       	call   f01000b6 <_panic>
	return &pages[PGNUM(pa)];
f0103367:	a1 ac ce 17 f0       	mov    0xf017ceac,%eax
f010336c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010336f:	8d 04 d0             	lea    (%eax,%edx,8),%eax
		page_decref(pa2page(pa));
f0103372:	89 04 24             	mov    %eax,(%esp)
f0103375:	e8 c3 db ff ff       	call   f0100f3d <page_decref>
	// Note the environment's demise.
	cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);

	// Flush all mapped pages in the user portion of the address space
	static_assert(UTOP % PTSIZE == 0);
	for (pdeno = 0; pdeno < PDX(UTOP); pdeno++) {
f010337a:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
f010337e:	81 7d e0 bb 03 00 00 	cmpl   $0x3bb,-0x20(%ebp)
f0103385:	0f 85 1b ff ff ff    	jne    f01032a6 <env_free+0x78>
		e->env_pgdir[pdeno] = 0;
		page_decref(pa2page(pa));
	}

	// free the page directory
	pa = PADDR(e->env_pgdir);
f010338b:	8b 47 5c             	mov    0x5c(%edi),%eax
#define PADDR(kva) _paddr(__FILE__, __LINE__, kva)

static inline physaddr_t
_paddr(const char *file, int line, void *kva)
{
	if ((uint32_t)kva < KERNBASE)
f010338e:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
f0103393:	77 20                	ja     f01033b5 <env_free+0x187>
		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
f0103395:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0103399:	c7 44 24 08 74 52 10 	movl   $0xf0105274,0x8(%esp)
f01033a0:	f0 
f01033a1:	c7 44 24 04 f3 01 00 	movl   $0x1f3,0x4(%esp)
f01033a8:	00 
f01033a9:	c7 04 24 6e 59 10 f0 	movl   $0xf010596e,(%esp)
f01033b0:	e8 01 cd ff ff       	call   f01000b6 <_panic>
	e->env_pgdir = 0;
f01033b5:	c7 47 5c 00 00 00 00 	movl   $0x0,0x5c(%edi)
	return (physaddr_t)kva - KERNBASE;
f01033bc:	05 00 00 00 10       	add    $0x10000000,%eax
}

static inline struct PageInfo*
pa2page(physaddr_t pa)
{
	if (PGNUM(pa) >= npages)
f01033c1:	c1 e8 0c             	shr    $0xc,%eax
f01033c4:	3b 05 a4 ce 17 f0    	cmp    0xf017cea4,%eax
f01033ca:	72 1c                	jb     f01033e8 <env_free+0x1ba>
		panic("pa2page called with invalid pa");
f01033cc:	c7 44 24 08 98 52 10 	movl   $0xf0105298,0x8(%esp)
f01033d3:	f0 
f01033d4:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
f01033db:	00 
f01033dc:	c7 04 24 a0 4e 10 f0 	movl   $0xf0104ea0,(%esp)
f01033e3:	e8 ce cc ff ff       	call   f01000b6 <_panic>
	return &pages[PGNUM(pa)];
f01033e8:	8b 15 ac ce 17 f0    	mov    0xf017ceac,%edx
f01033ee:	8d 04 c2             	lea    (%edx,%eax,8),%eax
	page_decref(pa2page(pa));
f01033f1:	89 04 24             	mov    %eax,(%esp)
f01033f4:	e8 44 db ff ff       	call   f0100f3d <page_decref>

	// return the environment to the free list
	e->env_status = ENV_FREE;
f01033f9:	c7 47 54 00 00 00 00 	movl   $0x0,0x54(%edi)
	e->env_link = env_free_list;
f0103400:	a1 ec c1 17 f0       	mov    0xf017c1ec,%eax
f0103405:	89 47 44             	mov    %eax,0x44(%edi)
	env_free_list = e;
f0103408:	89 3d ec c1 17 f0    	mov    %edi,0xf017c1ec
}
f010340e:	83 c4 2c             	add    $0x2c,%esp
f0103411:	5b                   	pop    %ebx
f0103412:	5e                   	pop    %esi
f0103413:	5f                   	pop    %edi
f0103414:	5d                   	pop    %ebp
f0103415:	c3                   	ret    

f0103416 <env_destroy>:
//
// Frees environment e.
//
void
env_destroy(struct Env *e)
{
f0103416:	55                   	push   %ebp
f0103417:	89 e5                	mov    %esp,%ebp
f0103419:	83 ec 18             	sub    $0x18,%esp
	env_free(e);
f010341c:	8b 45 08             	mov    0x8(%ebp),%eax
f010341f:	89 04 24             	mov    %eax,(%esp)
f0103422:	e8 07 fe ff ff       	call   f010322e <env_free>

	cprintf("Destroyed the only environment - nothing more to do!\n");
f0103427:	c7 04 24 38 59 10 f0 	movl   $0xf0105938,(%esp)
f010342e:	e8 f8 00 00 00       	call   f010352b <cprintf>
	while (1)
		monitor(NULL);
f0103433:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f010343a:	e8 dc d3 ff ff       	call   f010081b <monitor>
f010343f:	eb f2                	jmp    f0103433 <env_destroy+0x1d>

f0103441 <env_pop_tf>:
//
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0103441:	55                   	push   %ebp
f0103442:	89 e5                	mov    %esp,%ebp
f0103444:	83 ec 18             	sub    $0x18,%esp
	asm volatile(
f0103447:	8b 65 08             	mov    0x8(%ebp),%esp
f010344a:	61                   	popa   
f010344b:	07                   	pop    %es
f010344c:	1f                   	pop    %ds
f010344d:	83 c4 08             	add    $0x8,%esp
f0103450:	cf                   	iret   
		"\tpopl %%es\n"
		"\tpopl %%ds\n"
		"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
		"\tiret\n"
		: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0103451:	c7 44 24 08 d0 59 10 	movl   $0xf01059d0,0x8(%esp)
f0103458:	f0 
f0103459:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
f0103460:	00 
f0103461:	c7 04 24 6e 59 10 f0 	movl   $0xf010596e,(%esp)
f0103468:	e8 49 cc ff ff       	call   f01000b6 <_panic>

f010346d <env_run>:
//
// This function does not return.
//
void
env_run(struct Env *e)
{
f010346d:	55                   	push   %ebp
f010346e:	89 e5                	mov    %esp,%ebp
f0103470:	83 ec 18             	sub    $0x18,%esp
f0103473:	8b 45 08             	mov    0x8(%ebp),%eax
            {
               curenv->env_status==ENV_RUNNABLE;
            }            

         }
         curenv=e;
f0103476:	a3 e4 c1 17 f0       	mov    %eax,0xf017c1e4
         curenv->env_status==ENV_RUNNING;
         curenv->env_runs ++;
f010347b:	83 40 58 01          	addl   $0x1,0x58(%eax)
         
          lcr3(PADDR(curenv->env_pgdir));      //Switching to user address space.       
f010347f:	8b 50 5c             	mov    0x5c(%eax),%edx
#define PADDR(kva) _paddr(__FILE__, __LINE__, kva)

static inline physaddr_t
_paddr(const char *file, int line, void *kva)
{
	if ((uint32_t)kva < KERNBASE)
f0103482:	81 fa ff ff ff ef    	cmp    $0xefffffff,%edx
f0103488:	77 20                	ja     f01034aa <env_run+0x3d>
		_panic(file, line, "PADDR called with invalid kva %08lx", kva);
f010348a:	89 54 24 0c          	mov    %edx,0xc(%esp)
f010348e:	c7 44 24 08 74 52 10 	movl   $0xf0105274,0x8(%esp)
f0103495:	f0 
f0103496:	c7 44 24 04 45 02 00 	movl   $0x245,0x4(%esp)
f010349d:	00 
f010349e:	c7 04 24 6e 59 10 f0 	movl   $0xf010596e,(%esp)
f01034a5:	e8 0c cc ff ff       	call   f01000b6 <_panic>
	return (physaddr_t)kva - KERNBASE;
f01034aa:	81 c2 00 00 00 10    	add    $0x10000000,%edx
f01034b0:	0f 22 da             	mov    %edx,%cr3

         env_pop_tf(&(curenv->env_tf));       // TRAP FRAME.
f01034b3:	89 04 24             	mov    %eax,(%esp)
f01034b6:	e8 86 ff ff ff       	call   f0103441 <env_pop_tf>

f01034bb <mc146818_read>:
#include <kern/kclock.h>


unsigned
mc146818_read(unsigned reg)
{
f01034bb:	55                   	push   %ebp
f01034bc:	89 e5                	mov    %esp,%ebp
f01034be:	0f b6 45 08          	movzbl 0x8(%ebp),%eax
}

static inline void
outb(int port, uint8_t data)
{
	asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01034c2:	ba 70 00 00 00       	mov    $0x70,%edx
f01034c7:	ee                   	out    %al,(%dx)

static inline uint8_t
inb(int port)
{
	uint8_t data;
	asm volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01034c8:	b2 71                	mov    $0x71,%dl
f01034ca:	ec                   	in     (%dx),%al
	outb(IO_RTC, reg);
	return inb(IO_RTC+1);
f01034cb:	0f b6 c0             	movzbl %al,%eax
}
f01034ce:	5d                   	pop    %ebp
f01034cf:	c3                   	ret    

f01034d0 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01034d0:	55                   	push   %ebp
f01034d1:	89 e5                	mov    %esp,%ebp
f01034d3:	0f b6 45 08          	movzbl 0x8(%ebp),%eax
}

static inline void
outb(int port, uint8_t data)
{
	asm volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01034d7:	ba 70 00 00 00       	mov    $0x70,%edx
f01034dc:	ee                   	out    %al,(%dx)
f01034dd:	b2 71                	mov    $0x71,%dl
f01034df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034e2:	ee                   	out    %al,(%dx)
	outb(IO_RTC, reg);
	outb(IO_RTC+1, datum);
}
f01034e3:	5d                   	pop    %ebp
f01034e4:	c3                   	ret    

f01034e5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f01034e5:	55                   	push   %ebp
f01034e6:	89 e5                	mov    %esp,%ebp
f01034e8:	83 ec 18             	sub    $0x18,%esp
	cputchar(ch);
f01034eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01034ee:	89 04 24             	mov    %eax,(%esp)
f01034f1:	e8 2b d1 ff ff       	call   f0100621 <cputchar>
	*cnt++;
}
f01034f6:	c9                   	leave  
f01034f7:	c3                   	ret    

f01034f8 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f01034f8:	55                   	push   %ebp
f01034f9:	89 e5                	mov    %esp,%ebp
f01034fb:	83 ec 28             	sub    $0x28,%esp
	int cnt = 0;
f01034fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0103505:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103508:	89 44 24 0c          	mov    %eax,0xc(%esp)
f010350c:	8b 45 08             	mov    0x8(%ebp),%eax
f010350f:	89 44 24 08          	mov    %eax,0x8(%esp)
f0103513:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0103516:	89 44 24 04          	mov    %eax,0x4(%esp)
f010351a:	c7 04 24 e5 34 10 f0 	movl   $0xf01034e5,(%esp)
f0103521:	e8 d8 08 00 00       	call   f0103dfe <vprintfmt>
	return cnt;
}
f0103526:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103529:	c9                   	leave  
f010352a:	c3                   	ret    

f010352b <cprintf>:

int
cprintf(const char *fmt, ...)
{
f010352b:	55                   	push   %ebp
f010352c:	89 e5                	mov    %esp,%ebp
f010352e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0103531:	8d 45 0c             	lea    0xc(%ebp),%eax
	cnt = vcprintf(fmt, ap);
f0103534:	89 44 24 04          	mov    %eax,0x4(%esp)
f0103538:	8b 45 08             	mov    0x8(%ebp),%eax
f010353b:	89 04 24             	mov    %eax,(%esp)
f010353e:	e8 b5 ff ff ff       	call   f01034f8 <vcprintf>
	va_end(ap);

	return cnt;
}
f0103543:	c9                   	leave  
f0103544:	c3                   	ret    

f0103545 <trap_init_percpu>:
}

// Initialize and load the per-CPU TSS and IDT
void
trap_init_percpu(void)
{
f0103545:	55                   	push   %ebp
f0103546:	89 e5                	mov    %esp,%ebp
	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KSTACKTOP;
f0103548:	c7 05 24 ca 17 f0 00 	movl   $0xf0000000,0xf017ca24
f010354f:	00 00 f0 
	ts.ts_ss0 = GD_KD;
f0103552:	66 c7 05 28 ca 17 f0 	movw   $0x10,0xf017ca28
f0103559:	10 00 

	// Initialize the TSS slot of the gdt.
	gdt[GD_TSS0 >> 3] = SEG16(STS_T32A, (uint32_t) (&ts),
f010355b:	66 c7 05 48 a3 11 f0 	movw   $0x67,0xf011a348
f0103562:	67 00 
f0103564:	b8 20 ca 17 f0       	mov    $0xf017ca20,%eax
f0103569:	66 a3 4a a3 11 f0    	mov    %ax,0xf011a34a
f010356f:	89 c2                	mov    %eax,%edx
f0103571:	c1 ea 10             	shr    $0x10,%edx
f0103574:	88 15 4c a3 11 f0    	mov    %dl,0xf011a34c
f010357a:	c6 05 4e a3 11 f0 40 	movb   $0x40,0xf011a34e
f0103581:	c1 e8 18             	shr    $0x18,%eax
f0103584:	a2 4f a3 11 f0       	mov    %al,0xf011a34f
					sizeof(struct Taskstate) - 1, 0);
	gdt[GD_TSS0 >> 3].sd_s = 0;
f0103589:	c6 05 4d a3 11 f0 89 	movb   $0x89,0xf011a34d
}

static inline void
ltr(uint16_t sel)
{
	asm volatile("ltr %0" : : "r" (sel));
f0103590:	b8 28 00 00 00       	mov    $0x28,%eax
f0103595:	0f 00 d8             	ltr    %ax
}

static inline void
lidt(void *p)
{
	asm volatile("lidt (%0)" : : "r" (p));
f0103598:	b8 50 a3 11 f0       	mov    $0xf011a350,%eax
f010359d:	0f 01 18             	lidtl  (%eax)
	// bottom three bits are special; we leave them 0)
	ltr(GD_TSS0);

	// Load the IDT
	lidt(&idt_pd);
}
f01035a0:	5d                   	pop    %ebp
f01035a1:	c3                   	ret    

f01035a2 <trap_init>:
}


void
trap_init(void)
{
f01035a2:	55                   	push   %ebp
f01035a3:	89 e5                	mov    %esp,%ebp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.

	// Per-CPU setup 
	trap_init_percpu();
f01035a5:	e8 9b ff ff ff       	call   f0103545 <trap_init_percpu>
}
f01035aa:	5d                   	pop    %ebp
f01035ab:	c3                   	ret    

f01035ac <print_regs>:
	}
}

void
print_regs(struct PushRegs *regs)
{
f01035ac:	55                   	push   %ebp
f01035ad:	89 e5                	mov    %esp,%ebp
f01035af:	53                   	push   %ebx
f01035b0:	83 ec 14             	sub    $0x14,%esp
f01035b3:	8b 5d 08             	mov    0x8(%ebp),%ebx
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f01035b6:	8b 03                	mov    (%ebx),%eax
f01035b8:	89 44 24 04          	mov    %eax,0x4(%esp)
f01035bc:	c7 04 24 dc 59 10 f0 	movl   $0xf01059dc,(%esp)
f01035c3:	e8 63 ff ff ff       	call   f010352b <cprintf>
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f01035c8:	8b 43 04             	mov    0x4(%ebx),%eax
f01035cb:	89 44 24 04          	mov    %eax,0x4(%esp)
f01035cf:	c7 04 24 eb 59 10 f0 	movl   $0xf01059eb,(%esp)
f01035d6:	e8 50 ff ff ff       	call   f010352b <cprintf>
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f01035db:	8b 43 08             	mov    0x8(%ebx),%eax
f01035de:	89 44 24 04          	mov    %eax,0x4(%esp)
f01035e2:	c7 04 24 fa 59 10 f0 	movl   $0xf01059fa,(%esp)
f01035e9:	e8 3d ff ff ff       	call   f010352b <cprintf>
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f01035ee:	8b 43 0c             	mov    0xc(%ebx),%eax
f01035f1:	89 44 24 04          	mov    %eax,0x4(%esp)
f01035f5:	c7 04 24 09 5a 10 f0 	movl   $0xf0105a09,(%esp)
f01035fc:	e8 2a ff ff ff       	call   f010352b <cprintf>
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f0103601:	8b 43 10             	mov    0x10(%ebx),%eax
f0103604:	89 44 24 04          	mov    %eax,0x4(%esp)
f0103608:	c7 04 24 18 5a 10 f0 	movl   $0xf0105a18,(%esp)
f010360f:	e8 17 ff ff ff       	call   f010352b <cprintf>
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f0103614:	8b 43 14             	mov    0x14(%ebx),%eax
f0103617:	89 44 24 04          	mov    %eax,0x4(%esp)
f010361b:	c7 04 24 27 5a 10 f0 	movl   $0xf0105a27,(%esp)
f0103622:	e8 04 ff ff ff       	call   f010352b <cprintf>
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f0103627:	8b 43 18             	mov    0x18(%ebx),%eax
f010362a:	89 44 24 04          	mov    %eax,0x4(%esp)
f010362e:	c7 04 24 36 5a 10 f0 	movl   $0xf0105a36,(%esp)
f0103635:	e8 f1 fe ff ff       	call   f010352b <cprintf>
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010363a:	8b 43 1c             	mov    0x1c(%ebx),%eax
f010363d:	89 44 24 04          	mov    %eax,0x4(%esp)
f0103641:	c7 04 24 45 5a 10 f0 	movl   $0xf0105a45,(%esp)
f0103648:	e8 de fe ff ff       	call   f010352b <cprintf>
}
f010364d:	83 c4 14             	add    $0x14,%esp
f0103650:	5b                   	pop    %ebx
f0103651:	5d                   	pop    %ebp
f0103652:	c3                   	ret    

f0103653 <print_trapframe>:
	lidt(&idt_pd);
}

void
print_trapframe(struct Trapframe *tf)
{
f0103653:	55                   	push   %ebp
f0103654:	89 e5                	mov    %esp,%ebp
f0103656:	56                   	push   %esi
f0103657:	53                   	push   %ebx
f0103658:	83 ec 10             	sub    $0x10,%esp
f010365b:	8b 5d 08             	mov    0x8(%ebp),%ebx
	cprintf("TRAP frame at %p\n", tf);
f010365e:	89 5c 24 04          	mov    %ebx,0x4(%esp)
f0103662:	c7 04 24 7b 5b 10 f0 	movl   $0xf0105b7b,(%esp)
f0103669:	e8 bd fe ff ff       	call   f010352b <cprintf>
	print_regs(&tf->tf_regs);
f010366e:	89 1c 24             	mov    %ebx,(%esp)
f0103671:	e8 36 ff ff ff       	call   f01035ac <print_regs>
	cprintf("  es   0x----%04x\n", tf->tf_es);
f0103676:	0f b7 43 20          	movzwl 0x20(%ebx),%eax
f010367a:	89 44 24 04          	mov    %eax,0x4(%esp)
f010367e:	c7 04 24 96 5a 10 f0 	movl   $0xf0105a96,(%esp)
f0103685:	e8 a1 fe ff ff       	call   f010352b <cprintf>
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010368a:	0f b7 43 24          	movzwl 0x24(%ebx),%eax
f010368e:	89 44 24 04          	mov    %eax,0x4(%esp)
f0103692:	c7 04 24 a9 5a 10 f0 	movl   $0xf0105aa9,(%esp)
f0103699:	e8 8d fe ff ff       	call   f010352b <cprintf>
	cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
f010369e:	8b 43 28             	mov    0x28(%ebx),%eax
		"Alignment Check",
		"Machine-Check",
		"SIMD Floating-Point Exception"
	};

	if (trapno < ARRAY_SIZE(excnames))
f01036a1:	83 f8 13             	cmp    $0x13,%eax
f01036a4:	77 09                	ja     f01036af <print_trapframe+0x5c>
		return excnames[trapno];
f01036a6:	8b 14 85 40 5d 10 f0 	mov    -0xfefa2c0(,%eax,4),%edx
f01036ad:	eb 10                	jmp    f01036bf <print_trapframe+0x6c>
	if (trapno == T_SYSCALL)
		return "System call";
f01036af:	83 f8 30             	cmp    $0x30,%eax
f01036b2:	ba 54 5a 10 f0       	mov    $0xf0105a54,%edx
f01036b7:	b9 60 5a 10 f0       	mov    $0xf0105a60,%ecx
f01036bc:	0f 45 d1             	cmovne %ecx,%edx
{
	cprintf("TRAP frame at %p\n", tf);
	print_regs(&tf->tf_regs);
	cprintf("  es   0x----%04x\n", tf->tf_es);
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
	cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
f01036bf:	89 54 24 08          	mov    %edx,0x8(%esp)
f01036c3:	89 44 24 04          	mov    %eax,0x4(%esp)
f01036c7:	c7 04 24 bc 5a 10 f0 	movl   $0xf0105abc,(%esp)
f01036ce:	e8 58 fe ff ff       	call   f010352b <cprintf>
	// If this trap was a page fault that just happened
	// (so %cr2 is meaningful), print the faulting linear address.
	if (tf == last_tf && tf->tf_trapno == T_PGFLT)
f01036d3:	3b 1d 00 ca 17 f0    	cmp    0xf017ca00,%ebx
f01036d9:	75 19                	jne    f01036f4 <print_trapframe+0xa1>
f01036db:	83 7b 28 0e          	cmpl   $0xe,0x28(%ebx)
f01036df:	75 13                	jne    f01036f4 <print_trapframe+0xa1>

static inline uint32_t
rcr2(void)
{
	uint32_t val;
	asm volatile("movl %%cr2,%0" : "=r" (val));
f01036e1:	0f 20 d0             	mov    %cr2,%eax
		cprintf("  cr2  0x%08x\n", rcr2());
f01036e4:	89 44 24 04          	mov    %eax,0x4(%esp)
f01036e8:	c7 04 24 ce 5a 10 f0 	movl   $0xf0105ace,(%esp)
f01036ef:	e8 37 fe ff ff       	call   f010352b <cprintf>
	cprintf("  err  0x%08x", tf->tf_err);
f01036f4:	8b 43 2c             	mov    0x2c(%ebx),%eax
f01036f7:	89 44 24 04          	mov    %eax,0x4(%esp)
f01036fb:	c7 04 24 dd 5a 10 f0 	movl   $0xf0105add,(%esp)
f0103702:	e8 24 fe ff ff       	call   f010352b <cprintf>
	// For page faults, print decoded fault error code:
	// U/K=fault occurred in user/kernel mode
	// W/R=a write/read caused the fault
	// PR=a protection violation caused the fault (NP=page not present).
	if (tf->tf_trapno == T_PGFLT)
f0103707:	83 7b 28 0e          	cmpl   $0xe,0x28(%ebx)
f010370b:	75 51                	jne    f010375e <print_trapframe+0x10b>
		cprintf(" [%s, %s, %s]\n",
			tf->tf_err & 4 ? "user" : "kernel",
			tf->tf_err & 2 ? "write" : "read",
			tf->tf_err & 1 ? "protection" : "not-present");
f010370d:	8b 43 2c             	mov    0x2c(%ebx),%eax
	// For page faults, print decoded fault error code:
	// U/K=fault occurred in user/kernel mode
	// W/R=a write/read caused the fault
	// PR=a protection violation caused the fault (NP=page not present).
	if (tf->tf_trapno == T_PGFLT)
		cprintf(" [%s, %s, %s]\n",
f0103710:	89 c2                	mov    %eax,%edx
f0103712:	83 e2 01             	and    $0x1,%edx
f0103715:	ba 6f 5a 10 f0       	mov    $0xf0105a6f,%edx
f010371a:	b9 7a 5a 10 f0       	mov    $0xf0105a7a,%ecx
f010371f:	0f 45 ca             	cmovne %edx,%ecx
f0103722:	89 c2                	mov    %eax,%edx
f0103724:	83 e2 02             	and    $0x2,%edx
f0103727:	ba 86 5a 10 f0       	mov    $0xf0105a86,%edx
f010372c:	be 8c 5a 10 f0       	mov    $0xf0105a8c,%esi
f0103731:	0f 44 d6             	cmove  %esi,%edx
f0103734:	83 e0 04             	and    $0x4,%eax
f0103737:	b8 91 5a 10 f0       	mov    $0xf0105a91,%eax
f010373c:	be a6 5b 10 f0       	mov    $0xf0105ba6,%esi
f0103741:	0f 44 c6             	cmove  %esi,%eax
f0103744:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0103748:	89 54 24 08          	mov    %edx,0x8(%esp)
f010374c:	89 44 24 04          	mov    %eax,0x4(%esp)
f0103750:	c7 04 24 eb 5a 10 f0 	movl   $0xf0105aeb,(%esp)
f0103757:	e8 cf fd ff ff       	call   f010352b <cprintf>
f010375c:	eb 0c                	jmp    f010376a <print_trapframe+0x117>
			tf->tf_err & 4 ? "user" : "kernel",
			tf->tf_err & 2 ? "write" : "read",
			tf->tf_err & 1 ? "protection" : "not-present");
	else
		cprintf("\n");
f010375e:	c7 04 24 5c 4f 10 f0 	movl   $0xf0104f5c,(%esp)
f0103765:	e8 c1 fd ff ff       	call   f010352b <cprintf>
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010376a:	8b 43 30             	mov    0x30(%ebx),%eax
f010376d:	89 44 24 04          	mov    %eax,0x4(%esp)
f0103771:	c7 04 24 fa 5a 10 f0 	movl   $0xf0105afa,(%esp)
f0103778:	e8 ae fd ff ff       	call   f010352b <cprintf>
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010377d:	0f b7 43 34          	movzwl 0x34(%ebx),%eax
f0103781:	89 44 24 04          	mov    %eax,0x4(%esp)
f0103785:	c7 04 24 09 5b 10 f0 	movl   $0xf0105b09,(%esp)
f010378c:	e8 9a fd ff ff       	call   f010352b <cprintf>
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f0103791:	8b 43 38             	mov    0x38(%ebx),%eax
f0103794:	89 44 24 04          	mov    %eax,0x4(%esp)
f0103798:	c7 04 24 1c 5b 10 f0 	movl   $0xf0105b1c,(%esp)
f010379f:	e8 87 fd ff ff       	call   f010352b <cprintf>
	if ((tf->tf_cs & 3) != 0) {
f01037a4:	f6 43 34 03          	testb  $0x3,0x34(%ebx)
f01037a8:	74 27                	je     f01037d1 <print_trapframe+0x17e>
		cprintf("  esp  0x%08x\n", tf->tf_esp);
f01037aa:	8b 43 3c             	mov    0x3c(%ebx),%eax
f01037ad:	89 44 24 04          	mov    %eax,0x4(%esp)
f01037b1:	c7 04 24 2b 5b 10 f0 	movl   $0xf0105b2b,(%esp)
f01037b8:	e8 6e fd ff ff       	call   f010352b <cprintf>
		cprintf("  ss   0x----%04x\n", tf->tf_ss);
f01037bd:	0f b7 43 40          	movzwl 0x40(%ebx),%eax
f01037c1:	89 44 24 04          	mov    %eax,0x4(%esp)
f01037c5:	c7 04 24 3a 5b 10 f0 	movl   $0xf0105b3a,(%esp)
f01037cc:	e8 5a fd ff ff       	call   f010352b <cprintf>
	}
}
f01037d1:	83 c4 10             	add    $0x10,%esp
f01037d4:	5b                   	pop    %ebx
f01037d5:	5e                   	pop    %esi
f01037d6:	5d                   	pop    %ebp
f01037d7:	c3                   	ret    

f01037d8 <trap>:
	}
}

void
trap(struct Trapframe *tf)
{
f01037d8:	55                   	push   %ebp
f01037d9:	89 e5                	mov    %esp,%ebp
f01037db:	57                   	push   %edi
f01037dc:	56                   	push   %esi
f01037dd:	83 ec 10             	sub    $0x10,%esp
f01037e0:	8b 75 08             	mov    0x8(%ebp),%esi
	// The environment may have set DF and some versions
	// of GCC rely on DF being clear
	asm volatile("cld" ::: "cc");
f01037e3:	fc                   	cld    

static inline uint32_t
read_eflags(void)
{
	uint32_t eflags;
	asm volatile("pushfl; popl %0" : "=r" (eflags));
f01037e4:	9c                   	pushf  
f01037e5:	58                   	pop    %eax

	// Check that interrupts are disabled.  If this assertion
	// fails, DO NOT be tempted to fix it by inserting a "cli" in
	// the interrupt path.
	assert(!(read_eflags() & FL_IF));
f01037e6:	f6 c4 02             	test   $0x2,%ah
f01037e9:	74 24                	je     f010380f <trap+0x37>
f01037eb:	c7 44 24 0c 4d 5b 10 	movl   $0xf0105b4d,0xc(%esp)
f01037f2:	f0 
f01037f3:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01037fa:	f0 
f01037fb:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
f0103802:	00 
f0103803:	c7 04 24 66 5b 10 f0 	movl   $0xf0105b66,(%esp)
f010380a:	e8 a7 c8 ff ff       	call   f01000b6 <_panic>

	cprintf("Incoming TRAP frame at %p\n", tf);
f010380f:	89 74 24 04          	mov    %esi,0x4(%esp)
f0103813:	c7 04 24 72 5b 10 f0 	movl   $0xf0105b72,(%esp)
f010381a:	e8 0c fd ff ff       	call   f010352b <cprintf>

	if ((tf->tf_cs & 3) == 3) {
f010381f:	0f b7 46 34          	movzwl 0x34(%esi),%eax
f0103823:	83 e0 03             	and    $0x3,%eax
f0103826:	66 83 f8 03          	cmp    $0x3,%ax
f010382a:	75 3c                	jne    f0103868 <trap+0x90>
		// Trapped from user mode.
		assert(curenv);
f010382c:	a1 e4 c1 17 f0       	mov    0xf017c1e4,%eax
f0103831:	85 c0                	test   %eax,%eax
f0103833:	75 24                	jne    f0103859 <trap+0x81>
f0103835:	c7 44 24 0c 8d 5b 10 	movl   $0xf0105b8d,0xc(%esp)
f010383c:	f0 
f010383d:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f0103844:	f0 
f0103845:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
f010384c:	00 
f010384d:	c7 04 24 66 5b 10 f0 	movl   $0xf0105b66,(%esp)
f0103854:	e8 5d c8 ff ff       	call   f01000b6 <_panic>

		// Copy trap frame (which is currently on the stack)
		// into 'curenv->env_tf', so that running the environment
		// will restart at the trap point.
		curenv->env_tf = *tf;
f0103859:	b9 11 00 00 00       	mov    $0x11,%ecx
f010385e:	89 c7                	mov    %eax,%edi
f0103860:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		// The trapframe on the stack should be ignored from here on.
		tf = &curenv->env_tf;
f0103862:	8b 35 e4 c1 17 f0    	mov    0xf017c1e4,%esi
	}

	// Record that tf is the last real trapframe so
	// print_trapframe can print some additional information.
	last_tf = tf;
f0103868:	89 35 00 ca 17 f0    	mov    %esi,0xf017ca00
{
	// Handle processor exceptions.
	// LAB 3: Your code here.

	// Unexpected trap: The user process or the kernel has a bug.
	print_trapframe(tf);
f010386e:	89 34 24             	mov    %esi,(%esp)
f0103871:	e8 dd fd ff ff       	call   f0103653 <print_trapframe>
	if (tf->tf_cs == GD_KT)
f0103876:	66 83 7e 34 08       	cmpw   $0x8,0x34(%esi)
f010387b:	75 1c                	jne    f0103899 <trap+0xc1>
		panic("unhandled trap in kernel");
f010387d:	c7 44 24 08 94 5b 10 	movl   $0xf0105b94,0x8(%esp)
f0103884:	f0 
f0103885:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
f010388c:	00 
f010388d:	c7 04 24 66 5b 10 f0 	movl   $0xf0105b66,(%esp)
f0103894:	e8 1d c8 ff ff       	call   f01000b6 <_panic>
	else {
		env_destroy(curenv);
f0103899:	a1 e4 c1 17 f0       	mov    0xf017c1e4,%eax
f010389e:	89 04 24             	mov    %eax,(%esp)
f01038a1:	e8 70 fb ff ff       	call   f0103416 <env_destroy>

	// Dispatch based on what type of trap occurred
	trap_dispatch(tf);

	// Return to the current environment, which should be running.
	assert(curenv && curenv->env_status == ENV_RUNNING);
f01038a6:	a1 e4 c1 17 f0       	mov    0xf017c1e4,%eax
f01038ab:	85 c0                	test   %eax,%eax
f01038ad:	74 06                	je     f01038b5 <trap+0xdd>
f01038af:	83 78 54 03          	cmpl   $0x3,0x54(%eax)
f01038b3:	74 24                	je     f01038d9 <trap+0x101>
f01038b5:	c7 44 24 0c f0 5c 10 	movl   $0xf0105cf0,0xc(%esp)
f01038bc:	f0 
f01038bd:	c7 44 24 08 ba 4e 10 	movl   $0xf0104eba,0x8(%esp)
f01038c4:	f0 
f01038c5:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
f01038cc:	00 
f01038cd:	c7 04 24 66 5b 10 f0 	movl   $0xf0105b66,(%esp)
f01038d4:	e8 dd c7 ff ff       	call   f01000b6 <_panic>
	env_run(curenv);
f01038d9:	89 04 24             	mov    %eax,(%esp)
f01038dc:	e8 8c fb ff ff       	call   f010346d <env_run>

f01038e1 <page_fault_handler>:
}


void
page_fault_handler(struct Trapframe *tf)
{
f01038e1:	55                   	push   %ebp
f01038e2:	89 e5                	mov    %esp,%ebp
f01038e4:	53                   	push   %ebx
f01038e5:	83 ec 14             	sub    $0x14,%esp
f01038e8:	8b 5d 08             	mov    0x8(%ebp),%ebx

static inline uint32_t
rcr2(void)
{
	uint32_t val;
	asm volatile("movl %%cr2,%0" : "=r" (val));
f01038eb:	0f 20 d0             	mov    %cr2,%eax

	// We've already handled kernel-mode exceptions, so if we get here,
	// the page fault happened in user mode.

	// Destroy the environment that caused the fault.
	cprintf("[%08x] user fault va %08x ip %08x\n",
f01038ee:	8b 53 30             	mov    0x30(%ebx),%edx
f01038f1:	89 54 24 0c          	mov    %edx,0xc(%esp)
f01038f5:	89 44 24 08          	mov    %eax,0x8(%esp)
f01038f9:	a1 e4 c1 17 f0       	mov    0xf017c1e4,%eax
f01038fe:	8b 40 48             	mov    0x48(%eax),%eax
f0103901:	89 44 24 04          	mov    %eax,0x4(%esp)
f0103905:	c7 04 24 1c 5d 10 f0 	movl   $0xf0105d1c,(%esp)
f010390c:	e8 1a fc ff ff       	call   f010352b <cprintf>
		curenv->env_id, fault_va, tf->tf_eip);
	print_trapframe(tf);
f0103911:	89 1c 24             	mov    %ebx,(%esp)
f0103914:	e8 3a fd ff ff       	call   f0103653 <print_trapframe>
	env_destroy(curenv);
f0103919:	a1 e4 c1 17 f0       	mov    0xf017c1e4,%eax
f010391e:	89 04 24             	mov    %eax,(%esp)
f0103921:	e8 f0 fa ff ff       	call   f0103416 <env_destroy>
}
f0103926:	83 c4 14             	add    $0x14,%esp
f0103929:	5b                   	pop    %ebx
f010392a:	5d                   	pop    %ebp
f010392b:	c3                   	ret    

f010392c <syscall>:
f010392c:	55                   	push   %ebp
f010392d:	89 e5                	mov    %esp,%ebp
f010392f:	83 ec 18             	sub    $0x18,%esp
f0103932:	c7 44 24 08 90 5d 10 	movl   $0xf0105d90,0x8(%esp)
f0103939:	f0 
f010393a:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
f0103941:	00 
f0103942:	c7 04 24 a8 5d 10 f0 	movl   $0xf0105da8,(%esp)
f0103949:	e8 68 c7 ff ff       	call   f01000b6 <_panic>

f010394e <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uintptr_t addr)
{
f010394e:	55                   	push   %ebp
f010394f:	89 e5                	mov    %esp,%ebp
f0103951:	57                   	push   %edi
f0103952:	56                   	push   %esi
f0103953:	53                   	push   %ebx
f0103954:	83 ec 14             	sub    $0x14,%esp
f0103957:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010395a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f010395d:	89 4d e0             	mov    %ecx,-0x20(%ebp)
f0103960:	8b 75 08             	mov    0x8(%ebp),%esi
	int l = *region_left, r = *region_right, any_matches = 0;
f0103963:	8b 1a                	mov    (%edx),%ebx
f0103965:	8b 01                	mov    (%ecx),%eax
f0103967:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010396a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

	while (l <= r) {
f0103971:	e9 88 00 00 00       	jmp    f01039fe <stab_binsearch+0xb0>
		int true_m = (l + r) / 2, m = true_m;
f0103976:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103979:	01 d8                	add    %ebx,%eax
f010397b:	89 c7                	mov    %eax,%edi
f010397d:	c1 ef 1f             	shr    $0x1f,%edi
f0103980:	01 c7                	add    %eax,%edi
f0103982:	d1 ff                	sar    %edi
f0103984:	8d 04 7f             	lea    (%edi,%edi,2),%eax
f0103987:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010398a:	8d 14 81             	lea    (%ecx,%eax,4),%edx
f010398d:	89 f8                	mov    %edi,%eax

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010398f:	eb 03                	jmp    f0103994 <stab_binsearch+0x46>
			m--;
f0103991:	83 e8 01             	sub    $0x1,%eax

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f0103994:	39 c3                	cmp    %eax,%ebx
f0103996:	7f 1f                	jg     f01039b7 <stab_binsearch+0x69>
f0103998:	0f b6 4a 04          	movzbl 0x4(%edx),%ecx
f010399c:	83 ea 0c             	sub    $0xc,%edx
f010399f:	39 f1                	cmp    %esi,%ecx
f01039a1:	75 ee                	jne    f0103991 <stab_binsearch+0x43>
f01039a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
			continue;
		}

		// actual binary search
		any_matches = 1;
		if (stabs[m].n_value < addr) {
f01039a6:	8d 14 40             	lea    (%eax,%eax,2),%edx
f01039a9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01039ac:	8b 54 91 08          	mov    0x8(%ecx,%edx,4),%edx
f01039b0:	39 55 0c             	cmp    %edx,0xc(%ebp)
f01039b3:	76 18                	jbe    f01039cd <stab_binsearch+0x7f>
f01039b5:	eb 05                	jmp    f01039bc <stab_binsearch+0x6e>

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
			m--;
		if (m < l) {	// no match in [l, m]
			l = true_m + 1;
f01039b7:	8d 5f 01             	lea    0x1(%edi),%ebx
			continue;
f01039ba:	eb 42                	jmp    f01039fe <stab_binsearch+0xb0>
		}

		// actual binary search
		any_matches = 1;
		if (stabs[m].n_value < addr) {
			*region_left = m;
f01039bc:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01039bf:	89 03                	mov    %eax,(%ebx)
			l = true_m + 1;
f01039c1:	8d 5f 01             	lea    0x1(%edi),%ebx
			l = true_m + 1;
			continue;
		}

		// actual binary search
		any_matches = 1;
f01039c4:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
f01039cb:	eb 31                	jmp    f01039fe <stab_binsearch+0xb0>
		if (stabs[m].n_value < addr) {
			*region_left = m;
			l = true_m + 1;
		} else if (stabs[m].n_value > addr) {
f01039cd:	39 55 0c             	cmp    %edx,0xc(%ebp)
f01039d0:	73 17                	jae    f01039e9 <stab_binsearch+0x9b>
			*region_right = m - 1;
f01039d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039d5:	83 e8 01             	sub    $0x1,%eax
f01039d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01039db:	8b 7d e0             	mov    -0x20(%ebp),%edi
f01039de:	89 07                	mov    %eax,(%edi)
			l = true_m + 1;
			continue;
		}

		// actual binary search
		any_matches = 1;
f01039e0:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
f01039e7:	eb 15                	jmp    f01039fe <stab_binsearch+0xb0>
			*region_right = m - 1;
			r = m - 1;
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f01039e9:	8b 7d e4             	mov    -0x1c(%ebp),%edi
f01039ec:	8b 5d e8             	mov    -0x18(%ebp),%ebx
f01039ef:	89 1f                	mov    %ebx,(%edi)
			l = m;
			addr++;
f01039f1:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
f01039f5:	89 c3                	mov    %eax,%ebx
			l = true_m + 1;
			continue;
		}

		// actual binary search
		any_matches = 1;
f01039f7:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uintptr_t addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f01039fe:	3b 5d f0             	cmp    -0x10(%ebp),%ebx
f0103a01:	0f 8e 6f ff ff ff    	jle    f0103976 <stab_binsearch+0x28>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f0103a07:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0103a0b:	75 0f                	jne    f0103a1c <stab_binsearch+0xce>
		*region_right = *region_left - 1;
f0103a0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103a10:	8b 00                	mov    (%eax),%eax
f0103a12:	83 e8 01             	sub    $0x1,%eax
f0103a15:	8b 7d e0             	mov    -0x20(%ebp),%edi
f0103a18:	89 07                	mov    %eax,(%edi)
f0103a1a:	eb 2c                	jmp    f0103a48 <stab_binsearch+0xfa>
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f0103a1c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103a1f:	8b 00                	mov    (%eax),%eax
		     l > *region_left && stabs[l].n_type != type;
f0103a21:	8b 7d e4             	mov    -0x1c(%ebp),%edi
f0103a24:	8b 0f                	mov    (%edi),%ecx
f0103a26:	8d 14 40             	lea    (%eax,%eax,2),%edx
f0103a29:	8b 7d ec             	mov    -0x14(%ebp),%edi
f0103a2c:	8d 14 97             	lea    (%edi,%edx,4),%edx

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f0103a2f:	eb 03                	jmp    f0103a34 <stab_binsearch+0xe6>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f0103a31:	83 e8 01             	sub    $0x1,%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f0103a34:	39 c8                	cmp    %ecx,%eax
f0103a36:	7e 0b                	jle    f0103a43 <stab_binsearch+0xf5>
		     l > *region_left && stabs[l].n_type != type;
f0103a38:	0f b6 5a 04          	movzbl 0x4(%edx),%ebx
f0103a3c:	83 ea 0c             	sub    $0xc,%edx
f0103a3f:	39 f3                	cmp    %esi,%ebx
f0103a41:	75 ee                	jne    f0103a31 <stab_binsearch+0xe3>
		     l--)
			/* do nothing */;
		*region_left = l;
f0103a43:	8b 7d e4             	mov    -0x1c(%ebp),%edi
f0103a46:	89 07                	mov    %eax,(%edi)
	}
}
f0103a48:	83 c4 14             	add    $0x14,%esp
f0103a4b:	5b                   	pop    %ebx
f0103a4c:	5e                   	pop    %esi
f0103a4d:	5f                   	pop    %edi
f0103a4e:	5d                   	pop    %ebp
f0103a4f:	c3                   	ret    

f0103a50 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uintptr_t addr, struct Eipdebuginfo *info)
{
f0103a50:	55                   	push   %ebp
f0103a51:	89 e5                	mov    %esp,%ebp
f0103a53:	57                   	push   %edi
f0103a54:	56                   	push   %esi
f0103a55:	53                   	push   %ebx
f0103a56:	83 ec 4c             	sub    $0x4c,%esp
f0103a59:	8b 75 08             	mov    0x8(%ebp),%esi
f0103a5c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f0103a5f:	c7 03 b7 5d 10 f0    	movl   $0xf0105db7,(%ebx)
	info->eip_line = 0;
f0103a65:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
	info->eip_fn_name = "<unknown>";
f0103a6c:	c7 43 08 b7 5d 10 f0 	movl   $0xf0105db7,0x8(%ebx)
	info->eip_fn_namelen = 9;
f0103a73:	c7 43 0c 09 00 00 00 	movl   $0x9,0xc(%ebx)
	info->eip_fn_addr = addr;
f0103a7a:	89 73 10             	mov    %esi,0x10(%ebx)
	info->eip_fn_narg = 0;
f0103a7d:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)

	// Find the relevant set of stabs
	if (addr >= ULIM) {
f0103a84:	81 fe ff ff 7f ef    	cmp    $0xef7fffff,%esi
f0103a8a:	77 21                	ja     f0103aad <debuginfo_eip+0x5d>

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f0103a8c:	a1 00 00 20 00       	mov    0x200000,%eax
f0103a91:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		stab_end = usd->stab_end;
f0103a94:	a1 04 00 20 00       	mov    0x200004,%eax
		stabstr = usd->stabstr;
f0103a99:	8b 3d 08 00 20 00    	mov    0x200008,%edi
f0103a9f:	89 7d c0             	mov    %edi,-0x40(%ebp)
		stabstr_end = usd->stabstr_end;
f0103aa2:	8b 3d 0c 00 20 00    	mov    0x20000c,%edi
f0103aa8:	89 7d bc             	mov    %edi,-0x44(%ebp)
f0103aab:	eb 1a                	jmp    f0103ac7 <debuginfo_eip+0x77>
	// Find the relevant set of stabs
	if (addr >= ULIM) {
		stabs = __STAB_BEGIN__;
		stab_end = __STAB_END__;
		stabstr = __STABSTR_BEGIN__;
		stabstr_end = __STABSTR_END__;
f0103aad:	c7 45 bc 0b fe 10 f0 	movl   $0xf010fe0b,-0x44(%ebp)

	// Find the relevant set of stabs
	if (addr >= ULIM) {
		stabs = __STAB_BEGIN__;
		stab_end = __STAB_END__;
		stabstr = __STABSTR_BEGIN__;
f0103ab4:	c7 45 c0 59 d4 10 f0 	movl   $0xf010d459,-0x40(%ebp)
	info->eip_fn_narg = 0;

	// Find the relevant set of stabs
	if (addr >= ULIM) {
		stabs = __STAB_BEGIN__;
		stab_end = __STAB_END__;
f0103abb:	b8 58 d4 10 f0       	mov    $0xf010d458,%eax
	info->eip_fn_addr = addr;
	info->eip_fn_narg = 0;

	// Find the relevant set of stabs
	if (addr >= ULIM) {
		stabs = __STAB_BEGIN__;
f0103ac0:	c7 45 c4 d0 5f 10 f0 	movl   $0xf0105fd0,-0x3c(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f0103ac7:	8b 7d bc             	mov    -0x44(%ebp),%edi
f0103aca:	39 7d c0             	cmp    %edi,-0x40(%ebp)
f0103acd:	0f 83 95 01 00 00    	jae    f0103c68 <debuginfo_eip+0x218>
f0103ad3:	80 7f ff 00          	cmpb   $0x0,-0x1(%edi)
f0103ad7:	0f 85 92 01 00 00    	jne    f0103c6f <debuginfo_eip+0x21f>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f0103add:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	rfile = (stab_end - stabs) - 1;
f0103ae4:	8b 7d c4             	mov    -0x3c(%ebp),%edi
f0103ae7:	29 f8                	sub    %edi,%eax
f0103ae9:	c1 f8 02             	sar    $0x2,%eax
f0103aec:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
f0103af2:	83 e8 01             	sub    $0x1,%eax
f0103af5:	89 45 e0             	mov    %eax,-0x20(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f0103af8:	89 74 24 04          	mov    %esi,0x4(%esp)
f0103afc:	c7 04 24 64 00 00 00 	movl   $0x64,(%esp)
f0103b03:	8d 4d e0             	lea    -0x20(%ebp),%ecx
f0103b06:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f0103b09:	89 f8                	mov    %edi,%eax
f0103b0b:	e8 3e fe ff ff       	call   f010394e <stab_binsearch>
	if (lfile == 0)
f0103b10:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103b13:	85 c0                	test   %eax,%eax
f0103b15:	0f 84 5b 01 00 00    	je     f0103c76 <debuginfo_eip+0x226>
		return -1;

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f0103b1b:	89 45 dc             	mov    %eax,-0x24(%ebp)
	rfun = rfile;
f0103b1e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f0103b24:	89 74 24 04          	mov    %esi,0x4(%esp)
f0103b28:	c7 04 24 24 00 00 00 	movl   $0x24,(%esp)
f0103b2f:	8d 4d d8             	lea    -0x28(%ebp),%ecx
f0103b32:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0103b35:	89 f8                	mov    %edi,%eax
f0103b37:	e8 12 fe ff ff       	call   f010394e <stab_binsearch>

	if (lfun <= rfun) {
f0103b3c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103b3f:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f0103b42:	39 c8                	cmp    %ecx,%eax
f0103b44:	7f 32                	jg     f0103b78 <debuginfo_eip+0x128>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f0103b46:	8d 14 40             	lea    (%eax,%eax,2),%edx
f0103b49:	8b 7d c4             	mov    -0x3c(%ebp),%edi
f0103b4c:	8d 3c 97             	lea    (%edi,%edx,4),%edi
f0103b4f:	8b 17                	mov    (%edi),%edx
f0103b51:	89 55 b8             	mov    %edx,-0x48(%ebp)
f0103b54:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0103b57:	2b 55 c0             	sub    -0x40(%ebp),%edx
f0103b5a:	39 55 b8             	cmp    %edx,-0x48(%ebp)
f0103b5d:	73 09                	jae    f0103b68 <debuginfo_eip+0x118>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f0103b5f:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0103b62:	03 55 c0             	add    -0x40(%ebp),%edx
f0103b65:	89 53 08             	mov    %edx,0x8(%ebx)
		info->eip_fn_addr = stabs[lfun].n_value;
f0103b68:	8b 57 08             	mov    0x8(%edi),%edx
f0103b6b:	89 53 10             	mov    %edx,0x10(%ebx)
		addr -= info->eip_fn_addr;
f0103b6e:	29 d6                	sub    %edx,%esi
		// Search within the function definition for the line number.
		lline = lfun;
f0103b70:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		rline = rfun;
f0103b73:	89 4d d0             	mov    %ecx,-0x30(%ebp)
f0103b76:	eb 0f                	jmp    f0103b87 <debuginfo_eip+0x137>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f0103b78:	89 73 10             	mov    %esi,0x10(%ebx)
		lline = lfile;
f0103b7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103b7e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		rline = rfile;
f0103b81:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103b84:	89 45 d0             	mov    %eax,-0x30(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f0103b87:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
f0103b8e:	00 
f0103b8f:	8b 43 08             	mov    0x8(%ebx),%eax
f0103b92:	89 04 24             	mov    %eax,(%esp)
f0103b95:	e8 01 09 00 00       	call   f010449b <strfind>
f0103b9a:	2b 43 08             	sub    0x8(%ebx),%eax
f0103b9d:	89 43 0c             	mov    %eax,0xc(%ebx)
	//	There's a particular stabs type used for line numbers.
	//	Look at the STABS documentation and <inc/stab.h> to find
	//	which one.
	// Your code here.

          stab_binsearch(stabs, &lline, &rline, N_SLINE, addr); 
f0103ba0:	89 74 24 04          	mov    %esi,0x4(%esp)
f0103ba4:	c7 04 24 44 00 00 00 	movl   $0x44,(%esp)
f0103bab:	8d 4d d0             	lea    -0x30(%ebp),%ecx
f0103bae:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103bb1:	8b 7d c4             	mov    -0x3c(%ebp),%edi
f0103bb4:	89 f8                	mov    %edi,%eax
f0103bb6:	e8 93 fd ff ff       	call   f010394e <stab_binsearch>
          info->eip_line = stabs[lline].n_desc;
f0103bbb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0103bbe:	8d 0c 12             	lea    (%edx,%edx,1),%ecx
f0103bc1:	8d 04 11             	lea    (%ecx,%edx,1),%eax
f0103bc4:	0f b7 44 87 06       	movzwl 0x6(%edi,%eax,4),%eax
f0103bc9:	89 43 04             	mov    %eax,0x4(%ebx)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f0103bcc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103bcf:	89 c6                	mov    %eax,%esi
f0103bd1:	89 d0                	mov    %edx,%eax
f0103bd3:	01 ca                	add    %ecx,%edx
f0103bd5:	8d 14 97             	lea    (%edi,%edx,4),%edx
f0103bd8:	89 5d 0c             	mov    %ebx,0xc(%ebp)
f0103bdb:	eb 06                	jmp    f0103be3 <debuginfo_eip+0x193>
f0103bdd:	83 e8 01             	sub    $0x1,%eax
f0103be0:	83 ea 0c             	sub    $0xc,%edx
f0103be3:	89 c7                	mov    %eax,%edi
f0103be5:	39 c6                	cmp    %eax,%esi
f0103be7:	7f 3c                	jg     f0103c25 <debuginfo_eip+0x1d5>
	       && stabs[lline].n_type != N_SOL
f0103be9:	0f b6 4a 04          	movzbl 0x4(%edx),%ecx
f0103bed:	80 f9 84             	cmp    $0x84,%cl
f0103bf0:	75 08                	jne    f0103bfa <debuginfo_eip+0x1aa>
f0103bf2:	8b 5d 0c             	mov    0xc(%ebp),%ebx
f0103bf5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0103bf8:	eb 11                	jmp    f0103c0b <debuginfo_eip+0x1bb>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f0103bfa:	80 f9 64             	cmp    $0x64,%cl
f0103bfd:	75 de                	jne    f0103bdd <debuginfo_eip+0x18d>
f0103bff:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
f0103c03:	74 d8                	je     f0103bdd <debuginfo_eip+0x18d>
f0103c05:	8b 5d 0c             	mov    0xc(%ebp),%ebx
f0103c08:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f0103c0b:	8d 04 7f             	lea    (%edi,%edi,2),%eax
f0103c0e:	8b 75 c4             	mov    -0x3c(%ebp),%esi
f0103c11:	8b 04 86             	mov    (%esi,%eax,4),%eax
f0103c14:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0103c17:	2b 55 c0             	sub    -0x40(%ebp),%edx
f0103c1a:	39 d0                	cmp    %edx,%eax
f0103c1c:	73 0a                	jae    f0103c28 <debuginfo_eip+0x1d8>
		info->eip_file = stabstr + stabs[lline].n_strx;
f0103c1e:	03 45 c0             	add    -0x40(%ebp),%eax
f0103c21:	89 03                	mov    %eax,(%ebx)
f0103c23:	eb 03                	jmp    f0103c28 <debuginfo_eip+0x1d8>
f0103c25:	8b 5d 0c             	mov    0xc(%ebp),%ebx


	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	if (lfun < rfun)
f0103c28:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0103c2b:	8b 75 d8             	mov    -0x28(%ebp),%esi
		for (lline = lfun + 1;
		     lline < rfun && stabs[lline].n_type == N_PSYM;
		     lline++)
			info->eip_fn_narg++;

	return 0;
f0103c2e:	b8 00 00 00 00       	mov    $0x0,%eax
		info->eip_file = stabstr + stabs[lline].n_strx;


	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	if (lfun < rfun)
f0103c33:	39 f2                	cmp    %esi,%edx
f0103c35:	7d 4b                	jge    f0103c82 <debuginfo_eip+0x232>
		for (lline = lfun + 1;
f0103c37:	83 c2 01             	add    $0x1,%edx
f0103c3a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
f0103c3d:	89 d0                	mov    %edx,%eax
f0103c3f:	8d 14 52             	lea    (%edx,%edx,2),%edx
f0103c42:	8b 7d c4             	mov    -0x3c(%ebp),%edi
f0103c45:	8d 14 97             	lea    (%edi,%edx,4),%edx
f0103c48:	eb 04                	jmp    f0103c4e <debuginfo_eip+0x1fe>
		     lline < rfun && stabs[lline].n_type == N_PSYM;
		     lline++)
			info->eip_fn_narg++;
f0103c4a:	83 43 14 01          	addl   $0x1,0x14(%ebx)


	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	if (lfun < rfun)
		for (lline = lfun + 1;
f0103c4e:	39 c6                	cmp    %eax,%esi
f0103c50:	7e 2b                	jle    f0103c7d <debuginfo_eip+0x22d>
		     lline < rfun && stabs[lline].n_type == N_PSYM;
f0103c52:	0f b6 4a 04          	movzbl 0x4(%edx),%ecx
f0103c56:	83 c0 01             	add    $0x1,%eax
f0103c59:	83 c2 0c             	add    $0xc,%edx
f0103c5c:	80 f9 a0             	cmp    $0xa0,%cl
f0103c5f:	74 e9                	je     f0103c4a <debuginfo_eip+0x1fa>
		     lline++)
			info->eip_fn_narg++;

	return 0;
f0103c61:	b8 00 00 00 00       	mov    $0x0,%eax
f0103c66:	eb 1a                	jmp    f0103c82 <debuginfo_eip+0x232>
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
		return -1;
f0103c68:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0103c6d:	eb 13                	jmp    f0103c82 <debuginfo_eip+0x232>
f0103c6f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0103c74:	eb 0c                	jmp    f0103c82 <debuginfo_eip+0x232>
	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
	rfile = (stab_end - stabs) - 1;
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
	if (lfile == 0)
		return -1;
f0103c76:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0103c7b:	eb 05                	jmp    f0103c82 <debuginfo_eip+0x232>
		for (lline = lfun + 1;
		     lline < rfun && stabs[lline].n_type == N_PSYM;
		     lline++)
			info->eip_fn_narg++;

	return 0;
f0103c7d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103c82:	83 c4 4c             	add    $0x4c,%esp
f0103c85:	5b                   	pop    %ebx
f0103c86:	5e                   	pop    %esi
f0103c87:	5f                   	pop    %edi
f0103c88:	5d                   	pop    %ebp
f0103c89:	c3                   	ret    
f0103c8a:	66 90                	xchg   %ax,%ax
f0103c8c:	66 90                	xchg   %ax,%ax
f0103c8e:	66 90                	xchg   %ax,%ax

f0103c90 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0103c90:	55                   	push   %ebp
f0103c91:	89 e5                	mov    %esp,%ebp
f0103c93:	57                   	push   %edi
f0103c94:	56                   	push   %esi
f0103c95:	53                   	push   %ebx
f0103c96:	83 ec 3c             	sub    $0x3c,%esp
f0103c99:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103c9c:	89 d7                	mov    %edx,%edi
f0103c9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ca7:	89 c3                	mov    %eax,%ebx
f0103ca9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0103cac:	8b 45 10             	mov    0x10(%ebp),%eax
f0103caf:	8b 75 14             	mov    0x14(%ebp),%esi
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0103cb2:	b9 00 00 00 00       	mov    $0x0,%ecx
f0103cb7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0103cba:	89 4d dc             	mov    %ecx,-0x24(%ebp)
f0103cbd:	39 d9                	cmp    %ebx,%ecx
f0103cbf:	72 05                	jb     f0103cc6 <printnum+0x36>
f0103cc1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0103cc4:	77 69                	ja     f0103d2f <printnum+0x9f>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0103cc6:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0103cc9:	89 4c 24 10          	mov    %ecx,0x10(%esp)
f0103ccd:	83 ee 01             	sub    $0x1,%esi
f0103cd0:	89 74 24 0c          	mov    %esi,0xc(%esp)
f0103cd4:	89 44 24 08          	mov    %eax,0x8(%esp)
f0103cd8:	8b 44 24 08          	mov    0x8(%esp),%eax
f0103cdc:	8b 54 24 0c          	mov    0xc(%esp),%edx
f0103ce0:	89 c3                	mov    %eax,%ebx
f0103ce2:	89 d6                	mov    %edx,%esi
f0103ce4:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0103ce7:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0103cea:	89 54 24 08          	mov    %edx,0x8(%esp)
f0103cee:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0103cf2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103cf5:	89 04 24             	mov    %eax,(%esp)
f0103cf8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103cfb:	89 44 24 04          	mov    %eax,0x4(%esp)
f0103cff:	e8 bc 09 00 00       	call   f01046c0 <__udivdi3>
f0103d04:	89 d9                	mov    %ebx,%ecx
f0103d06:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0103d0a:	89 74 24 0c          	mov    %esi,0xc(%esp)
f0103d0e:	89 04 24             	mov    %eax,(%esp)
f0103d11:	89 54 24 04          	mov    %edx,0x4(%esp)
f0103d15:	89 fa                	mov    %edi,%edx
f0103d17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d1a:	e8 71 ff ff ff       	call   f0103c90 <printnum>
f0103d1f:	eb 1b                	jmp    f0103d3c <printnum+0xac>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0103d21:	89 7c 24 04          	mov    %edi,0x4(%esp)
f0103d25:	8b 45 18             	mov    0x18(%ebp),%eax
f0103d28:	89 04 24             	mov    %eax,(%esp)
f0103d2b:	ff d3                	call   *%ebx
f0103d2d:	eb 03                	jmp    f0103d32 <printnum+0xa2>
f0103d2f:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0103d32:	83 ee 01             	sub    $0x1,%esi
f0103d35:	85 f6                	test   %esi,%esi
f0103d37:	7f e8                	jg     f0103d21 <printnum+0x91>
f0103d39:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0103d3c:	89 7c 24 04          	mov    %edi,0x4(%esp)
f0103d40:	8b 7c 24 04          	mov    0x4(%esp),%edi
f0103d44:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103d47:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0103d4a:	89 44 24 08          	mov    %eax,0x8(%esp)
f0103d4e:	89 54 24 0c          	mov    %edx,0xc(%esp)
f0103d52:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103d55:	89 04 24             	mov    %eax,(%esp)
f0103d58:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103d5b:	89 44 24 04          	mov    %eax,0x4(%esp)
f0103d5f:	e8 8c 0a 00 00       	call   f01047f0 <__umoddi3>
f0103d64:	89 7c 24 04          	mov    %edi,0x4(%esp)
f0103d68:	0f be 80 c1 5d 10 f0 	movsbl -0xfefa23f(%eax),%eax
f0103d6f:	89 04 24             	mov    %eax,(%esp)
f0103d72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d75:	ff d0                	call   *%eax
}
f0103d77:	83 c4 3c             	add    $0x3c,%esp
f0103d7a:	5b                   	pop    %ebx
f0103d7b:	5e                   	pop    %esi
f0103d7c:	5f                   	pop    %edi
f0103d7d:	5d                   	pop    %ebp
f0103d7e:	c3                   	ret    

f0103d7f <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0103d7f:	55                   	push   %ebp
f0103d80:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0103d82:	83 fa 01             	cmp    $0x1,%edx
f0103d85:	7e 0e                	jle    f0103d95 <getuint+0x16>
		return va_arg(*ap, unsigned long long);
f0103d87:	8b 10                	mov    (%eax),%edx
f0103d89:	8d 4a 08             	lea    0x8(%edx),%ecx
f0103d8c:	89 08                	mov    %ecx,(%eax)
f0103d8e:	8b 02                	mov    (%edx),%eax
f0103d90:	8b 52 04             	mov    0x4(%edx),%edx
f0103d93:	eb 22                	jmp    f0103db7 <getuint+0x38>
	else if (lflag)
f0103d95:	85 d2                	test   %edx,%edx
f0103d97:	74 10                	je     f0103da9 <getuint+0x2a>
		return va_arg(*ap, unsigned long);
f0103d99:	8b 10                	mov    (%eax),%edx
f0103d9b:	8d 4a 04             	lea    0x4(%edx),%ecx
f0103d9e:	89 08                	mov    %ecx,(%eax)
f0103da0:	8b 02                	mov    (%edx),%eax
f0103da2:	ba 00 00 00 00       	mov    $0x0,%edx
f0103da7:	eb 0e                	jmp    f0103db7 <getuint+0x38>
	else
		return va_arg(*ap, unsigned int);
f0103da9:	8b 10                	mov    (%eax),%edx
f0103dab:	8d 4a 04             	lea    0x4(%edx),%ecx
f0103dae:	89 08                	mov    %ecx,(%eax)
f0103db0:	8b 02                	mov    (%edx),%eax
f0103db2:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0103db7:	5d                   	pop    %ebp
f0103db8:	c3                   	ret    

f0103db9 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0103db9:	55                   	push   %ebp
f0103dba:	89 e5                	mov    %esp,%ebp
f0103dbc:	8b 45 0c             	mov    0xc(%ebp),%eax
	b->cnt++;
f0103dbf:	83 40 08 01          	addl   $0x1,0x8(%eax)
	if (b->buf < b->ebuf)
f0103dc3:	8b 10                	mov    (%eax),%edx
f0103dc5:	3b 50 04             	cmp    0x4(%eax),%edx
f0103dc8:	73 0a                	jae    f0103dd4 <sprintputch+0x1b>
		*b->buf++ = ch;
f0103dca:	8d 4a 01             	lea    0x1(%edx),%ecx
f0103dcd:	89 08                	mov    %ecx,(%eax)
f0103dcf:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd2:	88 02                	mov    %al,(%edx)
}
f0103dd4:	5d                   	pop    %ebp
f0103dd5:	c3                   	ret    

f0103dd6 <printfmt>:
	}
}

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0103dd6:	55                   	push   %ebp
f0103dd7:	89 e5                	mov    %esp,%ebp
f0103dd9:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0103ddc:	8d 45 14             	lea    0x14(%ebp),%eax
	vprintfmt(putch, putdat, fmt, ap);
f0103ddf:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0103de3:	8b 45 10             	mov    0x10(%ebp),%eax
f0103de6:	89 44 24 08          	mov    %eax,0x8(%esp)
f0103dea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ded:	89 44 24 04          	mov    %eax,0x4(%esp)
f0103df1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103df4:	89 04 24             	mov    %eax,(%esp)
f0103df7:	e8 02 00 00 00       	call   f0103dfe <vprintfmt>
	va_end(ap);
}
f0103dfc:	c9                   	leave  
f0103dfd:	c3                   	ret    

f0103dfe <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0103dfe:	55                   	push   %ebp
f0103dff:	89 e5                	mov    %esp,%ebp
f0103e01:	57                   	push   %edi
f0103e02:	56                   	push   %esi
f0103e03:	53                   	push   %ebx
f0103e04:	83 ec 3c             	sub    $0x3c,%esp
f0103e07:	8b 7d 0c             	mov    0xc(%ebp),%edi
f0103e0a:	8b 5d 10             	mov    0x10(%ebp),%ebx
f0103e0d:	eb 14                	jmp    f0103e23 <vprintfmt+0x25>
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
f0103e0f:	85 c0                	test   %eax,%eax
f0103e11:	0f 84 b3 03 00 00    	je     f01041ca <vprintfmt+0x3cc>
				return;
			putch(ch, putdat);
f0103e17:	89 7c 24 04          	mov    %edi,0x4(%esp)
f0103e1b:	89 04 24             	mov    %eax,(%esp)
f0103e1e:	ff 55 08             	call   *0x8(%ebp)
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0103e21:	89 f3                	mov    %esi,%ebx
f0103e23:	8d 73 01             	lea    0x1(%ebx),%esi
f0103e26:	0f b6 03             	movzbl (%ebx),%eax
f0103e29:	83 f8 25             	cmp    $0x25,%eax
f0103e2c:	75 e1                	jne    f0103e0f <vprintfmt+0x11>
f0103e2e:	c6 45 d8 20          	movb   $0x20,-0x28(%ebp)
f0103e32:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0103e39:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%ebp)
f0103e40:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
f0103e47:	ba 00 00 00 00       	mov    $0x0,%edx
f0103e4c:	eb 1d                	jmp    f0103e6b <vprintfmt+0x6d>
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0103e4e:	89 de                	mov    %ebx,%esi

		// flag to pad on the right
		case '-':
			padc = '-';
f0103e50:	c6 45 d8 2d          	movb   $0x2d,-0x28(%ebp)
f0103e54:	eb 15                	jmp    f0103e6b <vprintfmt+0x6d>
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0103e56:	89 de                	mov    %ebx,%esi
			padc = '-';
			goto reswitch;

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0103e58:	c6 45 d8 30          	movb   $0x30,-0x28(%ebp)
f0103e5c:	eb 0d                	jmp    f0103e6b <vprintfmt+0x6d>
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
				width = precision, precision = -1;
f0103e5e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103e61:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0103e64:	c7 45 d4 ff ff ff ff 	movl   $0xffffffff,-0x2c(%ebp)
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0103e6b:	8d 5e 01             	lea    0x1(%esi),%ebx
f0103e6e:	0f b6 0e             	movzbl (%esi),%ecx
f0103e71:	0f b6 c1             	movzbl %cl,%eax
f0103e74:	83 e9 23             	sub    $0x23,%ecx
f0103e77:	80 f9 55             	cmp    $0x55,%cl
f0103e7a:	0f 87 2a 03 00 00    	ja     f01041aa <vprintfmt+0x3ac>
f0103e80:	0f b6 c9             	movzbl %cl,%ecx
f0103e83:	ff 24 8d 4c 5e 10 f0 	jmp    *-0xfefa1b4(,%ecx,4)
f0103e8a:	89 de                	mov    %ebx,%esi
f0103e8c:	b9 00 00 00 00       	mov    $0x0,%ecx
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
				precision = precision * 10 + ch - '0';
f0103e91:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
f0103e94:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
				ch = *fmt;
f0103e98:	0f be 06             	movsbl (%esi),%eax
				if (ch < '0' || ch > '9')
f0103e9b:	8d 58 d0             	lea    -0x30(%eax),%ebx
f0103e9e:	83 fb 09             	cmp    $0x9,%ebx
f0103ea1:	77 36                	ja     f0103ed9 <vprintfmt+0xdb>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0103ea3:	83 c6 01             	add    $0x1,%esi
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0103ea6:	eb e9                	jmp    f0103e91 <vprintfmt+0x93>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0103ea8:	8b 45 14             	mov    0x14(%ebp),%eax
f0103eab:	8d 48 04             	lea    0x4(%eax),%ecx
f0103eae:	89 4d 14             	mov    %ecx,0x14(%ebp)
f0103eb1:	8b 00                	mov    (%eax),%eax
f0103eb3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0103eb6:	89 de                	mov    %ebx,%esi
			}
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
			goto process_precision;
f0103eb8:	eb 22                	jmp    f0103edc <vprintfmt+0xde>
f0103eba:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0103ebd:	85 c9                	test   %ecx,%ecx
f0103ebf:	b8 00 00 00 00       	mov    $0x0,%eax
f0103ec4:	0f 49 c1             	cmovns %ecx,%eax
f0103ec7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0103eca:	89 de                	mov    %ebx,%esi
f0103ecc:	eb 9d                	jmp    f0103e6b <vprintfmt+0x6d>
f0103ece:	89 de                	mov    %ebx,%esi
			if (width < 0)
				width = 0;
			goto reswitch;

		case '#':
			altflag = 1;
f0103ed0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
			goto reswitch;
f0103ed7:	eb 92                	jmp    f0103e6b <vprintfmt+0x6d>
f0103ed9:	89 4d d4             	mov    %ecx,-0x2c(%ebp)

		process_precision:
			if (width < 0)
f0103edc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0103ee0:	79 89                	jns    f0103e6b <vprintfmt+0x6d>
f0103ee2:	e9 77 ff ff ff       	jmp    f0103e5e <vprintfmt+0x60>
				width = precision, precision = -1;
			goto reswitch;

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0103ee7:	83 c2 01             	add    $0x1,%edx
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0103eea:	89 de                	mov    %ebx,%esi
			goto reswitch;

		// long flag (doubled for long long)
		case 'l':
			lflag++;
			goto reswitch;
f0103eec:	e9 7a ff ff ff       	jmp    f0103e6b <vprintfmt+0x6d>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0103ef1:	8b 45 14             	mov    0x14(%ebp),%eax
f0103ef4:	8d 50 04             	lea    0x4(%eax),%edx
f0103ef7:	89 55 14             	mov    %edx,0x14(%ebp)
f0103efa:	89 7c 24 04          	mov    %edi,0x4(%esp)
f0103efe:	8b 00                	mov    (%eax),%eax
f0103f00:	89 04 24             	mov    %eax,(%esp)
f0103f03:	ff 55 08             	call   *0x8(%ebp)
			break;
f0103f06:	e9 18 ff ff ff       	jmp    f0103e23 <vprintfmt+0x25>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0103f0b:	8b 45 14             	mov    0x14(%ebp),%eax
f0103f0e:	8d 50 04             	lea    0x4(%eax),%edx
f0103f11:	89 55 14             	mov    %edx,0x14(%ebp)
f0103f14:	8b 00                	mov    (%eax),%eax
f0103f16:	99                   	cltd   
f0103f17:	31 d0                	xor    %edx,%eax
f0103f19:	29 d0                	sub    %edx,%eax
			if (err < 0)
				err = -err;
			if (err >= MAXERROR || (p = error_string[err]) == NULL)
f0103f1b:	83 f8 06             	cmp    $0x6,%eax
f0103f1e:	7f 0b                	jg     f0103f2b <vprintfmt+0x12d>
f0103f20:	8b 14 85 a4 5f 10 f0 	mov    -0xfefa05c(,%eax,4),%edx
f0103f27:	85 d2                	test   %edx,%edx
f0103f29:	75 20                	jne    f0103f4b <vprintfmt+0x14d>
				printfmt(putch, putdat, "error %d", err);
f0103f2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0103f2f:	c7 44 24 08 d9 5d 10 	movl   $0xf0105dd9,0x8(%esp)
f0103f36:	f0 
f0103f37:	89 7c 24 04          	mov    %edi,0x4(%esp)
f0103f3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f3e:	89 04 24             	mov    %eax,(%esp)
f0103f41:	e8 90 fe ff ff       	call   f0103dd6 <printfmt>
f0103f46:	e9 d8 fe ff ff       	jmp    f0103e23 <vprintfmt+0x25>
			else
				printfmt(putch, putdat, "%s", p);
f0103f4b:	89 54 24 0c          	mov    %edx,0xc(%esp)
f0103f4f:	c7 44 24 08 cc 4e 10 	movl   $0xf0104ecc,0x8(%esp)
f0103f56:	f0 
f0103f57:	89 7c 24 04          	mov    %edi,0x4(%esp)
f0103f5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f5e:	89 04 24             	mov    %eax,(%esp)
f0103f61:	e8 70 fe ff ff       	call   f0103dd6 <printfmt>
f0103f66:	e9 b8 fe ff ff       	jmp    f0103e23 <vprintfmt+0x25>
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0103f6b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
f0103f6e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103f71:	89 45 d0             	mov    %eax,-0x30(%ebp)
				printfmt(putch, putdat, "%s", p);
			break;

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0103f74:	8b 45 14             	mov    0x14(%ebp),%eax
f0103f77:	8d 50 04             	lea    0x4(%eax),%edx
f0103f7a:	89 55 14             	mov    %edx,0x14(%ebp)
f0103f7d:	8b 30                	mov    (%eax),%esi
				p = "(null)";
f0103f7f:	85 f6                	test   %esi,%esi
f0103f81:	b8 d2 5d 10 f0       	mov    $0xf0105dd2,%eax
f0103f86:	0f 44 f0             	cmove  %eax,%esi
			if (width > 0 && padc != '-')
f0103f89:	80 7d d8 2d          	cmpb   $0x2d,-0x28(%ebp)
f0103f8d:	0f 84 97 00 00 00    	je     f010402a <vprintfmt+0x22c>
f0103f93:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f0103f97:	0f 8e 9b 00 00 00    	jle    f0104038 <vprintfmt+0x23a>
				for (width -= strnlen(p, precision); width > 0; width--)
f0103f9d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0103fa1:	89 34 24             	mov    %esi,(%esp)
f0103fa4:	e8 9f 03 00 00       	call   f0104348 <strnlen>
f0103fa9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0103fac:	29 c2                	sub    %eax,%edx
f0103fae:	89 55 d0             	mov    %edx,-0x30(%ebp)
					putch(padc, putdat);
f0103fb1:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
f0103fb5:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0103fb8:	89 75 d8             	mov    %esi,-0x28(%ebp)
f0103fbb:	8b 75 08             	mov    0x8(%ebp),%esi
f0103fbe:	89 5d 10             	mov    %ebx,0x10(%ebp)
f0103fc1:	89 d3                	mov    %edx,%ebx
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0103fc3:	eb 0f                	jmp    f0103fd4 <vprintfmt+0x1d6>
					putch(padc, putdat);
f0103fc5:	89 7c 24 04          	mov    %edi,0x4(%esp)
f0103fc9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103fcc:	89 04 24             	mov    %eax,(%esp)
f0103fcf:	ff d6                	call   *%esi
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0103fd1:	83 eb 01             	sub    $0x1,%ebx
f0103fd4:	85 db                	test   %ebx,%ebx
f0103fd6:	7f ed                	jg     f0103fc5 <vprintfmt+0x1c7>
f0103fd8:	8b 75 d8             	mov    -0x28(%ebp),%esi
f0103fdb:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0103fde:	85 d2                	test   %edx,%edx
f0103fe0:	b8 00 00 00 00       	mov    $0x0,%eax
f0103fe5:	0f 49 c2             	cmovns %edx,%eax
f0103fe8:	29 c2                	sub    %eax,%edx
f0103fea:	89 7d 0c             	mov    %edi,0xc(%ebp)
f0103fed:	89 d7                	mov    %edx,%edi
f0103fef:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0103ff2:	eb 50                	jmp    f0104044 <vprintfmt+0x246>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
f0103ff4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103ff8:	74 1e                	je     f0104018 <vprintfmt+0x21a>
f0103ffa:	0f be d2             	movsbl %dl,%edx
f0103ffd:	83 ea 20             	sub    $0x20,%edx
f0104000:	83 fa 5e             	cmp    $0x5e,%edx
f0104003:	76 13                	jbe    f0104018 <vprintfmt+0x21a>
					putch('?', putdat);
f0104005:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104008:	89 44 24 04          	mov    %eax,0x4(%esp)
f010400c:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
f0104013:	ff 55 08             	call   *0x8(%ebp)
f0104016:	eb 0d                	jmp    f0104025 <vprintfmt+0x227>
				else
					putch(ch, putdat);
f0104018:	8b 55 0c             	mov    0xc(%ebp),%edx
f010401b:	89 54 24 04          	mov    %edx,0x4(%esp)
f010401f:	89 04 24             	mov    %eax,(%esp)
f0104022:	ff 55 08             	call   *0x8(%ebp)
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0104025:	83 ef 01             	sub    $0x1,%edi
f0104028:	eb 1a                	jmp    f0104044 <vprintfmt+0x246>
f010402a:	89 7d 0c             	mov    %edi,0xc(%ebp)
f010402d:	8b 7d dc             	mov    -0x24(%ebp),%edi
f0104030:	89 5d 10             	mov    %ebx,0x10(%ebp)
f0104033:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0104036:	eb 0c                	jmp    f0104044 <vprintfmt+0x246>
f0104038:	89 7d 0c             	mov    %edi,0xc(%ebp)
f010403b:	8b 7d dc             	mov    -0x24(%ebp),%edi
f010403e:	89 5d 10             	mov    %ebx,0x10(%ebp)
f0104041:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0104044:	83 c6 01             	add    $0x1,%esi
f0104047:	0f b6 56 ff          	movzbl -0x1(%esi),%edx
f010404b:	0f be c2             	movsbl %dl,%eax
f010404e:	85 c0                	test   %eax,%eax
f0104050:	74 27                	je     f0104079 <vprintfmt+0x27b>
f0104052:	85 db                	test   %ebx,%ebx
f0104054:	78 9e                	js     f0103ff4 <vprintfmt+0x1f6>
f0104056:	83 eb 01             	sub    $0x1,%ebx
f0104059:	79 99                	jns    f0103ff4 <vprintfmt+0x1f6>
f010405b:	89 f8                	mov    %edi,%eax
f010405d:	8b 7d 0c             	mov    0xc(%ebp),%edi
f0104060:	8b 75 08             	mov    0x8(%ebp),%esi
f0104063:	89 c3                	mov    %eax,%ebx
f0104065:	eb 1a                	jmp    f0104081 <vprintfmt+0x283>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
				putch(' ', putdat);
f0104067:	89 7c 24 04          	mov    %edi,0x4(%esp)
f010406b:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
f0104072:	ff d6                	call   *%esi
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0104074:	83 eb 01             	sub    $0x1,%ebx
f0104077:	eb 08                	jmp    f0104081 <vprintfmt+0x283>
f0104079:	89 fb                	mov    %edi,%ebx
f010407b:	8b 75 08             	mov    0x8(%ebp),%esi
f010407e:	8b 7d 0c             	mov    0xc(%ebp),%edi
f0104081:	85 db                	test   %ebx,%ebx
f0104083:	7f e2                	jg     f0104067 <vprintfmt+0x269>
f0104085:	89 75 08             	mov    %esi,0x8(%ebp)
f0104088:	8b 5d 10             	mov    0x10(%ebp),%ebx
f010408b:	e9 93 fd ff ff       	jmp    f0103e23 <vprintfmt+0x25>
// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
	if (lflag >= 2)
f0104090:	83 fa 01             	cmp    $0x1,%edx
f0104093:	7e 16                	jle    f01040ab <vprintfmt+0x2ad>
		return va_arg(*ap, long long);
f0104095:	8b 45 14             	mov    0x14(%ebp),%eax
f0104098:	8d 50 08             	lea    0x8(%eax),%edx
f010409b:	89 55 14             	mov    %edx,0x14(%ebp)
f010409e:	8b 50 04             	mov    0x4(%eax),%edx
f01040a1:	8b 00                	mov    (%eax),%eax
f01040a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01040a6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01040a9:	eb 32                	jmp    f01040dd <vprintfmt+0x2df>
	else if (lflag)
f01040ab:	85 d2                	test   %edx,%edx
f01040ad:	74 18                	je     f01040c7 <vprintfmt+0x2c9>
		return va_arg(*ap, long);
f01040af:	8b 45 14             	mov    0x14(%ebp),%eax
f01040b2:	8d 50 04             	lea    0x4(%eax),%edx
f01040b5:	89 55 14             	mov    %edx,0x14(%ebp)
f01040b8:	8b 30                	mov    (%eax),%esi
f01040ba:	89 75 e0             	mov    %esi,-0x20(%ebp)
f01040bd:	89 f0                	mov    %esi,%eax
f01040bf:	c1 f8 1f             	sar    $0x1f,%eax
f01040c2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01040c5:	eb 16                	jmp    f01040dd <vprintfmt+0x2df>
	else
		return va_arg(*ap, int);
f01040c7:	8b 45 14             	mov    0x14(%ebp),%eax
f01040ca:	8d 50 04             	lea    0x4(%eax),%edx
f01040cd:	89 55 14             	mov    %edx,0x14(%ebp)
f01040d0:	8b 30                	mov    (%eax),%esi
f01040d2:	89 75 e0             	mov    %esi,-0x20(%ebp)
f01040d5:	89 f0                	mov    %esi,%eax
f01040d7:	c1 f8 1f             	sar    $0x1f,%eax
f01040da:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				putch(' ', putdat);
			break;

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f01040dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01040e0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
			if ((long long) num < 0) {
				putch('-', putdat);
				num = -(long long) num;
			}
			base = 10;
f01040e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
			break;

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
			if ((long long) num < 0) {
f01040e8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01040ec:	0f 89 80 00 00 00    	jns    f0104172 <vprintfmt+0x374>
				putch('-', putdat);
f01040f2:	89 7c 24 04          	mov    %edi,0x4(%esp)
f01040f6:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
f01040fd:	ff 55 08             	call   *0x8(%ebp)
				num = -(long long) num;
f0104100:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0104103:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0104106:	f7 d8                	neg    %eax
f0104108:	83 d2 00             	adc    $0x0,%edx
f010410b:	f7 da                	neg    %edx
			}
			base = 10;
f010410d:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0104112:	eb 5e                	jmp    f0104172 <vprintfmt+0x374>
			goto number;

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0104114:	8d 45 14             	lea    0x14(%ebp),%eax
f0104117:	e8 63 fc ff ff       	call   f0103d7f <getuint>
			base = 10;
f010411c:	b9 0a 00 00 00       	mov    $0xa,%ecx
			goto number;
f0104121:	eb 4f                	jmp    f0104172 <vprintfmt+0x374>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			num = getuint(&ap, lflag);
f0104123:	8d 45 14             	lea    0x14(%ebp),%eax
f0104126:	e8 54 fc ff ff       	call   f0103d7f <getuint>
			base = 8;
f010412b:	b9 08 00 00 00       	mov    $0x8,%ecx
			goto number;
f0104130:	eb 40                	jmp    f0104172 <vprintfmt+0x374>

		// pointer
		case 'p':
			putch('0', putdat);
f0104132:	89 7c 24 04          	mov    %edi,0x4(%esp)
f0104136:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
f010413d:	ff 55 08             	call   *0x8(%ebp)
			putch('x', putdat);
f0104140:	89 7c 24 04          	mov    %edi,0x4(%esp)
f0104144:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
f010414b:	ff 55 08             	call   *0x8(%ebp)
			num = (unsigned long long)
				(uintptr_t) va_arg(ap, void *);
f010414e:	8b 45 14             	mov    0x14(%ebp),%eax
f0104151:	8d 50 04             	lea    0x4(%eax),%edx
f0104154:	89 55 14             	mov    %edx,0x14(%ebp)

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0104157:	8b 00                	mov    (%eax),%eax
f0104159:	ba 00 00 00 00       	mov    $0x0,%edx
				(uintptr_t) va_arg(ap, void *);
			base = 16;
f010415e:	b9 10 00 00 00       	mov    $0x10,%ecx
			goto number;
f0104163:	eb 0d                	jmp    f0104172 <vprintfmt+0x374>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0104165:	8d 45 14             	lea    0x14(%ebp),%eax
f0104168:	e8 12 fc ff ff       	call   f0103d7f <getuint>
			base = 16;
f010416d:	b9 10 00 00 00       	mov    $0x10,%ecx
		number:
			printnum(putch, putdat, num, base, width, padc);
f0104172:	0f be 75 d8          	movsbl -0x28(%ebp),%esi
f0104176:	89 74 24 10          	mov    %esi,0x10(%esp)
f010417a:	8b 75 dc             	mov    -0x24(%ebp),%esi
f010417d:	89 74 24 0c          	mov    %esi,0xc(%esp)
f0104181:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0104185:	89 04 24             	mov    %eax,(%esp)
f0104188:	89 54 24 04          	mov    %edx,0x4(%esp)
f010418c:	89 fa                	mov    %edi,%edx
f010418e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104191:	e8 fa fa ff ff       	call   f0103c90 <printnum>
			break;
f0104196:	e9 88 fc ff ff       	jmp    f0103e23 <vprintfmt+0x25>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f010419b:	89 7c 24 04          	mov    %edi,0x4(%esp)
f010419f:	89 04 24             	mov    %eax,(%esp)
f01041a2:	ff 55 08             	call   *0x8(%ebp)
			break;
f01041a5:	e9 79 fc ff ff       	jmp    f0103e23 <vprintfmt+0x25>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f01041aa:	89 7c 24 04          	mov    %edi,0x4(%esp)
f01041ae:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
f01041b5:	ff 55 08             	call   *0x8(%ebp)
			for (fmt--; fmt[-1] != '%'; fmt--)
f01041b8:	89 f3                	mov    %esi,%ebx
f01041ba:	eb 03                	jmp    f01041bf <vprintfmt+0x3c1>
f01041bc:	83 eb 01             	sub    $0x1,%ebx
f01041bf:	80 7b ff 25          	cmpb   $0x25,-0x1(%ebx)
f01041c3:	75 f7                	jne    f01041bc <vprintfmt+0x3be>
f01041c5:	e9 59 fc ff ff       	jmp    f0103e23 <vprintfmt+0x25>
				/* do nothing */;
			break;
		}
	}
}
f01041ca:	83 c4 3c             	add    $0x3c,%esp
f01041cd:	5b                   	pop    %ebx
f01041ce:	5e                   	pop    %esi
f01041cf:	5f                   	pop    %edi
f01041d0:	5d                   	pop    %ebp
f01041d1:	c3                   	ret    

f01041d2 <vsnprintf>:
		*b->buf++ = ch;
}

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f01041d2:	55                   	push   %ebp
f01041d3:	89 e5                	mov    %esp,%ebp
f01041d5:	83 ec 28             	sub    $0x28,%esp
f01041d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01041db:	8b 55 0c             	mov    0xc(%ebp),%edx
	struct sprintbuf b = {buf, buf+n-1, 0};
f01041de:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01041e1:	8d 4c 10 ff          	lea    -0x1(%eax,%edx,1),%ecx
f01041e5:	89 4d f0             	mov    %ecx,-0x10(%ebp)
f01041e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f01041ef:	85 c0                	test   %eax,%eax
f01041f1:	74 30                	je     f0104223 <vsnprintf+0x51>
f01041f3:	85 d2                	test   %edx,%edx
f01041f5:	7e 2c                	jle    f0104223 <vsnprintf+0x51>
		return -E_INVAL;

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f01041f7:	8b 45 14             	mov    0x14(%ebp),%eax
f01041fa:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01041fe:	8b 45 10             	mov    0x10(%ebp),%eax
f0104201:	89 44 24 08          	mov    %eax,0x8(%esp)
f0104205:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0104208:	89 44 24 04          	mov    %eax,0x4(%esp)
f010420c:	c7 04 24 b9 3d 10 f0 	movl   $0xf0103db9,(%esp)
f0104213:	e8 e6 fb ff ff       	call   f0103dfe <vprintfmt>

	// null terminate the buffer
	*b.buf = '\0';
f0104218:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010421b:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f010421e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104221:	eb 05                	jmp    f0104228 <vsnprintf+0x56>
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
	struct sprintbuf b = {buf, buf+n-1, 0};

	if (buf == NULL || n < 1)
		return -E_INVAL;
f0104223:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax

	// null terminate the buffer
	*b.buf = '\0';

	return b.cnt;
}
f0104228:	c9                   	leave  
f0104229:	c3                   	ret    

f010422a <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f010422a:	55                   	push   %ebp
f010422b:	89 e5                	mov    %esp,%ebp
f010422d:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0104230:	8d 45 14             	lea    0x14(%ebp),%eax
	rc = vsnprintf(buf, n, fmt, ap);
f0104233:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0104237:	8b 45 10             	mov    0x10(%ebp),%eax
f010423a:	89 44 24 08          	mov    %eax,0x8(%esp)
f010423e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104241:	89 44 24 04          	mov    %eax,0x4(%esp)
f0104245:	8b 45 08             	mov    0x8(%ebp),%eax
f0104248:	89 04 24             	mov    %eax,(%esp)
f010424b:	e8 82 ff ff ff       	call   f01041d2 <vsnprintf>
	va_end(ap);

	return rc;
}
f0104250:	c9                   	leave  
f0104251:	c3                   	ret    
f0104252:	66 90                	xchg   %ax,%ax
f0104254:	66 90                	xchg   %ax,%ax
f0104256:	66 90                	xchg   %ax,%ax
f0104258:	66 90                	xchg   %ax,%ax
f010425a:	66 90                	xchg   %ax,%ax
f010425c:	66 90                	xchg   %ax,%ax
f010425e:	66 90                	xchg   %ax,%ax

f0104260 <readline>:
#define BUFLEN 1024
static char buf[BUFLEN];

char *
readline(const char *prompt)
{
f0104260:	55                   	push   %ebp
f0104261:	89 e5                	mov    %esp,%ebp
f0104263:	57                   	push   %edi
f0104264:	56                   	push   %esi
f0104265:	53                   	push   %ebx
f0104266:	83 ec 1c             	sub    $0x1c,%esp
f0104269:	8b 45 08             	mov    0x8(%ebp),%eax
	int i, c, echoing;

	if (prompt != NULL)
f010426c:	85 c0                	test   %eax,%eax
f010426e:	74 10                	je     f0104280 <readline+0x20>
		cprintf("%s", prompt);
f0104270:	89 44 24 04          	mov    %eax,0x4(%esp)
f0104274:	c7 04 24 cc 4e 10 f0 	movl   $0xf0104ecc,(%esp)
f010427b:	e8 ab f2 ff ff       	call   f010352b <cprintf>

	i = 0;
	echoing = iscons(0);
f0104280:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
f0104287:	e8 b6 c3 ff ff       	call   f0100642 <iscons>
f010428c:	89 c7                	mov    %eax,%edi
	int i, c, echoing;

	if (prompt != NULL)
		cprintf("%s", prompt);

	i = 0;
f010428e:	be 00 00 00 00       	mov    $0x0,%esi
	echoing = iscons(0);
	while (1) {
		c = getchar();
f0104293:	e8 99 c3 ff ff       	call   f0100631 <getchar>
f0104298:	89 c3                	mov    %eax,%ebx
		if (c < 0) {
f010429a:	85 c0                	test   %eax,%eax
f010429c:	79 17                	jns    f01042b5 <readline+0x55>
			cprintf("read error: %e\n", c);
f010429e:	89 44 24 04          	mov    %eax,0x4(%esp)
f01042a2:	c7 04 24 c0 5f 10 f0 	movl   $0xf0105fc0,(%esp)
f01042a9:	e8 7d f2 ff ff       	call   f010352b <cprintf>
			return NULL;
f01042ae:	b8 00 00 00 00       	mov    $0x0,%eax
f01042b3:	eb 6d                	jmp    f0104322 <readline+0xc2>
		} else if ((c == '\b' || c == '\x7f') && i > 0) {
f01042b5:	83 f8 7f             	cmp    $0x7f,%eax
f01042b8:	74 05                	je     f01042bf <readline+0x5f>
f01042ba:	83 f8 08             	cmp    $0x8,%eax
f01042bd:	75 19                	jne    f01042d8 <readline+0x78>
f01042bf:	85 f6                	test   %esi,%esi
f01042c1:	7e 15                	jle    f01042d8 <readline+0x78>
			if (echoing)
f01042c3:	85 ff                	test   %edi,%edi
f01042c5:	74 0c                	je     f01042d3 <readline+0x73>
				cputchar('\b');
f01042c7:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
f01042ce:	e8 4e c3 ff ff       	call   f0100621 <cputchar>
			i--;
f01042d3:	83 ee 01             	sub    $0x1,%esi
f01042d6:	eb bb                	jmp    f0104293 <readline+0x33>
		} else if (c >= ' ' && i < BUFLEN-1) {
f01042d8:	81 fe fe 03 00 00    	cmp    $0x3fe,%esi
f01042de:	7f 1c                	jg     f01042fc <readline+0x9c>
f01042e0:	83 fb 1f             	cmp    $0x1f,%ebx
f01042e3:	7e 17                	jle    f01042fc <readline+0x9c>
			if (echoing)
f01042e5:	85 ff                	test   %edi,%edi
f01042e7:	74 08                	je     f01042f1 <readline+0x91>
				cputchar(c);
f01042e9:	89 1c 24             	mov    %ebx,(%esp)
f01042ec:	e8 30 c3 ff ff       	call   f0100621 <cputchar>
			buf[i++] = c;
f01042f1:	88 9e a0 ca 17 f0    	mov    %bl,-0xfe83560(%esi)
f01042f7:	8d 76 01             	lea    0x1(%esi),%esi
f01042fa:	eb 97                	jmp    f0104293 <readline+0x33>
		} else if (c == '\n' || c == '\r') {
f01042fc:	83 fb 0d             	cmp    $0xd,%ebx
f01042ff:	74 05                	je     f0104306 <readline+0xa6>
f0104301:	83 fb 0a             	cmp    $0xa,%ebx
f0104304:	75 8d                	jne    f0104293 <readline+0x33>
			if (echoing)
f0104306:	85 ff                	test   %edi,%edi
f0104308:	74 0c                	je     f0104316 <readline+0xb6>
				cputchar('\n');
f010430a:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
f0104311:	e8 0b c3 ff ff       	call   f0100621 <cputchar>
			buf[i] = 0;
f0104316:	c6 86 a0 ca 17 f0 00 	movb   $0x0,-0xfe83560(%esi)
			return buf;
f010431d:	b8 a0 ca 17 f0       	mov    $0xf017caa0,%eax
		}
	}
}
f0104322:	83 c4 1c             	add    $0x1c,%esp
f0104325:	5b                   	pop    %ebx
f0104326:	5e                   	pop    %esi
f0104327:	5f                   	pop    %edi
f0104328:	5d                   	pop    %ebp
f0104329:	c3                   	ret    
f010432a:	66 90                	xchg   %ax,%ax
f010432c:	66 90                	xchg   %ax,%ax
f010432e:	66 90                	xchg   %ax,%ax

f0104330 <strlen>:
// Primespipe runs 3x faster this way.
#define ASM 1

int
strlen(const char *s)
{
f0104330:	55                   	push   %ebp
f0104331:	89 e5                	mov    %esp,%ebp
f0104333:	8b 55 08             	mov    0x8(%ebp),%edx
	int n;

	for (n = 0; *s != '\0'; s++)
f0104336:	b8 00 00 00 00       	mov    $0x0,%eax
f010433b:	eb 03                	jmp    f0104340 <strlen+0x10>
		n++;
f010433d:	83 c0 01             	add    $0x1,%eax
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0104340:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
f0104344:	75 f7                	jne    f010433d <strlen+0xd>
		n++;
	return n;
}
f0104346:	5d                   	pop    %ebp
f0104347:	c3                   	ret    

f0104348 <strnlen>:

int
strnlen(const char *s, size_t size)
{
f0104348:	55                   	push   %ebp
f0104349:	89 e5                	mov    %esp,%ebp
f010434b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010434e:	8b 55 0c             	mov    0xc(%ebp),%edx
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0104351:	b8 00 00 00 00       	mov    $0x0,%eax
f0104356:	eb 03                	jmp    f010435b <strnlen+0x13>
		n++;
f0104358:	83 c0 01             	add    $0x1,%eax
int
strnlen(const char *s, size_t size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f010435b:	39 d0                	cmp    %edx,%eax
f010435d:	74 06                	je     f0104365 <strnlen+0x1d>
f010435f:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)
f0104363:	75 f3                	jne    f0104358 <strnlen+0x10>
		n++;
	return n;
}
f0104365:	5d                   	pop    %ebp
f0104366:	c3                   	ret    

f0104367 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0104367:	55                   	push   %ebp
f0104368:	89 e5                	mov    %esp,%ebp
f010436a:	53                   	push   %ebx
f010436b:	8b 45 08             	mov    0x8(%ebp),%eax
f010436e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	char *ret;

	ret = dst;
	while ((*dst++ = *src++) != '\0')
f0104371:	89 c2                	mov    %eax,%edx
f0104373:	83 c2 01             	add    $0x1,%edx
f0104376:	83 c1 01             	add    $0x1,%ecx
f0104379:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
f010437d:	88 5a ff             	mov    %bl,-0x1(%edx)
f0104380:	84 db                	test   %bl,%bl
f0104382:	75 ef                	jne    f0104373 <strcpy+0xc>
		/* do nothing */;
	return ret;
}
f0104384:	5b                   	pop    %ebx
f0104385:	5d                   	pop    %ebp
f0104386:	c3                   	ret    

f0104387 <strcat>:

char *
strcat(char *dst, const char *src)
{
f0104387:	55                   	push   %ebp
f0104388:	89 e5                	mov    %esp,%ebp
f010438a:	53                   	push   %ebx
f010438b:	83 ec 08             	sub    $0x8,%esp
f010438e:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int len = strlen(dst);
f0104391:	89 1c 24             	mov    %ebx,(%esp)
f0104394:	e8 97 ff ff ff       	call   f0104330 <strlen>
	strcpy(dst + len, src);
f0104399:	8b 55 0c             	mov    0xc(%ebp),%edx
f010439c:	89 54 24 04          	mov    %edx,0x4(%esp)
f01043a0:	01 d8                	add    %ebx,%eax
f01043a2:	89 04 24             	mov    %eax,(%esp)
f01043a5:	e8 bd ff ff ff       	call   f0104367 <strcpy>
	return dst;
}
f01043aa:	89 d8                	mov    %ebx,%eax
f01043ac:	83 c4 08             	add    $0x8,%esp
f01043af:	5b                   	pop    %ebx
f01043b0:	5d                   	pop    %ebp
f01043b1:	c3                   	ret    

f01043b2 <strncpy>:

char *
strncpy(char *dst, const char *src, size_t size) {
f01043b2:	55                   	push   %ebp
f01043b3:	89 e5                	mov    %esp,%ebp
f01043b5:	56                   	push   %esi
f01043b6:	53                   	push   %ebx
f01043b7:	8b 75 08             	mov    0x8(%ebp),%esi
f01043ba:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f01043bd:	89 f3                	mov    %esi,%ebx
f01043bf:	03 5d 10             	add    0x10(%ebp),%ebx
	size_t i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f01043c2:	89 f2                	mov    %esi,%edx
f01043c4:	eb 0f                	jmp    f01043d5 <strncpy+0x23>
		*dst++ = *src;
f01043c6:	83 c2 01             	add    $0x1,%edx
f01043c9:	0f b6 01             	movzbl (%ecx),%eax
f01043cc:	88 42 ff             	mov    %al,-0x1(%edx)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
f01043cf:	80 39 01             	cmpb   $0x1,(%ecx)
f01043d2:	83 d9 ff             	sbb    $0xffffffff,%ecx
strncpy(char *dst, const char *src, size_t size) {
	size_t i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f01043d5:	39 da                	cmp    %ebx,%edx
f01043d7:	75 ed                	jne    f01043c6 <strncpy+0x14>
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
}
f01043d9:	89 f0                	mov    %esi,%eax
f01043db:	5b                   	pop    %ebx
f01043dc:	5e                   	pop    %esi
f01043dd:	5d                   	pop    %ebp
f01043de:	c3                   	ret    

f01043df <strlcpy>:

size_t
strlcpy(char *dst, const char *src, size_t size)
{
f01043df:	55                   	push   %ebp
f01043e0:	89 e5                	mov    %esp,%ebp
f01043e2:	56                   	push   %esi
f01043e3:	53                   	push   %ebx
f01043e4:	8b 75 08             	mov    0x8(%ebp),%esi
f01043e7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01043ea:	8b 4d 10             	mov    0x10(%ebp),%ecx
f01043ed:	89 f0                	mov    %esi,%eax
f01043ef:	8d 5c 0e ff          	lea    -0x1(%esi,%ecx,1),%ebx
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
f01043f3:	85 c9                	test   %ecx,%ecx
f01043f5:	75 0b                	jne    f0104402 <strlcpy+0x23>
f01043f7:	eb 1d                	jmp    f0104416 <strlcpy+0x37>
		while (--size > 0 && *src != '\0')
			*dst++ = *src++;
f01043f9:	83 c0 01             	add    $0x1,%eax
f01043fc:	83 c2 01             	add    $0x1,%edx
f01043ff:	88 48 ff             	mov    %cl,-0x1(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0104402:	39 d8                	cmp    %ebx,%eax
f0104404:	74 0b                	je     f0104411 <strlcpy+0x32>
f0104406:	0f b6 0a             	movzbl (%edx),%ecx
f0104409:	84 c9                	test   %cl,%cl
f010440b:	75 ec                	jne    f01043f9 <strlcpy+0x1a>
f010440d:	89 c2                	mov    %eax,%edx
f010440f:	eb 02                	jmp    f0104413 <strlcpy+0x34>
f0104411:	89 c2                	mov    %eax,%edx
			*dst++ = *src++;
		*dst = '\0';
f0104413:	c6 02 00             	movb   $0x0,(%edx)
	}
	return dst - dst_in;
f0104416:	29 f0                	sub    %esi,%eax
}
f0104418:	5b                   	pop    %ebx
f0104419:	5e                   	pop    %esi
f010441a:	5d                   	pop    %ebp
f010441b:	c3                   	ret    

f010441c <strcmp>:

int
strcmp(const char *p, const char *q)
{
f010441c:	55                   	push   %ebp
f010441d:	89 e5                	mov    %esp,%ebp
f010441f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104422:	8b 55 0c             	mov    0xc(%ebp),%edx
	while (*p && *p == *q)
f0104425:	eb 06                	jmp    f010442d <strcmp+0x11>
		p++, q++;
f0104427:	83 c1 01             	add    $0x1,%ecx
f010442a:	83 c2 01             	add    $0x1,%edx
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f010442d:	0f b6 01             	movzbl (%ecx),%eax
f0104430:	84 c0                	test   %al,%al
f0104432:	74 04                	je     f0104438 <strcmp+0x1c>
f0104434:	3a 02                	cmp    (%edx),%al
f0104436:	74 ef                	je     f0104427 <strcmp+0xb>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0104438:	0f b6 c0             	movzbl %al,%eax
f010443b:	0f b6 12             	movzbl (%edx),%edx
f010443e:	29 d0                	sub    %edx,%eax
}
f0104440:	5d                   	pop    %ebp
f0104441:	c3                   	ret    

f0104442 <strncmp>:

int
strncmp(const char *p, const char *q, size_t n)
{
f0104442:	55                   	push   %ebp
f0104443:	89 e5                	mov    %esp,%ebp
f0104445:	53                   	push   %ebx
f0104446:	8b 45 08             	mov    0x8(%ebp),%eax
f0104449:	8b 55 0c             	mov    0xc(%ebp),%edx
f010444c:	89 c3                	mov    %eax,%ebx
f010444e:	03 5d 10             	add    0x10(%ebp),%ebx
	while (n > 0 && *p && *p == *q)
f0104451:	eb 06                	jmp    f0104459 <strncmp+0x17>
		n--, p++, q++;
f0104453:	83 c0 01             	add    $0x1,%eax
f0104456:	83 c2 01             	add    $0x1,%edx
}

int
strncmp(const char *p, const char *q, size_t n)
{
	while (n > 0 && *p && *p == *q)
f0104459:	39 d8                	cmp    %ebx,%eax
f010445b:	74 15                	je     f0104472 <strncmp+0x30>
f010445d:	0f b6 08             	movzbl (%eax),%ecx
f0104460:	84 c9                	test   %cl,%cl
f0104462:	74 04                	je     f0104468 <strncmp+0x26>
f0104464:	3a 0a                	cmp    (%edx),%cl
f0104466:	74 eb                	je     f0104453 <strncmp+0x11>
		n--, p++, q++;
	if (n == 0)
		return 0;
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0104468:	0f b6 00             	movzbl (%eax),%eax
f010446b:	0f b6 12             	movzbl (%edx),%edx
f010446e:	29 d0                	sub    %edx,%eax
f0104470:	eb 05                	jmp    f0104477 <strncmp+0x35>
strncmp(const char *p, const char *q, size_t n)
{
	while (n > 0 && *p && *p == *q)
		n--, p++, q++;
	if (n == 0)
		return 0;
f0104472:	b8 00 00 00 00       	mov    $0x0,%eax
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
}
f0104477:	5b                   	pop    %ebx
f0104478:	5d                   	pop    %ebp
f0104479:	c3                   	ret    

f010447a <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f010447a:	55                   	push   %ebp
f010447b:	89 e5                	mov    %esp,%ebp
f010447d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104480:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
	for (; *s; s++)
f0104484:	eb 07                	jmp    f010448d <strchr+0x13>
		if (*s == c)
f0104486:	38 ca                	cmp    %cl,%dl
f0104488:	74 0f                	je     f0104499 <strchr+0x1f>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f010448a:	83 c0 01             	add    $0x1,%eax
f010448d:	0f b6 10             	movzbl (%eax),%edx
f0104490:	84 d2                	test   %dl,%dl
f0104492:	75 f2                	jne    f0104486 <strchr+0xc>
		if (*s == c)
			return (char *) s;
	return 0;
f0104494:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104499:	5d                   	pop    %ebp
f010449a:	c3                   	ret    

f010449b <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f010449b:	55                   	push   %ebp
f010449c:	89 e5                	mov    %esp,%ebp
f010449e:	8b 45 08             	mov    0x8(%ebp),%eax
f01044a1:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
	for (; *s; s++)
f01044a5:	eb 07                	jmp    f01044ae <strfind+0x13>
		if (*s == c)
f01044a7:	38 ca                	cmp    %cl,%dl
f01044a9:	74 0a                	je     f01044b5 <strfind+0x1a>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f01044ab:	83 c0 01             	add    $0x1,%eax
f01044ae:	0f b6 10             	movzbl (%eax),%edx
f01044b1:	84 d2                	test   %dl,%dl
f01044b3:	75 f2                	jne    f01044a7 <strfind+0xc>
		if (*s == c)
			break;
	return (char *) s;
}
f01044b5:	5d                   	pop    %ebp
f01044b6:	c3                   	ret    

f01044b7 <memset>:

#if ASM
void *
memset(void *v, int c, size_t n)
{
f01044b7:	55                   	push   %ebp
f01044b8:	89 e5                	mov    %esp,%ebp
f01044ba:	57                   	push   %edi
f01044bb:	56                   	push   %esi
f01044bc:	53                   	push   %ebx
f01044bd:	8b 7d 08             	mov    0x8(%ebp),%edi
f01044c0:	8b 4d 10             	mov    0x10(%ebp),%ecx
	char *p;

	if (n == 0)
f01044c3:	85 c9                	test   %ecx,%ecx
f01044c5:	74 36                	je     f01044fd <memset+0x46>
		return v;
	if ((int)v%4 == 0 && n%4 == 0) {
f01044c7:	f7 c7 03 00 00 00    	test   $0x3,%edi
f01044cd:	75 28                	jne    f01044f7 <memset+0x40>
f01044cf:	f6 c1 03             	test   $0x3,%cl
f01044d2:	75 23                	jne    f01044f7 <memset+0x40>
		c &= 0xFF;
f01044d4:	0f b6 55 0c          	movzbl 0xc(%ebp),%edx
		c = (c<<24)|(c<<16)|(c<<8)|c;
f01044d8:	89 d3                	mov    %edx,%ebx
f01044da:	c1 e3 08             	shl    $0x8,%ebx
f01044dd:	89 d6                	mov    %edx,%esi
f01044df:	c1 e6 18             	shl    $0x18,%esi
f01044e2:	89 d0                	mov    %edx,%eax
f01044e4:	c1 e0 10             	shl    $0x10,%eax
f01044e7:	09 f0                	or     %esi,%eax
f01044e9:	09 c2                	or     %eax,%edx
f01044eb:	89 d0                	mov    %edx,%eax
f01044ed:	09 d8                	or     %ebx,%eax
		asm volatile("cld; rep stosl\n"
			:: "D" (v), "a" (c), "c" (n/4)
f01044ef:	c1 e9 02             	shr    $0x2,%ecx
	if (n == 0)
		return v;
	if ((int)v%4 == 0 && n%4 == 0) {
		c &= 0xFF;
		c = (c<<24)|(c<<16)|(c<<8)|c;
		asm volatile("cld; rep stosl\n"
f01044f2:	fc                   	cld    
f01044f3:	f3 ab                	rep stos %eax,%es:(%edi)
f01044f5:	eb 06                	jmp    f01044fd <memset+0x46>
			:: "D" (v), "a" (c), "c" (n/4)
			: "cc", "memory");
	} else
		asm volatile("cld; rep stosb\n"
f01044f7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044fa:	fc                   	cld    
f01044fb:	f3 aa                	rep stos %al,%es:(%edi)
			:: "D" (v), "a" (c), "c" (n)
			: "cc", "memory");
	return v;
}
f01044fd:	89 f8                	mov    %edi,%eax
f01044ff:	5b                   	pop    %ebx
f0104500:	5e                   	pop    %esi
f0104501:	5f                   	pop    %edi
f0104502:	5d                   	pop    %ebp
f0104503:	c3                   	ret    

f0104504 <memmove>:

void *
memmove(void *dst, const void *src, size_t n)
{
f0104504:	55                   	push   %ebp
f0104505:	89 e5                	mov    %esp,%ebp
f0104507:	57                   	push   %edi
f0104508:	56                   	push   %esi
f0104509:	8b 45 08             	mov    0x8(%ebp),%eax
f010450c:	8b 75 0c             	mov    0xc(%ebp),%esi
f010450f:	8b 4d 10             	mov    0x10(%ebp),%ecx
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0104512:	39 c6                	cmp    %eax,%esi
f0104514:	73 35                	jae    f010454b <memmove+0x47>
f0104516:	8d 14 0e             	lea    (%esi,%ecx,1),%edx
f0104519:	39 d0                	cmp    %edx,%eax
f010451b:	73 2e                	jae    f010454b <memmove+0x47>
		s += n;
		d += n;
f010451d:	8d 3c 08             	lea    (%eax,%ecx,1),%edi
f0104520:	89 d6                	mov    %edx,%esi
f0104522:	09 fe                	or     %edi,%esi
		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
f0104524:	f7 c6 03 00 00 00    	test   $0x3,%esi
f010452a:	75 13                	jne    f010453f <memmove+0x3b>
f010452c:	f6 c1 03             	test   $0x3,%cl
f010452f:	75 0e                	jne    f010453f <memmove+0x3b>
			asm volatile("std; rep movsl\n"
				:: "D" (d-4), "S" (s-4), "c" (n/4) : "cc", "memory");
f0104531:	83 ef 04             	sub    $0x4,%edi
f0104534:	8d 72 fc             	lea    -0x4(%edx),%esi
f0104537:	c1 e9 02             	shr    $0x2,%ecx
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
			asm volatile("std; rep movsl\n"
f010453a:	fd                   	std    
f010453b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010453d:	eb 09                	jmp    f0104548 <memmove+0x44>
				:: "D" (d-4), "S" (s-4), "c" (n/4) : "cc", "memory");
		else
			asm volatile("std; rep movsb\n"
				:: "D" (d-1), "S" (s-1), "c" (n) : "cc", "memory");
f010453f:	83 ef 01             	sub    $0x1,%edi
f0104542:	8d 72 ff             	lea    -0x1(%edx),%esi
		d += n;
		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
			asm volatile("std; rep movsl\n"
				:: "D" (d-4), "S" (s-4), "c" (n/4) : "cc", "memory");
		else
			asm volatile("std; rep movsb\n"
f0104545:	fd                   	std    
f0104546:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
				:: "D" (d-1), "S" (s-1), "c" (n) : "cc", "memory");
		// Some versions of GCC rely on DF being clear
		asm volatile("cld" ::: "cc");
f0104548:	fc                   	cld    
f0104549:	eb 1d                	jmp    f0104568 <memmove+0x64>
f010454b:	89 f2                	mov    %esi,%edx
f010454d:	09 c2                	or     %eax,%edx
	} else {
		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
f010454f:	f6 c2 03             	test   $0x3,%dl
f0104552:	75 0f                	jne    f0104563 <memmove+0x5f>
f0104554:	f6 c1 03             	test   $0x3,%cl
f0104557:	75 0a                	jne    f0104563 <memmove+0x5f>
			asm volatile("cld; rep movsl\n"
				:: "D" (d), "S" (s), "c" (n/4) : "cc", "memory");
f0104559:	c1 e9 02             	shr    $0x2,%ecx
				:: "D" (d-1), "S" (s-1), "c" (n) : "cc", "memory");
		// Some versions of GCC rely on DF being clear
		asm volatile("cld" ::: "cc");
	} else {
		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
			asm volatile("cld; rep movsl\n"
f010455c:	89 c7                	mov    %eax,%edi
f010455e:	fc                   	cld    
f010455f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0104561:	eb 05                	jmp    f0104568 <memmove+0x64>
				:: "D" (d), "S" (s), "c" (n/4) : "cc", "memory");
		else
			asm volatile("cld; rep movsb\n"
f0104563:	89 c7                	mov    %eax,%edi
f0104565:	fc                   	cld    
f0104566:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
				:: "D" (d), "S" (s), "c" (n) : "cc", "memory");
	}
	return dst;
}
f0104568:	5e                   	pop    %esi
f0104569:	5f                   	pop    %edi
f010456a:	5d                   	pop    %ebp
f010456b:	c3                   	ret    

f010456c <memcpy>:
}
#endif

void *
memcpy(void *dst, const void *src, size_t n)
{
f010456c:	55                   	push   %ebp
f010456d:	89 e5                	mov    %esp,%ebp
f010456f:	83 ec 0c             	sub    $0xc,%esp
	return memmove(dst, src, n);
f0104572:	8b 45 10             	mov    0x10(%ebp),%eax
f0104575:	89 44 24 08          	mov    %eax,0x8(%esp)
f0104579:	8b 45 0c             	mov    0xc(%ebp),%eax
f010457c:	89 44 24 04          	mov    %eax,0x4(%esp)
f0104580:	8b 45 08             	mov    0x8(%ebp),%eax
f0104583:	89 04 24             	mov    %eax,(%esp)
f0104586:	e8 79 ff ff ff       	call   f0104504 <memmove>
}
f010458b:	c9                   	leave  
f010458c:	c3                   	ret    

f010458d <memcmp>:

int
memcmp(const void *v1, const void *v2, size_t n)
{
f010458d:	55                   	push   %ebp
f010458e:	89 e5                	mov    %esp,%ebp
f0104590:	56                   	push   %esi
f0104591:	53                   	push   %ebx
f0104592:	8b 55 08             	mov    0x8(%ebp),%edx
f0104595:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0104598:	89 d6                	mov    %edx,%esi
f010459a:	03 75 10             	add    0x10(%ebp),%esi
	const uint8_t *s1 = (const uint8_t *) v1;
	const uint8_t *s2 = (const uint8_t *) v2;

	while (n-- > 0) {
f010459d:	eb 1a                	jmp    f01045b9 <memcmp+0x2c>
		if (*s1 != *s2)
f010459f:	0f b6 02             	movzbl (%edx),%eax
f01045a2:	0f b6 19             	movzbl (%ecx),%ebx
f01045a5:	38 d8                	cmp    %bl,%al
f01045a7:	74 0a                	je     f01045b3 <memcmp+0x26>
			return (int) *s1 - (int) *s2;
f01045a9:	0f b6 c0             	movzbl %al,%eax
f01045ac:	0f b6 db             	movzbl %bl,%ebx
f01045af:	29 d8                	sub    %ebx,%eax
f01045b1:	eb 0f                	jmp    f01045c2 <memcmp+0x35>
		s1++, s2++;
f01045b3:	83 c2 01             	add    $0x1,%edx
f01045b6:	83 c1 01             	add    $0x1,%ecx
memcmp(const void *v1, const void *v2, size_t n)
{
	const uint8_t *s1 = (const uint8_t *) v1;
	const uint8_t *s2 = (const uint8_t *) v2;

	while (n-- > 0) {
f01045b9:	39 f2                	cmp    %esi,%edx
f01045bb:	75 e2                	jne    f010459f <memcmp+0x12>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f01045bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01045c2:	5b                   	pop    %ebx
f01045c3:	5e                   	pop    %esi
f01045c4:	5d                   	pop    %ebp
f01045c5:	c3                   	ret    

f01045c6 <memfind>:

void *
memfind(const void *s, int c, size_t n)
{
f01045c6:	55                   	push   %ebp
f01045c7:	89 e5                	mov    %esp,%ebp
f01045c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045cc:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	const void *ends = (const char *) s + n;
f01045cf:	89 c2                	mov    %eax,%edx
f01045d1:	03 55 10             	add    0x10(%ebp),%edx
	for (; s < ends; s++)
f01045d4:	eb 07                	jmp    f01045dd <memfind+0x17>
		if (*(const unsigned char *) s == (unsigned char) c)
f01045d6:	38 08                	cmp    %cl,(%eax)
f01045d8:	74 07                	je     f01045e1 <memfind+0x1b>

void *
memfind(const void *s, int c, size_t n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f01045da:	83 c0 01             	add    $0x1,%eax
f01045dd:	39 d0                	cmp    %edx,%eax
f01045df:	72 f5                	jb     f01045d6 <memfind+0x10>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
	return (void *) s;
}
f01045e1:	5d                   	pop    %ebp
f01045e2:	c3                   	ret    

f01045e3 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f01045e3:	55                   	push   %ebp
f01045e4:	89 e5                	mov    %esp,%ebp
f01045e6:	57                   	push   %edi
f01045e7:	56                   	push   %esi
f01045e8:	53                   	push   %ebx
f01045e9:	8b 55 08             	mov    0x8(%ebp),%edx
f01045ec:	8b 45 10             	mov    0x10(%ebp),%eax
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f01045ef:	eb 03                	jmp    f01045f4 <strtol+0x11>
		s++;
f01045f1:	83 c2 01             	add    $0x1,%edx
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f01045f4:	0f b6 0a             	movzbl (%edx),%ecx
f01045f7:	80 f9 09             	cmp    $0x9,%cl
f01045fa:	74 f5                	je     f01045f1 <strtol+0xe>
f01045fc:	80 f9 20             	cmp    $0x20,%cl
f01045ff:	74 f0                	je     f01045f1 <strtol+0xe>
		s++;

	// plus/minus sign
	if (*s == '+')
f0104601:	80 f9 2b             	cmp    $0x2b,%cl
f0104604:	75 0a                	jne    f0104610 <strtol+0x2d>
		s++;
f0104606:	83 c2 01             	add    $0x1,%edx
}

long
strtol(const char *s, char **endptr, int base)
{
	int neg = 0;
f0104609:	bf 00 00 00 00       	mov    $0x0,%edi
f010460e:	eb 11                	jmp    f0104621 <strtol+0x3e>
f0104610:	bf 00 00 00 00       	mov    $0x0,%edi
		s++;

	// plus/minus sign
	if (*s == '+')
		s++;
	else if (*s == '-')
f0104615:	80 f9 2d             	cmp    $0x2d,%cl
f0104618:	75 07                	jne    f0104621 <strtol+0x3e>
		s++, neg = 1;
f010461a:	8d 52 01             	lea    0x1(%edx),%edx
f010461d:	66 bf 01 00          	mov    $0x1,%di

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0104621:	a9 ef ff ff ff       	test   $0xffffffef,%eax
f0104626:	75 15                	jne    f010463d <strtol+0x5a>
f0104628:	80 3a 30             	cmpb   $0x30,(%edx)
f010462b:	75 10                	jne    f010463d <strtol+0x5a>
f010462d:	80 7a 01 78          	cmpb   $0x78,0x1(%edx)
f0104631:	75 0a                	jne    f010463d <strtol+0x5a>
		s += 2, base = 16;
f0104633:	83 c2 02             	add    $0x2,%edx
f0104636:	b8 10 00 00 00       	mov    $0x10,%eax
f010463b:	eb 10                	jmp    f010464d <strtol+0x6a>
	else if (base == 0 && s[0] == '0')
f010463d:	85 c0                	test   %eax,%eax
f010463f:	75 0c                	jne    f010464d <strtol+0x6a>
		s++, base = 8;
	else if (base == 0)
		base = 10;
f0104641:	b0 0a                	mov    $0xa,%al
		s++, neg = 1;

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
		s += 2, base = 16;
	else if (base == 0 && s[0] == '0')
f0104643:	80 3a 30             	cmpb   $0x30,(%edx)
f0104646:	75 05                	jne    f010464d <strtol+0x6a>
		s++, base = 8;
f0104648:	83 c2 01             	add    $0x1,%edx
f010464b:	b0 08                	mov    $0x8,%al
	else if (base == 0)
		base = 10;
f010464d:	bb 00 00 00 00       	mov    $0x0,%ebx
f0104652:	89 45 10             	mov    %eax,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0104655:	0f b6 0a             	movzbl (%edx),%ecx
f0104658:	8d 71 d0             	lea    -0x30(%ecx),%esi
f010465b:	89 f0                	mov    %esi,%eax
f010465d:	3c 09                	cmp    $0x9,%al
f010465f:	77 08                	ja     f0104669 <strtol+0x86>
			dig = *s - '0';
f0104661:	0f be c9             	movsbl %cl,%ecx
f0104664:	83 e9 30             	sub    $0x30,%ecx
f0104667:	eb 20                	jmp    f0104689 <strtol+0xa6>
		else if (*s >= 'a' && *s <= 'z')
f0104669:	8d 71 9f             	lea    -0x61(%ecx),%esi
f010466c:	89 f0                	mov    %esi,%eax
f010466e:	3c 19                	cmp    $0x19,%al
f0104670:	77 08                	ja     f010467a <strtol+0x97>
			dig = *s - 'a' + 10;
f0104672:	0f be c9             	movsbl %cl,%ecx
f0104675:	83 e9 57             	sub    $0x57,%ecx
f0104678:	eb 0f                	jmp    f0104689 <strtol+0xa6>
		else if (*s >= 'A' && *s <= 'Z')
f010467a:	8d 71 bf             	lea    -0x41(%ecx),%esi
f010467d:	89 f0                	mov    %esi,%eax
f010467f:	3c 19                	cmp    $0x19,%al
f0104681:	77 16                	ja     f0104699 <strtol+0xb6>
			dig = *s - 'A' + 10;
f0104683:	0f be c9             	movsbl %cl,%ecx
f0104686:	83 e9 37             	sub    $0x37,%ecx
		else
			break;
		if (dig >= base)
f0104689:	3b 4d 10             	cmp    0x10(%ebp),%ecx
f010468c:	7d 0f                	jge    f010469d <strtol+0xba>
			break;
		s++, val = (val * base) + dig;
f010468e:	83 c2 01             	add    $0x1,%edx
f0104691:	0f af 5d 10          	imul   0x10(%ebp),%ebx
f0104695:	01 cb                	add    %ecx,%ebx
		// we don't properly detect overflow!
	}
f0104697:	eb bc                	jmp    f0104655 <strtol+0x72>
f0104699:	89 d8                	mov    %ebx,%eax
f010469b:	eb 02                	jmp    f010469f <strtol+0xbc>
f010469d:	89 d8                	mov    %ebx,%eax

	if (endptr)
f010469f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01046a3:	74 05                	je     f01046aa <strtol+0xc7>
		*endptr = (char *) s;
f01046a5:	8b 75 0c             	mov    0xc(%ebp),%esi
f01046a8:	89 16                	mov    %edx,(%esi)
	return (neg ? -val : val);
f01046aa:	f7 d8                	neg    %eax
f01046ac:	85 ff                	test   %edi,%edi
f01046ae:	0f 44 c3             	cmove  %ebx,%eax
}
f01046b1:	5b                   	pop    %ebx
f01046b2:	5e                   	pop    %esi
f01046b3:	5f                   	pop    %edi
f01046b4:	5d                   	pop    %ebp
f01046b5:	c3                   	ret    
f01046b6:	66 90                	xchg   %ax,%ax
f01046b8:	66 90                	xchg   %ax,%ax
f01046ba:	66 90                	xchg   %ax,%ax
f01046bc:	66 90                	xchg   %ax,%ax
f01046be:	66 90                	xchg   %ax,%ax

f01046c0 <__udivdi3>:
f01046c0:	55                   	push   %ebp
f01046c1:	57                   	push   %edi
f01046c2:	56                   	push   %esi
f01046c3:	83 ec 0c             	sub    $0xc,%esp
f01046c6:	8b 44 24 28          	mov    0x28(%esp),%eax
f01046ca:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
f01046ce:	8b 6c 24 20          	mov    0x20(%esp),%ebp
f01046d2:	8b 4c 24 24          	mov    0x24(%esp),%ecx
f01046d6:	85 c0                	test   %eax,%eax
f01046d8:	89 7c 24 04          	mov    %edi,0x4(%esp)
f01046dc:	89 ea                	mov    %ebp,%edx
f01046de:	89 0c 24             	mov    %ecx,(%esp)
f01046e1:	75 2d                	jne    f0104710 <__udivdi3+0x50>
f01046e3:	39 e9                	cmp    %ebp,%ecx
f01046e5:	77 61                	ja     f0104748 <__udivdi3+0x88>
f01046e7:	85 c9                	test   %ecx,%ecx
f01046e9:	89 ce                	mov    %ecx,%esi
f01046eb:	75 0b                	jne    f01046f8 <__udivdi3+0x38>
f01046ed:	b8 01 00 00 00       	mov    $0x1,%eax
f01046f2:	31 d2                	xor    %edx,%edx
f01046f4:	f7 f1                	div    %ecx
f01046f6:	89 c6                	mov    %eax,%esi
f01046f8:	31 d2                	xor    %edx,%edx
f01046fa:	89 e8                	mov    %ebp,%eax
f01046fc:	f7 f6                	div    %esi
f01046fe:	89 c5                	mov    %eax,%ebp
f0104700:	89 f8                	mov    %edi,%eax
f0104702:	f7 f6                	div    %esi
f0104704:	89 ea                	mov    %ebp,%edx
f0104706:	83 c4 0c             	add    $0xc,%esp
f0104709:	5e                   	pop    %esi
f010470a:	5f                   	pop    %edi
f010470b:	5d                   	pop    %ebp
f010470c:	c3                   	ret    
f010470d:	8d 76 00             	lea    0x0(%esi),%esi
f0104710:	39 e8                	cmp    %ebp,%eax
f0104712:	77 24                	ja     f0104738 <__udivdi3+0x78>
f0104714:	0f bd e8             	bsr    %eax,%ebp
f0104717:	83 f5 1f             	xor    $0x1f,%ebp
f010471a:	75 3c                	jne    f0104758 <__udivdi3+0x98>
f010471c:	8b 74 24 04          	mov    0x4(%esp),%esi
f0104720:	39 34 24             	cmp    %esi,(%esp)
f0104723:	0f 86 9f 00 00 00    	jbe    f01047c8 <__udivdi3+0x108>
f0104729:	39 d0                	cmp    %edx,%eax
f010472b:	0f 82 97 00 00 00    	jb     f01047c8 <__udivdi3+0x108>
f0104731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
f0104738:	31 d2                	xor    %edx,%edx
f010473a:	31 c0                	xor    %eax,%eax
f010473c:	83 c4 0c             	add    $0xc,%esp
f010473f:	5e                   	pop    %esi
f0104740:	5f                   	pop    %edi
f0104741:	5d                   	pop    %ebp
f0104742:	c3                   	ret    
f0104743:	90                   	nop
f0104744:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
f0104748:	89 f8                	mov    %edi,%eax
f010474a:	f7 f1                	div    %ecx
f010474c:	31 d2                	xor    %edx,%edx
f010474e:	83 c4 0c             	add    $0xc,%esp
f0104751:	5e                   	pop    %esi
f0104752:	5f                   	pop    %edi
f0104753:	5d                   	pop    %ebp
f0104754:	c3                   	ret    
f0104755:	8d 76 00             	lea    0x0(%esi),%esi
f0104758:	89 e9                	mov    %ebp,%ecx
f010475a:	8b 3c 24             	mov    (%esp),%edi
f010475d:	d3 e0                	shl    %cl,%eax
f010475f:	89 c6                	mov    %eax,%esi
f0104761:	b8 20 00 00 00       	mov    $0x20,%eax
f0104766:	29 e8                	sub    %ebp,%eax
f0104768:	89 c1                	mov    %eax,%ecx
f010476a:	d3 ef                	shr    %cl,%edi
f010476c:	89 e9                	mov    %ebp,%ecx
f010476e:	89 7c 24 08          	mov    %edi,0x8(%esp)
f0104772:	8b 3c 24             	mov    (%esp),%edi
f0104775:	09 74 24 08          	or     %esi,0x8(%esp)
f0104779:	89 d6                	mov    %edx,%esi
f010477b:	d3 e7                	shl    %cl,%edi
f010477d:	89 c1                	mov    %eax,%ecx
f010477f:	89 3c 24             	mov    %edi,(%esp)
f0104782:	8b 7c 24 04          	mov    0x4(%esp),%edi
f0104786:	d3 ee                	shr    %cl,%esi
f0104788:	89 e9                	mov    %ebp,%ecx
f010478a:	d3 e2                	shl    %cl,%edx
f010478c:	89 c1                	mov    %eax,%ecx
f010478e:	d3 ef                	shr    %cl,%edi
f0104790:	09 d7                	or     %edx,%edi
f0104792:	89 f2                	mov    %esi,%edx
f0104794:	89 f8                	mov    %edi,%eax
f0104796:	f7 74 24 08          	divl   0x8(%esp)
f010479a:	89 d6                	mov    %edx,%esi
f010479c:	89 c7                	mov    %eax,%edi
f010479e:	f7 24 24             	mull   (%esp)
f01047a1:	39 d6                	cmp    %edx,%esi
f01047a3:	89 14 24             	mov    %edx,(%esp)
f01047a6:	72 30                	jb     f01047d8 <__udivdi3+0x118>
f01047a8:	8b 54 24 04          	mov    0x4(%esp),%edx
f01047ac:	89 e9                	mov    %ebp,%ecx
f01047ae:	d3 e2                	shl    %cl,%edx
f01047b0:	39 c2                	cmp    %eax,%edx
f01047b2:	73 05                	jae    f01047b9 <__udivdi3+0xf9>
f01047b4:	3b 34 24             	cmp    (%esp),%esi
f01047b7:	74 1f                	je     f01047d8 <__udivdi3+0x118>
f01047b9:	89 f8                	mov    %edi,%eax
f01047bb:	31 d2                	xor    %edx,%edx
f01047bd:	e9 7a ff ff ff       	jmp    f010473c <__udivdi3+0x7c>
f01047c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
f01047c8:	31 d2                	xor    %edx,%edx
f01047ca:	b8 01 00 00 00       	mov    $0x1,%eax
f01047cf:	e9 68 ff ff ff       	jmp    f010473c <__udivdi3+0x7c>
f01047d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
f01047d8:	8d 47 ff             	lea    -0x1(%edi),%eax
f01047db:	31 d2                	xor    %edx,%edx
f01047dd:	83 c4 0c             	add    $0xc,%esp
f01047e0:	5e                   	pop    %esi
f01047e1:	5f                   	pop    %edi
f01047e2:	5d                   	pop    %ebp
f01047e3:	c3                   	ret    
f01047e4:	66 90                	xchg   %ax,%ax
f01047e6:	66 90                	xchg   %ax,%ax
f01047e8:	66 90                	xchg   %ax,%ax
f01047ea:	66 90                	xchg   %ax,%ax
f01047ec:	66 90                	xchg   %ax,%ax
f01047ee:	66 90                	xchg   %ax,%ax

f01047f0 <__umoddi3>:
f01047f0:	55                   	push   %ebp
f01047f1:	57                   	push   %edi
f01047f2:	56                   	push   %esi
f01047f3:	83 ec 14             	sub    $0x14,%esp
f01047f6:	8b 44 24 28          	mov    0x28(%esp),%eax
f01047fa:	8b 4c 24 24          	mov    0x24(%esp),%ecx
f01047fe:	8b 74 24 2c          	mov    0x2c(%esp),%esi
f0104802:	89 c7                	mov    %eax,%edi
f0104804:	89 44 24 04          	mov    %eax,0x4(%esp)
f0104808:	8b 44 24 30          	mov    0x30(%esp),%eax
f010480c:	89 4c 24 10          	mov    %ecx,0x10(%esp)
f0104810:	89 34 24             	mov    %esi,(%esp)
f0104813:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0104817:	85 c0                	test   %eax,%eax
f0104819:	89 c2                	mov    %eax,%edx
f010481b:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f010481f:	75 17                	jne    f0104838 <__umoddi3+0x48>
f0104821:	39 fe                	cmp    %edi,%esi
f0104823:	76 4b                	jbe    f0104870 <__umoddi3+0x80>
f0104825:	89 c8                	mov    %ecx,%eax
f0104827:	89 fa                	mov    %edi,%edx
f0104829:	f7 f6                	div    %esi
f010482b:	89 d0                	mov    %edx,%eax
f010482d:	31 d2                	xor    %edx,%edx
f010482f:	83 c4 14             	add    $0x14,%esp
f0104832:	5e                   	pop    %esi
f0104833:	5f                   	pop    %edi
f0104834:	5d                   	pop    %ebp
f0104835:	c3                   	ret    
f0104836:	66 90                	xchg   %ax,%ax
f0104838:	39 f8                	cmp    %edi,%eax
f010483a:	77 54                	ja     f0104890 <__umoddi3+0xa0>
f010483c:	0f bd e8             	bsr    %eax,%ebp
f010483f:	83 f5 1f             	xor    $0x1f,%ebp
f0104842:	75 5c                	jne    f01048a0 <__umoddi3+0xb0>
f0104844:	8b 7c 24 08          	mov    0x8(%esp),%edi
f0104848:	39 3c 24             	cmp    %edi,(%esp)
f010484b:	0f 87 e7 00 00 00    	ja     f0104938 <__umoddi3+0x148>
f0104851:	8b 7c 24 04          	mov    0x4(%esp),%edi
f0104855:	29 f1                	sub    %esi,%ecx
f0104857:	19 c7                	sbb    %eax,%edi
f0104859:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f010485d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0104861:	8b 44 24 08          	mov    0x8(%esp),%eax
f0104865:	8b 54 24 0c          	mov    0xc(%esp),%edx
f0104869:	83 c4 14             	add    $0x14,%esp
f010486c:	5e                   	pop    %esi
f010486d:	5f                   	pop    %edi
f010486e:	5d                   	pop    %ebp
f010486f:	c3                   	ret    
f0104870:	85 f6                	test   %esi,%esi
f0104872:	89 f5                	mov    %esi,%ebp
f0104874:	75 0b                	jne    f0104881 <__umoddi3+0x91>
f0104876:	b8 01 00 00 00       	mov    $0x1,%eax
f010487b:	31 d2                	xor    %edx,%edx
f010487d:	f7 f6                	div    %esi
f010487f:	89 c5                	mov    %eax,%ebp
f0104881:	8b 44 24 04          	mov    0x4(%esp),%eax
f0104885:	31 d2                	xor    %edx,%edx
f0104887:	f7 f5                	div    %ebp
f0104889:	89 c8                	mov    %ecx,%eax
f010488b:	f7 f5                	div    %ebp
f010488d:	eb 9c                	jmp    f010482b <__umoddi3+0x3b>
f010488f:	90                   	nop
f0104890:	89 c8                	mov    %ecx,%eax
f0104892:	89 fa                	mov    %edi,%edx
f0104894:	83 c4 14             	add    $0x14,%esp
f0104897:	5e                   	pop    %esi
f0104898:	5f                   	pop    %edi
f0104899:	5d                   	pop    %ebp
f010489a:	c3                   	ret    
f010489b:	90                   	nop
f010489c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
f01048a0:	8b 04 24             	mov    (%esp),%eax
f01048a3:	be 20 00 00 00       	mov    $0x20,%esi
f01048a8:	89 e9                	mov    %ebp,%ecx
f01048aa:	29 ee                	sub    %ebp,%esi
f01048ac:	d3 e2                	shl    %cl,%edx
f01048ae:	89 f1                	mov    %esi,%ecx
f01048b0:	d3 e8                	shr    %cl,%eax
f01048b2:	89 e9                	mov    %ebp,%ecx
f01048b4:	89 44 24 04          	mov    %eax,0x4(%esp)
f01048b8:	8b 04 24             	mov    (%esp),%eax
f01048bb:	09 54 24 04          	or     %edx,0x4(%esp)
f01048bf:	89 fa                	mov    %edi,%edx
f01048c1:	d3 e0                	shl    %cl,%eax
f01048c3:	89 f1                	mov    %esi,%ecx
f01048c5:	89 44 24 08          	mov    %eax,0x8(%esp)
f01048c9:	8b 44 24 10          	mov    0x10(%esp),%eax
f01048cd:	d3 ea                	shr    %cl,%edx
f01048cf:	89 e9                	mov    %ebp,%ecx
f01048d1:	d3 e7                	shl    %cl,%edi
f01048d3:	89 f1                	mov    %esi,%ecx
f01048d5:	d3 e8                	shr    %cl,%eax
f01048d7:	89 e9                	mov    %ebp,%ecx
f01048d9:	09 f8                	or     %edi,%eax
f01048db:	8b 7c 24 10          	mov    0x10(%esp),%edi
f01048df:	f7 74 24 04          	divl   0x4(%esp)
f01048e3:	d3 e7                	shl    %cl,%edi
f01048e5:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f01048e9:	89 d7                	mov    %edx,%edi
f01048eb:	f7 64 24 08          	mull   0x8(%esp)
f01048ef:	39 d7                	cmp    %edx,%edi
f01048f1:	89 c1                	mov    %eax,%ecx
f01048f3:	89 14 24             	mov    %edx,(%esp)
f01048f6:	72 2c                	jb     f0104924 <__umoddi3+0x134>
f01048f8:	39 44 24 0c          	cmp    %eax,0xc(%esp)
f01048fc:	72 22                	jb     f0104920 <__umoddi3+0x130>
f01048fe:	8b 44 24 0c          	mov    0xc(%esp),%eax
f0104902:	29 c8                	sub    %ecx,%eax
f0104904:	19 d7                	sbb    %edx,%edi
f0104906:	89 e9                	mov    %ebp,%ecx
f0104908:	89 fa                	mov    %edi,%edx
f010490a:	d3 e8                	shr    %cl,%eax
f010490c:	89 f1                	mov    %esi,%ecx
f010490e:	d3 e2                	shl    %cl,%edx
f0104910:	89 e9                	mov    %ebp,%ecx
f0104912:	d3 ef                	shr    %cl,%edi
f0104914:	09 d0                	or     %edx,%eax
f0104916:	89 fa                	mov    %edi,%edx
f0104918:	83 c4 14             	add    $0x14,%esp
f010491b:	5e                   	pop    %esi
f010491c:	5f                   	pop    %edi
f010491d:	5d                   	pop    %ebp
f010491e:	c3                   	ret    
f010491f:	90                   	nop
f0104920:	39 d7                	cmp    %edx,%edi
f0104922:	75 da                	jne    f01048fe <__umoddi3+0x10e>
f0104924:	8b 14 24             	mov    (%esp),%edx
f0104927:	89 c1                	mov    %eax,%ecx
f0104929:	2b 4c 24 08          	sub    0x8(%esp),%ecx
f010492d:	1b 54 24 04          	sbb    0x4(%esp),%edx
f0104931:	eb cb                	jmp    f01048fe <__umoddi3+0x10e>
f0104933:	90                   	nop
f0104934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
f0104938:	3b 44 24 0c          	cmp    0xc(%esp),%eax
f010493c:	0f 82 0f ff ff ff    	jb     f0104851 <__umoddi3+0x61>
f0104942:	e9 1a ff ff ff       	jmp    f0104861 <__umoddi3+0x71>
